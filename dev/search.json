[{"path":[]},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://clock.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://clock.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 clock authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"building","dir":"Articles","previous_headings":"","what":"Building","title":"Getting Started","text":"create vector dates, can use date_build(). allows specify components individually. happen specify invalid date, ’ll get error message: One way resolve specifying invalid date resolution strategy using invalid argument. multiple options, case ’ll ask invalid dates set previous valid moment time. learn invalid dates, check documentation invalid_resolve(). actually “last day month”, easier way specify : can also create date-times using date_time_build(), generates POSIXct. Note must supply time zone! “build” time doesn’t exist, ’ll get error. example, March 8th, 2020, daylight saving time gap 1 hour America/New_York time zone took us 01:59:59 directly 03:00:00, skipping 2 o’clock hour entirely. Let’s “accidentally” create time gap: resolve issue, can specify nonexistent time resolution strategy nonexistent argument. number options, including rolling forward backward next previous valid moments time:","code":"date_build(2019, 2, 1:5) #> [1] \"2019-02-01\" \"2019-02-02\" \"2019-02-03\" \"2019-02-04\" \"2019-02-05\" date_build(2019, 1:12, 31) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. date_build(2019, 1:12, 31, invalid = \"previous\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\" date_build(2019, 1:12, \"last\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\" date_time_build(2019, 1:5, 1, 2, 30, zone = \"America/New_York\") #> [1] \"2019-01-01 02:30:00 EST\" \"2019-02-01 02:30:00 EST\" #> [3] \"2019-03-01 02:30:00 EST\" \"2019-04-01 02:30:00 EDT\" #> [5] \"2019-05-01 02:30:00 EDT\" date_time_build(2019:2021, 3, 8, 2, 30, zone = \"America/New_York\") #> Error in `as_zoned_time()`: #> ! Nonexistent time due to daylight saving time at location 2. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument. zone <- \"America/New_York\"  date_time_build(2019:2021, 3, 8, 2, 30, zone = zone, nonexistent = \"roll-forward\") #> [1] \"2019-03-08 02:30:00 EST\" \"2020-03-08 03:00:00 EDT\" #> [3] \"2021-03-08 02:30:00 EST\" date_time_build(2019:2021, 3, 8, 2, 30, zone = zone, nonexistent = \"roll-backward\") #> [1] \"2019-03-08 02:30:00 EST\" \"2020-03-08 01:59:59 EST\" #> [3] \"2021-03-08 02:30:00 EST\""},{"path":[]},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"parsing-dates","dir":"Articles","previous_headings":"Parsing","what":"Parsing dates","title":"Getting Started","text":"parse dates, use date_parse(). Parsing dates requires format string, combination commands specify date components string. default, assumes ’re working dates form \"%Y-%m-%d\" (year-month-day). can change format string using format: Various different locales supported parsing month weekday names different languages. parse French month: can learn locale options documentation clock_locale(). heterogeneous dates, can supply multiple format strings:","code":"date_parse(\"2019-01-05\") #> [1] \"2019-01-05\" date_parse(\"January 5, 2020\", format = \"%B %d, %Y\") #> [1] \"2020-01-05\" date_parse(   \"juillet 10, 2021\",    format = \"%B %d, %Y\",    locale = clock_locale(\"fr\") ) #> [1] \"2021-07-10\" x <- c(\"2020/1/5\", \"10-03-05\", \"2020/2/2\") formats <- c(\"%Y/%m/%d\", \"%y-%m-%d\")  date_parse(x, format = formats) #> [1] \"2020-01-05\" \"2010-03-05\" \"2020-02-02\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"parsing-date-times","dir":"Articles","previous_headings":"Parsing","what":"Parsing date-times","title":"Getting Started","text":"four options parsing date-times: date_time_parse(): strings like \"2020-01-01 01:02:03\" neither time zone offset full (abbreviated!) time zone name. date_time_parse_complete(): strings like \"2020-01-01T01:02:03-05:00[America/New_York]\" time zone offset time zone name present string. date_time_parse_abbrev(): strings like \"2020-01-01 01:02:03 EST\" time zone abbreviation string. date_time_parse_RFC_3339(): strings like \"2020-01-01T01:02:03Z\" \"2020-01-01T01:02:03-05:00\", RFC 3339 format intended interpreted UTC.","code":""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"date_time_parse","dir":"Articles","previous_headings":"Parsing > Parsing date-times","what":"date_time_parse()","title":"Getting Started","text":"date_time_parse() requires zone argument, ignore zone information string (.e. tried specify %z %Z). default format string \"%Y-%m-%d %H:%M:%S\". happen parse invalid ambiguous date-time, ’ll get error. example, November 1st, 2020, two 1 o’clock hours America/New_York time zone due daylight saving time fallback. can see parse time right fallback, shift forward 1 second, 1 hour 1 second, respectively: following string doesn’t include information two 1 o’clocks belongs , considered ambiguous. Ambiguous times error parsing: fix , can specify ambiguous time resolution strategy ambiguous argument.","code":"date_time_parse(\"2020-01-01 01:02:03\", \"America/New_York\") #> [1] \"2020-01-01 01:02:03 EST\" before <- date_time_parse(\"2020-11-01 00:59:59\", \"America/New_York\")  # First 1 o'clock before + 1 #> [1] \"2020-11-01 01:00:00 EDT\"  # Second 1 o'clock before + 1 + 3600 #> [1] \"2020-11-01 01:00:00 EST\" date_time_parse(\"2020-11-01 01:30:00\", \"America/New_York\") #> Error in `as_zoned_time()`: #> ! Ambiguous time due to daylight saving time at location 1. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument. zone <- \"America/New_York\"  date_time_parse(\"2020-11-01 01:30:00\", zone, ambiguous = \"earliest\") #> [1] \"2020-11-01 01:30:00 EDT\" date_time_parse(\"2020-11-01 01:30:00\", zone, ambiguous = \"latest\") #> [1] \"2020-11-01 01:30:00 EST\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"date_time_parse_complete","dir":"Articles","previous_headings":"Parsing > Parsing date-times","what":"date_time_parse_complete()","title":"Getting Started","text":"date_time_parse_complete() doesn’t zone argument, doesn’t require ambiguous nonexistent arguments, since assumes string providing completely unambiguous. way possible time zone offset, specified %z, full time zone name, specified %Z, string. following example “extended” RFC 3339 format used Java 8’s time library specify complete date-time strings. something date_time_parse_complete() can parse. default format string follows extended format, \"%Y-%m-%dT%H:%M:%S%z[%Z]\".","code":"x <- \"2020-01-01T01:02:03-05:00[America/New_York]\"  date_time_parse_complete(x) #> [1] \"2020-01-01 01:02:03 EST\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"date_time_parse_abbrev","dir":"Articles","previous_headings":"Parsing > Parsing date-times","what":"date_time_parse_abbrev()","title":"Getting Started","text":"date_time_parse_abbrev() useful date-time strings contain time zone abbreviation rather time zone offset full time zone name. string first parsed naive time without considering abbreviation, converted zoned-time using supplied zone. ambiguous time parsed, abbreviation used resolve ambiguity. might wondering need supply zone . Isn’t abbreviation enough? Unfortunately, multiple countries use time zone abbreviations, even though different time zones. means , many cases, abbreviation alone ambiguous. example, India Israel use IST standard times.","code":"x <- \"2020-01-01 01:02:03 EST\"  date_time_parse_abbrev(x, \"America/New_York\") #> [1] \"2020-01-01 01:02:03 EST\" x <- c(   \"1970-10-25 01:30:00 EDT\",   \"1970-10-25 01:30:00 EST\" )  date_time_parse_abbrev(x, \"America/New_York\") #> [1] \"1970-10-25 01:30:00 EDT\" \"1970-10-25 01:30:00 EST\" x <- \"1970-01-01 02:30:30 IST\"  # IST = India Standard Time date_time_parse_abbrev(x, \"Asia/Kolkata\") #> [1] \"1970-01-01 02:30:30 IST\"  # IST = Israel Standard Time date_time_parse_abbrev(x, \"Asia/Jerusalem\") #> [1] \"1970-01-01 02:30:30 IST\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"date_time_parse_rfc_3339","dir":"Articles","previous_headings":"Parsing > Parsing date-times","what":"date_time_parse_RFC_3339()","title":"Getting Started","text":"date_time_parse_RFC_3339() useful date-time strings come API, means likely ISO 8601 RFC 3339 format, interpreted UTC. default format string parses typical RFC 3339 format \"%Y-%m-%dT%H:%M:%SZ\". date-time strings contain numeric offset UTC rather \"Z\", ’ll need set offset argument one following: \"%z\" offset form \"-0500\". \"%Ez\" offset form \"-05:00\".","code":"x <- \"2020-01-01T01:02:03Z\"  date_time_parse_RFC_3339(x) #> [1] \"2020-01-01 01:02:03 UTC\" x <- \"2020-01-01T01:02:03-0500\"  date_time_parse_RFC_3339(x, offset = \"%z\") #> [1] \"2020-01-01 06:02:03 UTC\"  x <- \"2020-01-01T01:02:03-05:00\"  date_time_parse_RFC_3339(x, offset = \"%Ez\") #> [1] \"2020-01-01 06:02:03 UTC\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"grouping-rounding-and-shifting","dir":"Articles","previous_headings":"","what":"Grouping, rounding and shifting","title":"Getting Started","text":"performing time-series related data analysis, often need summarize series less precise precision. many different ways , differences subtle, meaningful. clock offers three different sets functions summarization: date_group() date_floor(), date_ceiling(), date_round() date_shift()","code":""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"grouping","dir":"Articles","previous_headings":"Grouping, rounding and shifting","what":"Grouping","title":"Getting Started","text":"Grouping allows summarize component date date-time within components. example grouping day month, summarizes day component within current year-month. thing note grouping day month end month, groups restart. created groups January [1, 5], [6, 10], [11, 15], [16, 20], [21, 25], [26, 30], [31]. can also group month year: also works date-times, adding ability group hour day, minute hour, second minute.","code":"x <- seq(date_build(2019, 1, 20), date_build(2019, 2, 5), by = 1) x #>  [1] \"2019-01-20\" \"2019-01-21\" \"2019-01-22\" \"2019-01-23\" \"2019-01-24\" #>  [6] \"2019-01-25\" \"2019-01-26\" \"2019-01-27\" \"2019-01-28\" \"2019-01-29\" #> [11] \"2019-01-30\" \"2019-01-31\" \"2019-02-01\" \"2019-02-02\" \"2019-02-03\" #> [16] \"2019-02-04\" \"2019-02-05\"  # Grouping by 5 days of the current month date_group(x, \"day\", n = 5) #>  [1] \"2019-01-16\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" #>  [6] \"2019-01-21\" \"2019-01-26\" \"2019-01-26\" \"2019-01-26\" \"2019-01-26\" #> [11] \"2019-01-26\" \"2019-01-31\" \"2019-02-01\" \"2019-02-01\" \"2019-02-01\" #> [16] \"2019-02-01\" \"2019-02-01\" date_group(x, \"month\") #>  [1] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #>  [6] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #> [11] \"2019-01-01\" \"2019-01-01\" \"2019-02-01\" \"2019-02-01\" \"2019-02-01\" #> [16] \"2019-02-01\" \"2019-02-01\" x <- seq(   date_time_build(2019, 1, 1, 1, 55, zone = \"UTC\"),   date_time_build(2019, 1, 1, 2, 15, zone = \"UTC\"),   by = 120 ) x #>  [1] \"2019-01-01 01:55:00 UTC\" \"2019-01-01 01:57:00 UTC\" #>  [3] \"2019-01-01 01:59:00 UTC\" \"2019-01-01 02:01:00 UTC\" #>  [5] \"2019-01-01 02:03:00 UTC\" \"2019-01-01 02:05:00 UTC\" #>  [7] \"2019-01-01 02:07:00 UTC\" \"2019-01-01 02:09:00 UTC\" #>  [9] \"2019-01-01 02:11:00 UTC\" \"2019-01-01 02:13:00 UTC\" #> [11] \"2019-01-01 02:15:00 UTC\"  date_group(x, \"minute\", n = 5) #>  [1] \"2019-01-01 01:55:00 UTC\" \"2019-01-01 01:55:00 UTC\" #>  [3] \"2019-01-01 01:55:00 UTC\" \"2019-01-01 02:00:00 UTC\" #>  [5] \"2019-01-01 02:00:00 UTC\" \"2019-01-01 02:05:00 UTC\" #>  [7] \"2019-01-01 02:05:00 UTC\" \"2019-01-01 02:05:00 UTC\" #>  [9] \"2019-01-01 02:10:00 UTC\" \"2019-01-01 02:10:00 UTC\" #> [11] \"2019-01-01 02:15:00 UTC\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"rounding","dir":"Articles","previous_headings":"Grouping, rounding and shifting","what":"Rounding","title":"Getting Started","text":"grouping useful summarizing within component, rounding useful summarizing across components. great summarizing , say, rolling set 60 days. Rounding operates underlying count makes date date-time. see mean , try unclassing date: count days since origin R uses, 1970-01-01, considered day 0. floor 60 days, bundle [1970-01-01, 1970-03-02), [1970-03-02, 1970-05-01), . Equivalently, bundles counts [0, 60), [60, 120), etc. prefer different origin, can supply Date origin date_floor(), determines “day 0” considered . can useful grouping multiple weeks want control considered start week. Since 1970-01-01 Thursday, flooring 2 weeks normally generate Thursdays: change can supply origin weekday ’d like considered first day week. need floor 1 week, often easier use date_shift(), seen next section.","code":"unclass(date_build(2020, 1, 1)) #> [1] 18262 x <- seq(date_build(1970, 01, 01), date_build(1970, 05, 10), by = 20)  date_floor(x, \"day\", n = 60) #> [1] \"1970-01-01\" \"1970-01-01\" \"1970-01-01\" \"1970-03-02\" \"1970-03-02\" #> [6] \"1970-03-02\" \"1970-05-01\" date_ceiling(x, \"day\", n = 60) #> [1] \"1970-01-01\" \"1970-03-02\" \"1970-03-02\" \"1970-03-02\" \"1970-05-01\" #> [6] \"1970-05-01\" \"1970-05-01\" as_weekday(date_floor(x, \"week\", n = 14)) #> <weekday[7]> #> [1] Thu Thu Thu Thu Thu Thu Thu sunday <- date_build(1970, 01, 04)  date_floor(x, \"week\", n = 14, origin = sunday) #> [1] \"1969-09-28\" \"1970-01-04\" \"1970-01-04\" \"1970-01-04\" \"1970-01-04\" #> [6] \"1970-01-04\" \"1970-04-12\"  as_weekday(date_floor(x, \"week\", n = 14, origin = sunday)) #> <weekday[7]> #> [1] Sun Sun Sun Sun Sun Sun Sun"},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"shifting","dir":"Articles","previous_headings":"Grouping, rounding and shifting","what":"Shifting","title":"Getting Started","text":"date_shift() allows target weekday, shift vector dates forward backward next instance target. requires using one new types clock, weekday, supplied target. example, shift next Tuesday: Shifting previous day week nice way floor 1 week. allows control start week way slightly easier using date_floor(origin = ).","code":"x <- date_build(2020, 1, 1:2)  # Wednesday / Thursday as_weekday(x) #> <weekday[2]> #> [1] Wed Thu  # `clock_weekdays` is a helper that returns the code corresponding to # the requested day of the week clock_weekdays$tuesday #> [1] 3  tuesday <- weekday(clock_weekdays$tuesday) tuesday #> <weekday[1]> #> [1] Tue  date_shift(x, target = tuesday) #> [1] \"2020-01-07\" \"2020-01-07\" x <- seq(date_build(1970, 01, 01), date_build(1970, 01, \"last\"), by = 3)  date_shift(x, tuesday, which = \"previous\") #>  [1] \"1969-12-30\" \"1969-12-30\" \"1970-01-06\" \"1970-01-06\" \"1970-01-13\" #>  [6] \"1970-01-13\" \"1970-01-13\" \"1970-01-20\" \"1970-01-20\" \"1970-01-27\" #> [11] \"1970-01-27\""},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"arithmetic","dir":"Articles","previous_headings":"","what":"Arithmetic","title":"Getting Started","text":"can arithmetic dates date-times using family add_*() functions. dates, can add years, months, days. date-times, can additionally add hours, minutes, seconds. One neat parts clock requires explicit want handle invalid dates arithmetic. 1 month January 31st? try create date, ’ll get error. clock gives power handle invalid option: teaser, low level library calendar type named year-month-day powers operation. actually gives flexibility, allowing \"2020-02-31\" exist wild: can use invalid_resolve(invalid =) resolve like add_months(), can let hang around expect operations make “valid” . working date-times, can additionally add hours, minutes, seconds. adding units time POSIXct, careful daylight saving time issues. clock tries help letting know run issue: can solve using nonexistent argument control times handled.","code":"x <- date_build(2020, 1, 1)  add_years(x, 1:5) #> [1] \"2021-01-01\" \"2022-01-01\" \"2023-01-01\" \"2024-01-01\" \"2025-01-01\" x <- date_build(2020, 1, 31)  add_months(x, 1) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. # The previous valid moment in time add_months(x, 1, invalid = \"previous\") #> [1] \"2020-02-29\"  # The next valid moment in time add_months(x, 1, invalid = \"next\") #> [1] \"2020-03-01\"  # Overflow the days. There were 29 days in February, 2020, but we # specified 31. So this overflows 2 days past day 29. add_months(x, 1, invalid = \"overflow\") #> [1] \"2020-03-02\"  # If you don't consider it to be a valid date add_months(x, 1, invalid = \"NA\") #> [1] NA ymd <- as_year_month_day(x) + duration_months(1) ymd #> <year_month_day<day>[1]> #> [1] \"2020-02-31\" # Adding 1 more month makes it valid again ymd + duration_months(1) #> <year_month_day<day>[1]> #> [1] \"2020-03-31\" x <- date_time_build(2020, 1, 1, 2, 30, zone = \"America/New_York\")  x %>%   add_days(1) %>%   add_hours(2:5) #> [1] \"2020-01-02 04:30:00 EST\" \"2020-01-02 05:30:00 EST\" #> [3] \"2020-01-02 06:30:00 EST\" \"2020-01-02 07:30:00 EST\" x <- date_time_build(1970, 04, 25, 02, 30, 00, zone = \"America/New_York\") x #> [1] \"1970-04-25 02:30:00 EST\"  # Daylight saving time gap on the 26th between 01:59:59 -> 03:00:00 x %>% add_days(1) #> Error in `as_zoned_time()`: #> ! Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument. # Roll forward to the next valid moment in time x %>% add_days(1, nonexistent = \"roll-forward\") #> [1] \"1970-04-26 03:00:00 EDT\"  # Roll backward to the previous valid moment in time x %>% add_days(1, nonexistent = \"roll-backward\") #> [1] \"1970-04-26 01:59:59 EST\"  # Shift forward by adding the size of the DST gap # (this often keeps the time of day, # but doesn't guaratee that relative ordering in `x` is maintained # so I don't recommend it) x %>% add_days(1, nonexistent = \"shift-forward\") #> [1] \"1970-04-26 03:30:00 EDT\"  # Replace nonexistent times with an NA x %>% add_days(1, nonexistent = \"NA\") #> [1] NA"},{"path":"https://clock.r-lib.org/dev/articles/clock.html","id":"getting-and-setting","dir":"Articles","previous_headings":"","what":"Getting and setting","title":"Getting Started","text":"clock provides family getters setters working dates date-times. can get set year, month, day date. might expect now, setting date invalid date requires explicitly handle : can additionally set hour, minute, second POSIXct. manipulations POSIXct, ’ll aware daylight saving time setting components. may need supply nonexistent ambiguous arguments set_*() functions handle issues.","code":"x <- date_build(2019, 5, 6)  get_year(x) #> [1] 2019 get_month(x) #> [1] 5 get_day(x) #> [1] 6  x %>%   set_day(22) %>%   set_month(10) #> [1] \"2019-10-22\" x %>%   set_day(31) %>%   set_month(4) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument.  x %>%   set_day(31) %>%   set_month(4, invalid = \"previous\") #> [1] \"2019-04-30\" x <- date_time_build(2020, 1, 2, 3, zone = \"America/New_York\") x #> [1] \"2020-01-02 03:00:00 EST\"  x %>%   set_minute(5) %>%   set_second(10) #> [1] \"2020-01-02 03:05:10 EST\""},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"why-cant-i-do-day-arithmetic-on-a-year-month-day","dir":"Articles","previous_headings":"","what":"Why can’t I do day arithmetic on a year-month-day?","title":"Frequently Asked Questions","text":"might seem intuitive since can : also able : Generally, calendars don’t support day based arithmetic, support arithmetic precise precisions day. Instead, convert time point, arithmetic , convert back (still need year-month-day ). first reason performance. year-month-day field type, implemented multiple parallel vectors holding year, month, day, components separately. two ways day based arithmetic implemented : Increment day field, check year month field see need incremented, accounting months differing number days, leap years. Convert naive-time, add days, convert back. approaches relatively expensive. One goals low-level API clock make expensive operations explicit. helps make apparent need chain together multiple operations, try calendrical arithmetic steps first, convert time point (.e. second bullet point ) chronological arithmetic. second reason invalid dates, three vector: mean “add 1 day” ? obvious answer question. Since clock requires first convert time point day based arithmetic, ’ll forced call invalid_resolve() handle invalid dates first. resolving manually, day based arithmetic makes sense.","code":"x <- year_month_day(2019, 1, 5)  add_months(x, 1) #> <year_month_day<day>[1]> #> [1] \"2019-02-05\" add_days(x, 1) #> Error in `add_days()`: #> ! Can't perform this operation on a <clock_year_month_day>. #> ℹ Do you need to convert to a time point first? #> ℹ Use `as_naive_time()` or `as_sys_time()` to convert to a time point. x %>%   as_naive_time() %>%   add_days(1) %>%   as_year_month_day() #> <year_month_day<day>[1]> #> [1] \"2019-01-06\" odd_dates <- year_month_day(2019, 2, 28:31) odd_dates #> <year_month_day<day>[4]> #> [1] \"2019-02-28\" \"2019-02-29\" \"2019-02-30\" \"2019-02-31\" odd_dates %>%   invalid_resolve(invalid = \"next\") #> <year_month_day<day>[4]> #> [1] \"2019-02-28\" \"2019-03-01\" \"2019-03-01\" \"2019-03-01\"  odd_dates %>%   invalid_resolve(invalid = \"next\") %>%   as_naive_time() %>%   add_days(2) #> <naive_time<day>[4]> #> [1] \"2019-03-02\" \"2019-03-03\" \"2019-03-03\" \"2019-03-03\"  odd_dates %>%   invalid_resolve(invalid = \"overflow\") #> <year_month_day<day>[4]> #> [1] \"2019-02-28\" \"2019-03-01\" \"2019-03-02\" \"2019-03-03\"  odd_dates %>%   invalid_resolve(invalid = \"overflow\") %>%   as_naive_time() %>%   add_days(2) #> <naive_time<day>[4]> #> [1] \"2019-03-02\" \"2019-03-03\" \"2019-03-04\" \"2019-03-05\""},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"why-cant-i-add-time-to-a-zoned-time","dir":"Articles","previous_headings":"","what":"Why can’t I add time to a zoned-time?","title":"Frequently Asked Questions","text":"zoned-time, : might wonder can’t add units time : clock, can’t much zoned-times directly. best way understand think zoned-time containing 3 things: sys-time, naive-time, time zone name. can access things : Calling add_days() zoned-time ambiguous operation. add sys-time naive-time contained zoned-time? answer changes depending scenario. , extract relevant time point care , operate , convert back zoned-time. often produces result: always! daylight saving time involved, choice sys-time naive-time matters. Let’s try adding 30 minutes: adding naive-time, got error. sys-time, everything seems okay. happened? sys-time scenario easy explain. Technically converts UTC, adds time , converts back time zone. easier way think sat front computer exactly 30 minutes (1800 seconds), looked clock. Assuming clock automatically changes correctly daylight saving time, read 3 o’clock. naive-time scenario makes sense break steps. First, convert naive-time, dropping time zone information keeping printed time: add 30 minutes . don’t time zone information, lands us 2 o’clock, isn’t issue working naive-time: Finally, convert back zoned-time. possible, tries keep printed time, just attaches relevant time zone onto . However, case isn’t possible, since 2 o’clock didn’t exist time zone! nonexistent time must handled explicitly setting nonexistent argument as_zoned_time(). can choose variety strategies handle nonexistent times, just roll forward next valid moment time. general rule, often makes sense add: Years, quarters, months calendar. Weeks days naive time. Hours, minutes, seconds, subseconds sys time. high-level API POSIXct . However, isn’t always want, low-level API requires explicit.","code":"x <- zoned_time_parse_complete(\"1970-04-26T01:30:00-05:00[America/New_York]\") x #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:00-05:00\" add_days(x, 1) #> Error in `add_days()`: #> ! Can't perform this operation on a <clock_zoned_time>. #> ℹ Do you need to convert to a time point first? #> ℹ Use `as_naive_time()` or `as_sys_time()` to convert to a time point.  add_seconds(x, 1) #> Error in `add_seconds()`: #> ! Can't perform this operation on a <clock_zoned_time>. #> ℹ Do you need to convert to a time point first? #> ℹ Use `as_naive_time()` or `as_sys_time()` to convert to a time point. x #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:00-05:00\"  # The printed time with no time zone info as_naive_time(x) #> <naive_time<second>[1]> #> [1] \"1970-04-26T01:30:00\"  # The equivalent time in UTC as_sys_time(x) #> <sys_time<second>[1]> #> [1] \"1970-04-26T06:30:00\"  zoned_time_zone(x) #> [1] \"America/New_York\" x %>%   as_naive_time() %>%   add_seconds(1) %>%   as_zoned_time(zoned_time_zone(x)) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:01-05:00\"  x %>%   as_sys_time() %>%   add_seconds(1) %>%   as_zoned_time(zoned_time_zone(x)) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:01-05:00\" # There is a DST gap 1 second after 01:59:59, # which jumps us straight to 03:00:00, # skipping the 2 o'clock hour entirely  x %>%   as_naive_time() %>%   add_minutes(30) %>%   as_zoned_time(zoned_time_zone(x)) #> Error in `as_zoned_time()`: #> ! Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  x %>%   as_sys_time() %>%   add_minutes(30) %>%   as_zoned_time(zoned_time_zone(x)) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:00:00-04:00\" x #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:00-05:00\"  x %>%   as_naive_time() #> <naive_time<second>[1]> #> [1] \"1970-04-26T01:30:00\" x %>%   as_naive_time() %>%   add_minutes(30) #> <naive_time<second>[1]> #> [1] \"1970-04-26T02:00:00\" x %>%   as_naive_time() %>%   add_minutes(30) %>%   as_zoned_time(zoned_time_zone(x), nonexistent = \"roll-forward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:00:00-04:00\""},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"where-did-my-posixct-subseconds-go","dir":"Articles","previous_headings":"","what":"Where did my POSIXct subseconds go?","title":"Frequently Asked Questions","text":"Consider following POSIXct: looks like fractional second information , converting naive-time drops : purposeful. clock treats POSIXct second precision data type. reason fact POSIXct implemented vector doubles, limit precisely can store information. example, try parsing slightly smaller larger fractional second: isn’t printing correctly, least. Let’s look hood: Double vectors limit much precision can represent, bumping limit. .1 seconds instead represented .099999etc. precision loss gets worse farther get epoch, 1970-01-01, represented 0 hood. example, ’ll use number seconds represents year 2050, add 5 microseconds : issues, clock treats POSIXct second precision data type, dropping information. Instead, parse directly subsecond clock type:","code":"old <- options(digits.secs = 6, digits = 22) x <- as.POSIXct(\"2019-01-01 01:00:00.2\", \"America/New_York\") x #> [1] \"2019-01-01 01:00:00.2 EST\" as_naive_time(x) #> <naive_time<second>[1]> #> [1] \"2019-01-01T01:00:00\" y <- as.POSIXct(   c(\"2019-01-01 01:00:00.1\", \"2019-01-01 01:00:00.3\"),    \"America/New_York\" )  # Oh dear! y #> [1] \"2019-01-01 01:00:00.0 EST\" \"2019-01-01 01:00:00.2 EST\" unclass(y) #> [1] 1546322400.099999904633 1546322400.299999952316 #> attr(,\"tzone\") #> [1] \"America/New_York\" new_utc <- function(x) {   class(x) <- c(\"POSIXct\", \"POSIXt\")   attr(x, \"tzone\") <- \"UTC\"   x }  year_2050 <- 2524608000 five_microseconds <- 0.000005  new_utc(year_2050) #> [1] \"2050-01-01 UTC\"  # Oh no! new_utc(year_2050 + five_microseconds) #> [1] \"2050-01-01 00:00:00.000004 UTC\"  # Represented internally as: year_2050 + five_microseconds #> [1] 2524608000.000004768372 naive_time_parse(   c(\"2019-01-01T01:00:00.1\", \"2019-01-01T01:00:00.3\"),    precision = \"millisecond\" ) %>%   as_zoned_time(\"America/New_York\") #> <zoned_time<millisecond><America/New_York>[2]> #> [1] \"2019-01-01T01:00:00.100-05:00\" \"2019-01-01T01:00:00.300-05:00\" # Reset old options options(old)"},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"what-is-the-time-zone-of-date","dir":"Articles","previous_headings":"","what":"What is the time zone of Date?","title":"Frequently Asked Questions","text":"clock, R’s native Date type actually assumed naive, .e. clock assumes yet---specified time zone, like naive-time. possibility assume Date UTC (like sys-time), often intuitive Dates naive manipulating converting zoned-time POSIXct. R consistently treat Dates naive UTC. Instead switches , depending function. example, Date method .POSIXct() expose tz argument. Instead, assumes Date UTC, result shown local time (defined Sys.timezone()). often results confusing behavior, : clock, converting zoned-time Date always assume Date naive, keep printed date (possible) show zone specified. hand, POSIXct method .Date() treats Date naive type. probably want, example just shows inconsistency. bit hard see , tz argument method defaults \"UTC\", set tz argument zone input, becomes clear: assumed Date UTC, resulted something like:","code":"x <- as.Date(\"2019-01-01\") x #> [1] \"2019-01-01\"  withr::with_timezone(\"America/New_York\", {   print(as.POSIXct(x)) }) #> [1] \"2019-01-01 UTC\" as_zoned_time(x, \"UTC\") #> <zoned_time<second><UTC>[1]> #> [1] \"2019-01-01T00:00:00+00:00\"  as_zoned_time(x, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\"  as_zoned_time(x, \"Europe/London\") #> <zoned_time<second><Europe/London>[1]> #> [1] \"2019-01-01T00:00:00+00:00\" x <- as.POSIXct(\"2019-01-01 23:00:00\", \"America/New_York\")  as.Date(x, tz = date_time_zone(x)) #> [1] \"2019-01-01\" utc <- date_time_set_zone(x, \"UTC\") utc #> [1] \"2019-01-02 04:00:00 UTC\"  as.Date(utc, tz = date_time_zone(utc)) #> [1] \"2019-01-02\""},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"what-does-clock-do-with-leap-seconds","dir":"Articles","previous_headings":"","what":"What does clock do with leap seconds?","title":"Frequently Asked Questions","text":"clock currently handles leap seconds way base R’s date-time (POSIXct) class - ignores entirely. strptime() simple capabilities parsing leap seconds, clock doesn’t allow : none clock types handle leap seconds, clock currently doesn’t offer way parse . current best option really need parse leap seconds use strptime(): strptime() isn’t great solution though, parsing fairly simple. try use “fake” leap second, still accept , even though isn’t real time: true solution check database actual leap seconds, successfully parse matched real leap second. C++ library powers clock capability, utc_clock class, may expose limited form future, conversion sys-time naive-time.","code":"raw <- c(   \"2015-12-31T23:59:59\",    \"2015-12-31T23:59:60\", # A real leap second!   \"2016-01-01T00:00:00\" )  x <- sys_time_parse(raw) #> Warning: Failed to parse 1 string at location 2. Returning `NA` at #> that location.  x #> <sys_time<second>[3]> #> [1] \"2015-12-31T23:59:59\" NA                    \"2016-01-01T00:00:00\" # Reported as exactly 1 second apart. # In real life these are 2 seconds apart because of the leap second. x[[3]] - x[[1]] #> <duration<second>[1]> #> [1] 1 # This returns a POSIXlt, which can handle the special 60s field x <- strptime(raw, format = \"%Y-%m-%dT%H:%M:%S\", tz = \"UTC\") x #> [1] \"2015-12-31 23:59:59 UTC\" \"2015-12-31 23:59:60 UTC\" #> [3] \"2016-01-01 00:00:00 UTC\"  # On conversion to POSIXct, it \"rolls\" forward as.POSIXct(x) #> [1] \"2015-12-31 23:59:59 UTC\" \"2016-01-01 00:00:00 UTC\" #> [3] \"2016-01-01 00:00:00 UTC\" # 2016-12-31 wasn't a leap second date, but it still tries to parse this fake time strptime(\"2016-12-31T23:59:60\", format = \"%Y-%m-%dT%H:%M:%S\", tz = \"UTC\") #> [1] \"2016-12-31 23:59:60 UTC\""},{"path":"https://clock.r-lib.org/dev/articles/faq.html","id":"why-doesnt-this-work-with-data-table","dir":"Articles","previous_headings":"","what":"Why doesn’t this work with data.table?","title":"Frequently Asked Questions","text":"entire high-level API R’s native date (Date) date-time (POSIXct) types work fine data.table, try put major clock types data.table, probably see error message: won’t see issue working data.frames tibbles. now, data.table doesn’t support concept record types. implemented list vectors equal length, together represent single idea. length() types taken length vectors, length list. unclass clock types, ’ll see implemented way: find record types extremely useful data structures building upon R’s basic atomic types ways otherwise couldn’t done. allow calendar types hold information component, enabling instant access retrieval, modification, grouping. also allow calendars represent invalid dates, 2019-02-31, without issues. Time points use store nanosecond precision date-times, really C++ int64_t types don’t nicely fit R atomic type (aware bit64 package, made conscious decision implement record type instead. partly missing values handled, integrates vctrs). idea record type actually isn’t new. R’s POSIXlt type record type: data.table doesn’t truly support POSIXlt either. Instead, get warning converting POSIXct. pretty reasonable considering focus performance. previously bit difficult create record types R examples resources build . vctrs, ’ve added vctrs_rcrd type serves base build new record types . Many S3 methods written vctrs_rcrds way work type builds top , giving lot scaffolding free. hopeful record types make way R ecosystem built common foundation, might possible data.table enable approved type package.","code":"library(data.table)  data.table(x = year_month_day(2019, 1, 1)) #> Error in dimnames(x) <- dn :  #>   length of 'dimnames' [1] not equal to array extent ymdh <- year_month_day(2019, 1, 1:2, 1)  unclass(ymdh) #> $year #> [1] 2019 2019 #>  #> $month #> [1] 1 1 #>  #> $day #> [1] 1 2 #>  #> $hour #> [1] 1 1 #>  #> attr(,\"precision\") #> [1] 5  unclass(as_naive_time(ymdh)) #> $lower #> [1] 2147483648 2147483648 #>  #> $upper #> [1] 429529 429553 #>  #> attr(,\"precision\") #> [1] 5 #> attr(,\"clock\") #> [1] 1 x <- as.POSIXct(\"2019-01-01\", \"America/New_York\")  # POSIXct is implemented as a double unclass(x) #> [1] 1546318800 #> attr(,\"tzone\") #> [1] \"America/New_York\"  # POSIXlt is a record type unclass(as.POSIXlt(x)) #> $sec #> [1] 0 #>  #> $min #> [1] 0 #>  #> $hour #> [1] 0 #>  #> $mday #> [1] 1 #>  #> $mon #> [1] 0 #>  #> $year #> [1] 119 #>  #> $wday #> [1] 2 #>  #> $yday #> [1] 0 #>  #> $isdst #> [1] 0 #>  #> $zone #> [1] \"EST\" #>  #> $gmtoff #> [1] -18000 #>  #> attr(,\"tzone\") #> [1] \"America/New_York\" \"EST\"              \"EDT\"              #> attr(,\"balanced\") #> [1] TRUE data.table(x = as.POSIXlt(\"2019-01-01\", \"America/New_York\")) #>             x #> 1: 2019-01-01 #> Warning message: #> In as.data.table.list(x, keep.rownames = keep.rownames, check.names = check.names,  : #>   POSIXlt column type detected and converted to POSIXct. We do not recommend use of POSIXlt at all because it uses 40 bytes to store one date."},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"motivations","dir":"Articles","previous_headings":"","what":"Motivations","title":"Motivations for clock","text":"R always strong date date-time capabilities. Date, POSIXct, POSIXlt classes provide powerful foundation build , R community done just . lubridate, zoo, tsibble just popular packages extended R’s native date-time capabilities. , clock? following clock’s goals: Explicitly handle invalid dates Explicitly handle daylight saving time issues Expose naive types representing date-times without time zone Provide calendar types representing calendar “dates” alternative ways Provide variable precision date-time types Dealing dates date-times difficult enough . clock’s overarching mission accomplish goals explicit unambiguous way possible. combination : Erroring early verbosely Requiring named optional arguments everywhere Providing optional “strict” mode production systems forces explicitly type assumptions invalid dates daylight saving time issues might also wondering, add features lubridate instead? clock’s high-level API lubridate similar overall scopes feel, powered two different systems. way solve problems clock often different might lubridate. Merging new system lubridate difficult task, involve many backwards incompatible changes. Additionally, clock’s low-level API provides new types capabilities scope even lubridate, focuses R’s native date-time types. rest vignette investigates clock’s goals detail. relevant, comparison lubridate made demonstrate improvements consistency come clock. Parts document extremely detailed, can get technical. included provide examples tough date-time manipulation problems feel -discussed, feel free skip around.","code":""},{"path":[]},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"dates","dir":"Articles","previous_headings":"Motivations > Invalid dates","what":"Dates","title":"Motivations for clock","text":"1 month January 31st, 2020? Let’s ask lubridate: example, ’ve asked lubridate create two invalid dates, 2020-02-30 2020-02-31. Invalid dates often arise month-based arithmetic, also arise forcibly setting month specific value. dates don’t exist, lubridate returns NA. working time series, often useful return something back, ? : Return NA lubridate Return previous valid moment time Return next valid moment time Overflow invalid date March number days past true end February landed first available + months(1). supplement , lubridate added %m+% add_with_rollback(). Dates, hardest part %m+% remembering use . common bug forget use helper bitten invalid date issue unexpected NA. clock, invalid dates must handled explicitly occur. default behavior raises error. can handle issues invalid date resolution strategy: recommend using either \"previous\" \"next\" times. Overflowing can useful certain scenarios, can also result losing relative ordering input. previous example, note x longer sorted adding 1 month using \"overflow\". analysis requires (weakly) increasing sequence dates, many time series analyses , use \"previous\" \"next\", guaranteed maintain relative ordering.","code":"x <- add_days(as.Date(\"2020-01-31\"), c(-2, -1, 0, 1)) x #> [1] \"2020-01-29\" \"2020-01-30\" \"2020-01-31\" \"2020-02-01\"  x + months(1) #> [1] \"2020-02-29\" NA           NA           \"2020-03-01\" # Equivalent to `add_with_rollback(x, months(1))` x %m+% months(1) #> [1] \"2020-02-29\" \"2020-02-29\" \"2020-02-29\" \"2020-03-01\"  add_with_rollback(x, months(1), roll_to_first = TRUE) #> [1] \"2020-02-29\" \"2020-03-01\" \"2020-03-01\" \"2020-03-01\" add_months(x, 1) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. # Previous moment in time add_months(x, 1, invalid = \"previous\") #> [1] \"2020-02-29\" \"2020-02-29\" \"2020-02-29\" \"2020-03-01\"  # Next moment in time add_months(x, 1, invalid = \"next\") #> [1] \"2020-02-29\" \"2020-03-01\" \"2020-03-01\" \"2020-03-01\"  # Overflow by 1 day for 30th, 2 days for 31st add_months(x, 1, invalid = \"overflow\") #> [1] \"2020-02-29\" \"2020-03-01\" \"2020-03-02\" \"2020-03-01\"  # Like lubridate add_months(x, 1, invalid = \"NA\") #> [1] \"2020-02-29\" NA           NA           \"2020-03-01\" order(x) #> [1] 1 2 3 4  order(add_months(x, 1, invalid = \"overflow\")) #> [1] 1 2 4 3"},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"date-times","dir":"Articles","previous_headings":"Motivations > Invalid dates","what":"Date-times","title":"Motivations for clock","text":"date-times, hit invalid dates also consider time day. add_with_rollback() defaults preserving time day. Invalid dates rolled back previous valid day, time day x kept: think dangerous reason advised using \"overflow\" Date section . can easily lose relative ordering within x. add_with_rollback() preserve_hms argument, can’t help , just sets time day midnight ordering still lost. clock, using \"previous\" \"next\" use previous next valid moment time. POSIXct (clock assumes second precision), chooses previous next valid second. way preserve relative ordering x, another reason advocate using options. really want lubridate’s add_with_rollback() behavior retaining time day, can use \"previous-day\" \"next-day\", adjust day component, leaving time day intact. , don’t recommend .","code":"x <- as.POSIXct(\"2020-01-31\", \"America/New_York\") %>%   add_days(c(-2, -1, 0, 1)) %>%   add_hours(4:1)  x #> [1] \"2020-01-29 04:00:00 EST\" \"2020-01-30 03:00:00 EST\" #> [3] \"2020-01-31 02:00:00 EST\" \"2020-02-01 01:00:00 EST\" add_with_rollback(x, months(1)) #> [1] \"2020-02-29 04:00:00 EST\" \"2020-02-29 03:00:00 EST\" #> [3] \"2020-02-29 02:00:00 EST\" \"2020-03-01 01:00:00 EST\" order(x) #> [1] 1 2 3 4  order(add_with_rollback(x, months(1))) #> [1] 3 2 1 4 add_with_rollback(x, months(1), preserve_hms = FALSE) #> [1] \"2020-02-29 04:00:00 EST\" \"2020-02-29 00:00:00 EST\" #> [3] \"2020-02-29 00:00:00 EST\" \"2020-03-01 01:00:00 EST\"  order(add_with_rollback(x, months(1), preserve_hms = FALSE)) #> [1] 2 3 1 4 add_months(x, 1, invalid = \"previous\") #> [1] \"2020-02-29 04:00:00 EST\" \"2020-02-29 23:59:59 EST\" #> [3] \"2020-02-29 23:59:59 EST\" \"2020-03-01 01:00:00 EST\"  add_months(x, 1, invalid = \"next\") #> [1] \"2020-02-29 04:00:00 EST\" \"2020-03-01 00:00:00 EST\" #> [3] \"2020-03-01 00:00:00 EST\" \"2020-03-01 01:00:00 EST\"  order(add_months(x, 1, invalid = \"previous\")) #> [1] 1 2 3 4 order(add_months(x, 1, invalid = \"next\")) #> [1] 1 2 3 4 add_months(x, 1, invalid = \"previous-day\") #> [1] \"2020-02-29 04:00:00 EST\" \"2020-02-29 03:00:00 EST\" #> [3] \"2020-02-29 02:00:00 EST\" \"2020-03-01 01:00:00 EST\"  add_months(x, 1, invalid = \"next-day\") #> [1] \"2020-02-29 04:00:00 EST\" \"2020-03-01 03:00:00 EST\" #> [3] \"2020-03-01 02:00:00 EST\" \"2020-03-01 01:00:00 EST\""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"daylight-saving-time","dir":"Articles","previous_headings":"Motivations","what":"Daylight saving time","title":"Motivations for clock","text":"general, two types daylight saving time issues might come dealing date-times: Nonexistent times due daylight saving time gaps Ambiguous times due daylight saving time fallbacks","code":""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"nonexistent-time","dir":"Articles","previous_headings":"Motivations > Daylight saving time","what":"Nonexistent time","title":"Motivations for clock","text":"March 8th, 2020 New York (America/New_York time zone), clocks jumped forward 01:59:59 03:00:00. created daylight saving time gap, resulting nonexistent 2 o’clock hour. daylight saving time gaps happen year large number time zones around world. Luckily, often happen irregular times, like 2 , often don’t interfere analyses. said, entirely possible find landing one gaps, important know deal . Let’s try adding 1 day times lubridate. might expect, get NA. Unlike invalid dates, aren’t tools like add_with_rollback() help . ’re stuck NA. ? Possibly: Roll forward next valid moment time Roll backward previous valid moment time Shift forward size gap Shift backward size gap Return NA clock allows things. default, nonexistent times result error. Solve issues nonexistent time resolution strategy: recommend using \"roll-forward\" \"roll-backward\", guaranteed retain relative ordering x. Shifting, sometimes useful, always retain : arithmetic clock’s high-level API, ’ll encounter nonexistent time issues adding “large” units time, like days, months, years. Adding hours, minutes, seconds first convert UTC, add units time , convert back original time zone, never creates problematic times. might sound bit strange, generally want working smaller units time. essentially equivalent using dseconds() lubridate. Note adding seconds() “land” gap, dseconds() jumps right . reason want + seconds() behavior, can manually take control converting naive-time, adding units time , converting back POSIXct.","code":"# 1 day before the gap x <- date_time_parse(   \"March 7, 2020 02:30:00\", \"America/New_York\",    format = \"%B %d, %Y %H:%M:%S\" ) x <- add_minutes(x, c(-45, 0, 45)) x #> [1] \"2020-03-07 01:45:00 EST\" \"2020-03-07 02:30:00 EST\" #> [3] \"2020-03-07 03:15:00 EST\" x + days(1) #> [1] \"2020-03-08 01:45:00 EST\" NA                        #> [3] \"2020-03-08 03:15:00 EDT\" add_days(x, 1) #> Error in `as_zoned_time()`: #> ! Nonexistent time due to daylight saving time at location 2. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument. # 02:30:00 -> 03:00:00 add_days(x, 1, nonexistent = \"roll-forward\") #> [1] \"2020-03-08 01:45:00 EST\" \"2020-03-08 03:00:00 EDT\" #> [3] \"2020-03-08 03:15:00 EDT\"  # 02:30:00 -> 01:59:59 add_days(x, 1, nonexistent = \"roll-backward\") #> [1] \"2020-03-08 01:45:00 EST\" \"2020-03-08 01:59:59 EST\" #> [3] \"2020-03-08 03:15:00 EDT\"  # 02:30:00 + gap of 1 hr = 03:30:00 add_days(x, 1, nonexistent = \"shift-forward\") #> [1] \"2020-03-08 01:45:00 EST\" \"2020-03-08 03:30:00 EDT\" #> [3] \"2020-03-08 03:15:00 EDT\"  # 02:30:00 - gap of 1 hr = 01:30:00 add_days(x, 1, nonexistent = \"shift-backward\") #> [1] \"2020-03-08 01:45:00 EST\" \"2020-03-08 01:30:00 EST\" #> [3] \"2020-03-08 03:15:00 EDT\"  # lubridate behavior add_days(x, 1, nonexistent = \"NA\") #> [1] \"2020-03-08 01:45:00 EST\" NA                        #> [3] \"2020-03-08 03:15:00 EDT\" order(x) #> [1] 1 2 3  order(add_days(x, 1, nonexistent = \"shift-forward\")) #> [1] 1 3 2 # 1 second before the gap x <- date_time_parse(   \"March 8, 2020 01:59:59\", \"America/New_York\",    format = \"%B %d, %Y %H:%M:%S\" )  add_seconds(x, 1) #> [1] \"2020-03-08 03:00:00 EDT\" x + seconds(1) #> [1] NA  x + dseconds(1) #> [1] \"2020-03-08 03:00:00 EDT\" x %>%   as_naive_time() %>%   add_seconds(1) %>%   as.POSIXct(date_time_zone(x)) #> Error in `as_zoned_time()`: #> ! Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  x %>%   as_naive_time() %>%   add_seconds(1) %>%   as.POSIXct(date_time_zone(x), nonexistent = \"roll-forward\") #> [1] \"2020-03-08 03:00:00 EDT\""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"ambiguous-time","dir":"Articles","previous_headings":"Motivations > Daylight saving time","what":"Ambiguous time","title":"Motivations for clock","text":"November 1st, 2020 New York (America/New_York time zone), clocks fell backwards 01:59:59 EDT 01:00:00 EST. created daylight saving time fallback, resulting two 1 o’clock hours. Without prior knowledge whether daylight time standard time 1 o’clock used, times fall two 1 o’clock hours considered ambiguous. Like nonexistent times, adding hours, minutes, seconds high-level API won’t generate ambiguous time issues, always adds fixed duration seconds underlying numeric representation date-time. gives us easy way show two 1 o’clocks: instead worked units months, possible generate ambiguous time: can handle setting ambiguous time resolution strategy: lubridate behavior bit tricky explain. examples, might seem give obvious answer: examples, can end confusing results: lubridate hits ambiguous time, UTC offset result always matches offset original input. Sometimes makes sense, often adding larger periods time updating multiple components date-time, can confusing. isn’t say lubridate behavior wrong. argue just bit lenient. clock, slightly modified form behavior exists bit stricter. Consider happen tried floor dates nearest hour: Notice converted two dates naive-time, tried convert back POSIXct, considered ambiguous. date_floor() works flooring naive-time, somehow still produces results probably expected, two 1 o’clock hours kept separate groups: look carefully documentation POSIXct method date_floor(), ’ll notice ambiguous actually defaults x. ambiguous times occur ambiguous argument set date-time, clock attempt use information date-time determine resolve ambiguity. resolve ambiguity using date-time ambiguous value, following two conditions must met: ambiguous converted naive-time, back POSIXct, must considered ambiguous. transition point ambiguous naive-time implied ambiguous naive-time results operation performing must . example, bullet points true (transition point interest 2020-11-01 01:00:00-05:00, first valid moment time fallback), allows date_floor() resolve ambiguity “automatically” without user intervention. final example, let’s change origin floor relative 1am EDT, let’s floor two hours. generate hour groups [1, 3), [3, 5), ... . seems ambiguous time issue location 4, 02:30:00 time. Flooring every two hours origin 1 o’clock places 01:00:00 group, trying convert back POSIXct fails. Unlike flooring single hour, original time considered ambiguous converted naive-time back (bullet point 1 ). implies use information ambiguous resolve new ambiguity. solve , ideally ’d able manually fix ambiguity 02:30:00 introduced maintaining automatic ambiguity resolution behavior 01:30:00 EDT 01:30:00 EST date-times. handle issues , can supply list ambiguous first element x second ambiguous time resolution strategy use x isn’t enough solve ambiguity. end grouping contains single hour information (1 EDT), probably best can since maintains rest expected grouping structure fallback.","code":"x <- date_time_parse(\"2020-11-01 00:59:59\", \"America/New_York\")  # The first 1 o'clock add_seconds(x, 1) #> [1] \"2020-11-01 01:00:00 EDT\"  # The second 1 o'clock add_seconds(x, 3601) #> [1] \"2020-11-01 01:00:00 EST\" # 1 month before the two ambiguous times x <- date_time_parse(\"2020-10-01 01:30:00\", \"America/New_York\")  # Which of the two 1 o'clocks are we talking about? It is ambiguous! add_months(x, 1) #> Error in `as_zoned_time()`: #> ! Ambiguous time due to daylight saving time at location 1. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument. # The 1 o'clock that is earliest in the timeline add_months(x, 1, ambiguous = \"earliest\") #> [1] \"2020-11-01 01:30:00 EDT\"  # The 1 o'clock that is latest in the timeline add_months(x, 1, ambiguous = \"latest\") #> [1] \"2020-11-01 01:30:00 EST\"  # Ambiguous times should return NA add_months(x, 1, ambiguous = \"NA\") #> [1] NA # 1 month after the fallback x_after <- x + months(2)  # Start before the fallback, add time, return the earliest ambiguous time x #> [1] \"2020-10-01 01:30:00 EDT\" x + months(1) #> [1] \"2020-11-01 01:30:00 EDT\"  # Start after the fallback, subtract time, return the latest ambiguous time x_after #> [1] \"2020-12-01 01:30:00 EST\" x_after - months(1) #> [1] \"2020-11-01 01:30:00 EDT\" x_year_before <- x - years(1) + months(1) x_year_after <- x + years(1) + months(1)  # Start before the fallback, add time, return the earliest ambiguous time x_year_before #> [1] \"2019-11-01 01:30:00 EDT\" x_year_before + years(1) #> [1] \"2020-11-01 01:30:00 EDT\"  # Start after the fallback, subtract time, return the...earliest ambiguous time? x_year_after #> [1] \"2021-11-01 01:30:00 EDT\" x_year_after - years(1) #> [1] \"2020-11-01 01:30:00 EDT\" x <- as.POSIXct(\"2020-11-01 00:30:00\", \"America/New_York\") x <- add_hours(x, 0:5) x #> [1] \"2020-11-01 00:30:00 EDT\" \"2020-11-01 01:30:00 EDT\" #> [3] \"2020-11-01 01:30:00 EST\" \"2020-11-01 02:30:00 EST\" #> [5] \"2020-11-01 03:30:00 EST\" \"2020-11-01 04:30:00 EST\" x %>%   as_naive_time() %>%   as.POSIXct(date_time_zone(x)) #> Error in `as_zoned_time()`: #> ! Ambiguous time due to daylight saving time at location 2. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument. date_floor(x, \"hour\") #> [1] \"2020-11-01 00:00:00 EDT\" \"2020-11-01 01:00:00 EDT\" #> [3] \"2020-11-01 01:00:00 EST\" \"2020-11-01 02:00:00 EST\" #> [5] \"2020-11-01 03:00:00 EST\" \"2020-11-01 04:00:00 EST\" origin <- date_floor(x[2], \"hour\") origin #> [1] \"2020-11-01 01:00:00 EDT\"  date_floor(x, \"hour\", n = 2, origin = origin) #> Error in `as_zoned_time()`: #> ! Ambiguous time due to daylight saving time at location 4. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument. # [23, 1 EDT), [1 EDT, 1 EST), [1 EST, 3), [3, 5) date_floor(x, \"hour\", n = 2, origin = origin, ambiguous = list(x, \"latest\")) #> [1] \"2020-10-31 23:00:00 EDT\" \"2020-11-01 01:00:00 EDT\" #> [3] \"2020-11-01 01:00:00 EST\" \"2020-11-01 01:00:00 EST\" #> [5] \"2020-11-01 03:00:00 EST\" \"2020-11-01 03:00:00 EST\""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"production","dir":"Articles","previous_headings":"Motivations","what":"Production","title":"Motivations for clock","text":"new invalid date daylight saving time behavior might sound great , might wondering usage clock production. happens add_months() worked interactive development, put analysis production, gathered new data, sudden started failing? balance usefulness clock interactive development strict requirements production, can set clock.strict global option TRUE turn invalid, nonexistent, ambiguous optional arguments required ones. Forcing specify arguments front interactive development great way explicitly document assumptions possible issues, also guarding future problems production.","code":"x <- as.Date(c(\"2020-03-30\", \"2020-03-31\")) x #> [1] \"2020-03-30\" \"2020-03-31\"  # All good! Ship it! add_months(x[1], 1)  #> [1] \"2020-04-30\"  # Got new production data. Oh no! add_months(x[1:2], 1) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. with_options(clock.strict = TRUE, .expr = {   add_months(x[1], 1) }) #> Error in `strict_validate_invalid()`: #> ! The global option, `clock.strict`, is currently set to `TRUE`. In this mode, `invalid` must be set and cannot be left as `NULL`."},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"naive-time","dir":"Articles","previous_headings":"Motivations","what":"Naive-time","title":"Motivations for clock","text":"previous section entirely focused issues might arise working POSIXct time zones. don’t require complexity time zones, can use naive-time. Naive-times type time point yet---specified time zone. type time point clock sys-time, interpreted UTC time zone attached . aren’t using time zones , naive-times sys-times equivalent, even use date algorithms hood. Unlike ambiguous time examples , since naive-times don’t implied time zone, repeated 1 o’clock hour. makes arithmetic flooring much simpler reason : ’ll notice result flooring hour time point hour precision. Flooring drops information precise precisions, result represented compact form. difference naive-time sys-time important working time zones zoned-times / POSIXct. Since naive-time yet---specified time zone, converting zoned-time simply specifies zone. possible, keeps printed time , changing underlying duration. Sys-time interpreted UTC. Converting zoned-time keep underlying duration, change printed time. Converting sys-time zoned-time won’t ever issues nonexistent ambiguous times, converting naive-time might. Remember two 1 o’clock hours day America/New_York time zone. low-level API, converting naive-time zoned-time actually place nonexistent ambiguous arguments used. limits often think daylight saving time, ideally helping avoid many subtle bugs possible. high-level API POSIXct, arguments forced bubble places. trades user benefit able work directly R’s native date-time types side-effect potentially deal issues places.","code":"x <- naive_time_parse(\"2020-11-01T00:30:00\") x <- add_hours(x, 0:5) x #> <naive_time<second>[6]> #> [1] \"2020-11-01T00:30:00\" \"2020-11-01T01:30:00\" \"2020-11-01T02:30:00\" #> [4] \"2020-11-01T03:30:00\" \"2020-11-01T04:30:00\" \"2020-11-01T05:30:00\" time_point_floor(x, \"hour\") #> <naive_time<hour>[6]> #> [1] \"2020-11-01T00\" \"2020-11-01T01\" \"2020-11-01T02\" \"2020-11-01T03\" #> [5] \"2020-11-01T04\" \"2020-11-01T05\"  origin <- time_point_cast(x[2], \"hour\") time_point_floor(x, \"hour\", n = 2, origin = origin) #> <naive_time<hour>[6]> #> [1] \"2020-10-31T23\" \"2020-11-01T01\" \"2020-11-01T01\" \"2020-11-01T03\" #> [5] \"2020-11-01T03\" \"2020-11-01T05\" x[1] #> <naive_time<second>[1]> #> [1] \"2020-11-01T00:30:00\"  as_zoned_time(x[1], \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2020-11-01T00:30:00-04:00\" x_sys <- as_sys_time(x[1]) x_sys #> <sys_time<second>[1]> #> [1] \"2020-11-01T00:30:00\"  # Subtract 4 hours to print the America/New_York time as_zoned_time(x_sys, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2020-10-31T20:30:00-04:00\" x[1:2] #> <naive_time<second>[2]> #> [1] \"2020-11-01T00:30:00\" \"2020-11-01T01:30:00\"  as_zoned_time(x[1:2], \"America/New_York\") #> Error in `as_zoned_time()`: #> ! Ambiguous time due to daylight saving time at location 2. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument.  as_zoned_time(x[1:2], \"America/New_York\", ambiguous = \"earliest\") #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-11-01T00:30:00-04:00\" \"2020-11-01T01:30:00-04:00\""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"calendar-types","dir":"Articles","previous_headings":"Motivations","what":"Calendar types","title":"Motivations for clock","text":"clock provides multiple new calendar types, allow represent calendar “dates” various different ways. year-month-day calendar common, represents Gregorian calendar set components like year, month, day. also calendars : year-month-weekday: alternative way specify Gregorian date year, month, indexed day week (like 3rd Sunday March). Great specifying holidays. year-day: alternative way specify Gregorian date year day year. Great extracting day year, grouping day year. year-quarter-day: Great quarterly financial data, fiscal year starts different month January. year-week-day: Allows specify date using year, week number, day week, start value representing day represents start week. iso-year-week-day: Follows ISO week standard. Great need represent ISO weeks like 2020-W02, need extract ISO year might differ Gregorian year. Identical year-week-day start set Monday. Calendar types great instant retrieval underlying components (year, month, day, etc), irregular calendrical arithmetic units years months. structure calendar types also enables unique feature among date-time libraries, directly representing invalid dates. adding 1 month R Date 2019-03-31 requires setting invalid date resolution strategy, year-month-day type can actually handle directly. family functions working invalid dates: invalid_count(), invalid_any(), invalid_detect(), invalid_resolve(). time entire low-level API invalid dates must resolved converting another type: high-level API R’s native date date-time types, invalid argument forced bubble places. trades user benefit able work directly R’s native date-time types side-effect potentially deal issue places. another example invalid dates, imagine office planning group meeting every 1st, 3rd, 5th Friday every month 2019. days ? year-month-weekday calendar allows us quickly generate dates. can see ’ve generated 8 invalid dates - months don’t 5th Friday. One option handling simply remove . Less group meetings! , resolve selecting previous valid day: didn’t want meet Saturday Sunday, convert naive-time shift Saturdays Sundays previous Friday.","code":"year_month_day(2019, 1, 1:5) #> <year_month_day<day>[5]> #> [1] \"2019-01-01\" \"2019-01-02\" \"2019-01-03\" \"2019-01-04\" \"2019-01-05\"  year_month_day(2020, 1:12, \"last\") #> <year_month_day<day>[12]> #>  [1] \"2020-01-31\" \"2020-02-29\" \"2020-03-31\" \"2020-04-30\" \"2020-05-31\" #>  [6] \"2020-06-30\" \"2020-07-31\" \"2020-08-31\" \"2020-09-30\" \"2020-10-31\" #> [11] \"2020-11-30\" \"2020-12-31\" year_month_day(2019, 1, 2) + duration_months(1:3) #> <year_month_day<day>[3]> #> [1] \"2019-02-02\" \"2019-03-02\" \"2019-04-02\" ymd <- year_month_day(2019, 3, c(30, 31)) + duration_months(1) ymd #> <year_month_day<day>[2]> #> [1] \"2019-04-30\" \"2019-04-31\" invalid_count(ymd) #> [1] 1  invalid_detect(ymd) #> [1] FALSE  TRUE  invalid_resolve(ymd, invalid = \"previous\") #> <year_month_day<day>[2]> #> [1] \"2019-04-30\" \"2019-04-30\" invalid_resolve(ymd, invalid = \"next\") #> <year_month_day<day>[2]> #> [1] \"2019-04-30\" \"2019-05-01\" as.Date(ymd) #> Error in `as_sys_time()`: #> ! Can't convert `x` to another type because some dates are #>   invalid. #> ℹ The following locations are invalid: 2. #> ℹ Resolve invalid dates with `invalid_resolve()`. as_naive_time(ymd) #> Error in `as_sys_time()`: #> ! Can't convert `x` to another type because some dates are #>   invalid. #> ℹ The following locations are invalid: 2. #> ℹ Resolve invalid dates with `invalid_resolve()`. as_year_month_weekday(ymd) #> Error in `as_sys_time()`: #> ! Can't convert `x` to another type because some dates are #>   invalid. #> ℹ The following locations are invalid: 2. #> ℹ Resolve invalid dates with `invalid_resolve()`. grid <- expand.grid(   index = c(1L, 3L, 5L),   day = clock_weekdays$friday,   month = 1:12,   year = 2019 )  meetings <- year_month_weekday(grid$year, grid$month, grid$day, grid$index)  meetings #> <year_month_weekday<day>[36]> #>  [1] \"2019-01-Fri[1]\" \"2019-01-Fri[3]\" \"2019-01-Fri[5]\" #>  [4] \"2019-02-Fri[1]\" \"2019-02-Fri[3]\" \"2019-02-Fri[5]\" #>  [7] \"2019-03-Fri[1]\" \"2019-03-Fri[3]\" \"2019-03-Fri[5]\" #> [10] \"2019-04-Fri[1]\" \"2019-04-Fri[3]\" \"2019-04-Fri[5]\" #> [13] \"2019-05-Fri[1]\" \"2019-05-Fri[3]\" \"2019-05-Fri[5]\" #> [16] \"2019-06-Fri[1]\" \"2019-06-Fri[3]\" \"2019-06-Fri[5]\" #> [19] \"2019-07-Fri[1]\" \"2019-07-Fri[3]\" \"2019-07-Fri[5]\" #> [22] \"2019-08-Fri[1]\" \"2019-08-Fri[3]\" \"2019-08-Fri[5]\" #> [25] \"2019-09-Fri[1]\" \"2019-09-Fri[3]\" \"2019-09-Fri[5]\" #> [28] \"2019-10-Fri[1]\" \"2019-10-Fri[3]\" \"2019-10-Fri[5]\" #> [31] \"2019-11-Fri[1]\" \"2019-11-Fri[3]\" \"2019-11-Fri[5]\" #> [34] \"2019-12-Fri[1]\" \"2019-12-Fri[3]\" \"2019-12-Fri[5]\"  meetings[invalid_detect(meetings)] #> <year_month_weekday<day>[8]> #> [1] \"2019-01-Fri[5]\" \"2019-02-Fri[5]\" \"2019-04-Fri[5]\" \"2019-06-Fri[5]\" #> [5] \"2019-07-Fri[5]\" \"2019-09-Fri[5]\" \"2019-10-Fri[5]\" \"2019-12-Fri[5]\" meetings[!invalid_detect(meetings)] #> <year_month_weekday<day>[28]> #>  [1] \"2019-01-Fri[1]\" \"2019-01-Fri[3]\" \"2019-02-Fri[1]\" #>  [4] \"2019-02-Fri[3]\" \"2019-03-Fri[1]\" \"2019-03-Fri[3]\" #>  [7] \"2019-03-Fri[5]\" \"2019-04-Fri[1]\" \"2019-04-Fri[3]\" #> [10] \"2019-05-Fri[1]\" \"2019-05-Fri[3]\" \"2019-05-Fri[5]\" #> [13] \"2019-06-Fri[1]\" \"2019-06-Fri[3]\" \"2019-07-Fri[1]\" #> [16] \"2019-07-Fri[3]\" \"2019-08-Fri[1]\" \"2019-08-Fri[3]\" #> [19] \"2019-08-Fri[5]\" \"2019-09-Fri[1]\" \"2019-09-Fri[3]\" #> [22] \"2019-10-Fri[1]\" \"2019-10-Fri[3]\" \"2019-11-Fri[1]\" #> [25] \"2019-11-Fri[3]\" \"2019-11-Fri[5]\" \"2019-12-Fri[1]\" #> [28] \"2019-12-Fri[3]\" meetings_valid <- invalid_resolve(meetings, invalid = \"previous\")  meetings_valid #> <year_month_weekday<day>[36]> #>  [1] \"2019-01-Fri[1]\" \"2019-01-Fri[3]\" \"2019-01-Thu[5]\" #>  [4] \"2019-02-Fri[1]\" \"2019-02-Fri[3]\" \"2019-02-Thu[4]\" #>  [7] \"2019-03-Fri[1]\" \"2019-03-Fri[3]\" \"2019-03-Fri[5]\" #> [10] \"2019-04-Fri[1]\" \"2019-04-Fri[3]\" \"2019-04-Tue[5]\" #> [13] \"2019-05-Fri[1]\" \"2019-05-Fri[3]\" \"2019-05-Fri[5]\" #> [16] \"2019-06-Fri[1]\" \"2019-06-Fri[3]\" \"2019-06-Sun[5]\" #> [19] \"2019-07-Fri[1]\" \"2019-07-Fri[3]\" \"2019-07-Wed[5]\" #> [22] \"2019-08-Fri[1]\" \"2019-08-Fri[3]\" \"2019-08-Fri[5]\" #> [25] \"2019-09-Fri[1]\" \"2019-09-Fri[3]\" \"2019-09-Mon[5]\" #> [28] \"2019-10-Fri[1]\" \"2019-10-Fri[3]\" \"2019-10-Thu[5]\" #> [31] \"2019-11-Fri[1]\" \"2019-11-Fri[3]\" \"2019-11-Fri[5]\" #> [34] \"2019-12-Fri[1]\" \"2019-12-Fri[3]\" \"2019-12-Tue[5]\" meetings_naive <- as_naive_time(meetings_valid)  meetings_wday <- as_weekday(meetings_naive)  meetings_wday #> <weekday[36]> #>  [1] Fri Fri Thu Fri Fri Thu Fri Fri Fri Fri Fri Tue Fri Fri Fri Fri #> [17] Fri Sun Fri Fri Wed Fri Fri Fri Fri Fri Mon Fri Fri Thu Fri Fri #> [33] Fri Fri Fri Tue  friday <- weekday(clock_weekdays$friday) saturday <- weekday(clock_weekdays$saturday) sunday <- weekday(clock_weekdays$sunday)  on_weekend <- meetings_wday == saturday | meetings_wday == sunday  meetings_naive[on_weekend] <- time_point_shift(   meetings_naive[on_weekend],    target = friday,   which = \"previous\" )  as_year_month_weekday(meetings_naive) #> <year_month_weekday<day>[36]> #>  [1] \"2019-01-Fri[1]\" \"2019-01-Fri[3]\" \"2019-01-Thu[5]\" #>  [4] \"2019-02-Fri[1]\" \"2019-02-Fri[3]\" \"2019-02-Thu[4]\" #>  [7] \"2019-03-Fri[1]\" \"2019-03-Fri[3]\" \"2019-03-Fri[5]\" #> [10] \"2019-04-Fri[1]\" \"2019-04-Fri[3]\" \"2019-04-Tue[5]\" #> [13] \"2019-05-Fri[1]\" \"2019-05-Fri[3]\" \"2019-05-Fri[5]\" #> [16] \"2019-06-Fri[1]\" \"2019-06-Fri[3]\" \"2019-06-Fri[4]\" #> [19] \"2019-07-Fri[1]\" \"2019-07-Fri[3]\" \"2019-07-Wed[5]\" #> [22] \"2019-08-Fri[1]\" \"2019-08-Fri[3]\" \"2019-08-Fri[5]\" #> [25] \"2019-09-Fri[1]\" \"2019-09-Fri[3]\" \"2019-09-Mon[5]\" #> [28] \"2019-10-Fri[1]\" \"2019-10-Fri[3]\" \"2019-10-Thu[5]\" #> [31] \"2019-11-Fri[1]\" \"2019-11-Fri[3]\" \"2019-11-Fri[5]\" #> [34] \"2019-12-Fri[1]\" \"2019-12-Fri[3]\" \"2019-12-Tue[5]\""},{"path":[]},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"calendars","dir":"Articles","previous_headings":"Motivations > Variable precision","what":"Calendars","title":"Motivations for clock","text":"clock’s new types variable precision. Calendars, example, range precision year nanosecond. nice thing get year-month year-quarter types free. clock takes worldview calendar specific precision represents range values. Rather assuming month precision year-month-day convert directly day precision naive-time first month, explicit exactly day talking first promoting month precision calendar day precision. range assumption throughout clock. example, grouping day precision iso-year-week-day weeks returns week precision calendar.","code":"year_month_day(2019) #> <year_month_day<year>[1]> #> [1] \"2019\"  year_month_day(2019, 01, 01, 02, 30, 50, 123, subsecond_precision = \"nanosecond\") #> <year_month_day<nanosecond>[1]> #> [1] \"2019-01-01T02:30:50.000000123\" year_month_day(2019, 1:5) #> <year_month_day<month>[5]> #> [1] \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\"  year_quarter_day(2020, 1:4) #> <year_quarter_day<January><quarter>[4]> #> [1] \"2020-Q1\" \"2020-Q2\" \"2020-Q3\" \"2020-Q4\" ym <- year_month_day(2019, 1:3)  as_naive_time(ym) #> Error: #> ! Can't convert to a time point from a calendar with 'month' precision. A minimum of 'day' precision is required.  # You might want the first of the month ym %>%   set_day(1) %>%   as_naive_time() #> <naive_time<day>[3]> #> [1] \"2019-01-01\" \"2019-02-01\" \"2019-03-01\"  # Or the last ym %>%   set_day(\"last\") %>%   as_naive_time() #> <naive_time<day>[3]> #> [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" x <- iso_year_week_day(2019, 1:10, 2) calendar_group(x, \"week\", n = 2) #> <iso_year_week_day<week>[10]> #>  [1] \"2019-W01\" \"2019-W01\" \"2019-W03\" \"2019-W03\" \"2019-W05\" \"2019-W05\" #>  [7] \"2019-W07\" \"2019-W07\" \"2019-W09\" \"2019-W09\""},{"path":"https://clock.r-lib.org/dev/articles/motivations.html","id":"time-points","dir":"Articles","previous_headings":"Motivations > Variable precision","what":"Time points","title":"Motivations for clock","text":"Time points, naive-time sys-time, can vary precision day nanosecond. Unlike calendars, time point say, second precision, considered equivalent time point millisecond precision millisecond information set 0. allows time points naturally promote upwards precise precision arithmetic :","code":"as_naive_time(year_month_day(2019, 1, 2)) #> <naive_time<day>[1]> #> [1] \"2019-01-02\"  as_sys_time(year_month_day(   2019, 2, 3, 1, 30, 35, 123,    subsecond_precision = \"millisecond\" )) #> <sys_time<millisecond>[1]> #> [1] \"2019-02-03T01:30:35.123\" sec <- as_sys_time(year_month_day(   2019, 2, 3, 1, 30, 35 ))  milli <- as_sys_time(year_month_day(   2019, 2, 3, 1, 30, 35, 0,    subsecond_precision = \"millisecond\" ))  sec == milli #> [1] TRUE as_naive_time(year_month_day(2019, 1, 2)) + duration_nanoseconds(25) #> <naive_time<nanosecond>[1]> #> [1] \"2019-01-02T00:00:00.000000025\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"the-current-local-time","dir":"Articles","previous_headings":"","what":"The current local time","title":"Examples and Recipes","text":"zoned_time_now() returns current time particular time zone. display nanosecond precision, exact amount OS dependent (Mac displays microsecond level information nanosecond resolution). Using \"\" time zone string try use whatever R thinks local time zone (.e. Sys.timezone()).","code":"zoned_time_now(\"\") #> <zoned_time<nanosecond><America/New_York (current)>[1]> #> [1] \"2021-02-10T15:54:29.875011000-05:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"the-current-time-somewhere-else","dir":"Articles","previous_headings":"","what":"The current time somewhere else","title":"Examples and Recipes","text":"Pass time zone name zoned_time_now() get current time somewhere else.","code":"zoned_time_now(\"Asia/Shanghai\") #> <zoned_time<nanosecond><Asia/Shanghai>[1]> #> [1] \"2021-02-11T04:54:29.875011000+08:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"set-a-meeting-across-time-zones","dir":"Articles","previous_headings":"","what":"Set a meeting across time zones","title":"Examples and Recipes","text":"Say need set meeting someone Shanghai, live New York. set meeting 9am, time ?","code":"my_time <- year_month_day(2019, 1, 30, 9) %>%   as_naive_time() %>%   as_zoned_time(\"America/New_York\")  my_time #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-30T09:00:00-05:00\"  their_time <- zoned_time_set_zone(my_time, \"Asia/Shanghai\")  their_time #> <zoned_time<second><Asia/Shanghai>[1]> #> [1] \"2019-01-30T22:00:00+08:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api","dir":"Articles","previous_headings":"Set a meeting across time zones","what":"High level API","title":"Examples and Recipes","text":"","code":"my_time <- as.POSIXct(\"2019-01-30 09:00:00\", \"America/New_York\")  date_time_set_zone(my_time, \"Asia/Shanghai\") #> [1] \"2019-01-30 22:00:00 CST\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"force-a-specific-time-zone","dir":"Articles","previous_headings":"","what":"Force a specific time zone","title":"Examples and Recipes","text":"Say co-worker Shanghai (last example) accidentally logged 9am time. time ? first step solve force my_time printed time, use Asia/Shanghai time zone. can going naive-time: Note conversion like isn’t always possible due daylight saving time issues, case might need set nonexistent ambiguous arguments as_zoned_time(). time New York?","code":"my_time <- year_month_day(2019, 1, 30, 9) %>%   as_naive_time() %>%   as_zoned_time(\"America/New_York\")  my_time #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-30T09:00:00-05:00\"  # Drop the time zone information, retaining the printed time my_time %>%   as_naive_time() #> <naive_time<second>[1]> #> [1] \"2019-01-30T09:00:00\"  # Add the correct time zone name back on, # again retaining the printed time their_9am <- my_time %>%   as_naive_time() %>%   as_zoned_time(\"Asia/Shanghai\")  their_9am #> <zoned_time<second><Asia/Shanghai>[1]> #> [1] \"2019-01-30T09:00:00+08:00\" zoned_time_set_zone(their_9am, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-29T20:00:00-05:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-1","dir":"Articles","previous_headings":"Force a specific time zone","what":"High level API","title":"Examples and Recipes","text":"","code":"my_time <- as.POSIXct(\"2019-01-30 09:00:00\", \"America/New_York\")  my_time %>%   as_naive_time() %>%   as.POSIXct(\"Asia/Shanghai\") %>%   date_time_set_zone(\"America/New_York\") #> [1] \"2019-01-29 20:00:00 EST\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"finding-the-next-monday-or-thursday","dir":"Articles","previous_headings":"","what":"Finding the next Monday (or Thursday)","title":"Examples and Recipes","text":"Given particular day precision naive-time, can compute next Monday? easily accomplished time_point_shift(). takes time point vector “target” weekday, shifts time points target weekday. can also shift previous instance target weekday: happen already target weekday, default behavior returns input unchanged. However, can also chose advance next instance target. time_point_shift() built clock, can useful discuss arithmetic going underlying weekday type powers function. , build parts time_point_shift() scratch. weekday type represents single day week implements circular arithmetic. Let’s see code simple version time_point_shift() just shifts next target weekday: Let’s break next_weekday() works. first step takes difference two weekday vectors. using circular arithmetic. get passed 7th day week (whatever may ), wraps back around 1st day week. Implementing weekday arithmetic way means following nicely returns number days next Monday day based duration: can added day precision days vector get date next Monday: current implementation return input already target weekday. use boundary = \"advance\" behavior, implement next_weekday() :","code":"days <- as_naive_time(year_month_day(2019, c(1, 2), 1))  # A Tuesday and a Friday as_weekday(days) #> <weekday[2]> #> [1] Tue Fri  monday <- weekday(clock_weekdays$monday)  time_point_shift(days, monday) #> <naive_time<day>[2]> #> [1] \"2019-01-07\" \"2019-02-04\"  as_weekday(time_point_shift(days, monday)) #> <weekday[2]> #> [1] Mon Mon time_point_shift(days, monday, which = \"previous\") #> <naive_time<day>[2]> #> [1] \"2018-12-31\" \"2019-01-28\" tuesday <- weekday(clock_weekdays$tuesday)  time_point_shift(days, tuesday) #> <naive_time<day>[2]> #> [1] \"2019-01-01\" \"2019-02-05\" time_point_shift(days, tuesday, boundary = \"advance\") #> <naive_time<day>[2]> #> [1] \"2019-01-08\" \"2019-02-05\" next_weekday <- function(x, target) {   x + (target - as_weekday(x)) }  next_weekday(days, monday) #> <naive_time<day>[2]> #> [1] \"2019-01-07\" \"2019-02-04\"  as_weekday(next_weekday(days, monday)) #> <weekday[2]> #> [1] Mon Mon monday - as_weekday(days) #> <duration<day>[2]> #> [1] 6 3 days + (monday - as_weekday(days)) #> <naive_time<day>[2]> #> [1] \"2019-01-07\" \"2019-02-04\" next_weekday2 <- function(x, target) {   x <- x + duration_days(1L)   x + (target - as_weekday(x)) }  a_monday <- as_naive_time(year_month_day(2018, 12, 31)) as_weekday(a_monday) #> <weekday[1]> #> [1] Mon  next_weekday2(a_monday, monday) #> <naive_time<day>[1]> #> [1] \"2019-01-07\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-2","dir":"Articles","previous_headings":"Finding the next Monday (or Thursday)","what":"High level API","title":"Examples and Recipes","text":"high level API, can use date_shift(): Note adding weekdays POSIXct generate nonexistent ambiguous times due daylight saving time, handled supplying nonexistent ambiguous arguments date_shift().","code":"monday <- weekday(clock_weekdays$monday)  x <- as.Date(c(\"2019-01-01\", \"2019-02-01\"))  date_shift(x, monday) #> [1] \"2019-01-07\" \"2019-02-04\"  # With a date-time y <- as.POSIXct(   c(\"2019-01-01 02:30:30\", \"2019-02-01 05:20:22\"),    \"America/New_York\" )  date_shift(y, monday) #> [1] \"2019-01-07 02:30:30 EST\" \"2019-02-04 05:20:22 EST\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"generate-sequences-of-dates-and-date-times","dir":"Articles","previous_headings":"","what":"Generate sequences of dates and date-times","title":"Examples and Recipes","text":"clock implements S3 methods seq() generic function calendar time point types provides. precision can generate sequences depends type. year-month-day: Yearly monthly sequences year-quarter-day: Yearly quarterly sequences sys-time / naive-time: Weekly, Daily, Hourly, …, Subsecond sequences generating sequences, type precision determine result. example: allows generate sequences year-months year-quarters without worry day month/quarter becoming invalid. can set day results get day precision calendar. example, get last days month/quarter sequence: won’t able generate day precision sequences calendars. Instead, use time point. use integer value, interpreted duration precision . can also use duration object can cast precision . example, generate sequence spaced 90 minutes second precision end points:","code":"ym <- seq(year_month_day(2019, 1), by = 2, length.out = 10) ym #> <year_month_day<month>[10]> #>  [1] \"2019-01\" \"2019-03\" \"2019-05\" \"2019-07\" \"2019-09\" \"2019-11\" #>  [7] \"2020-01\" \"2020-03\" \"2020-05\" \"2020-07\" yq <- seq(year_quarter_day(2019, 1), by = 2, length.out = 10) set_day(ym, \"last\") #> <year_month_day<day>[10]> #>  [1] \"2019-01-31\" \"2019-03-31\" \"2019-05-31\" \"2019-07-31\" \"2019-09-30\" #>  [6] \"2019-11-30\" \"2020-01-31\" \"2020-03-31\" \"2020-05-31\" \"2020-07-31\"  set_day(yq, \"last\") #> <year_quarter_day<January><day>[10]> #>  [1] \"2019-Q1-90\" \"2019-Q3-92\" \"2020-Q1-91\" \"2020-Q3-92\" \"2021-Q1-90\" #>  [6] \"2021-Q3-92\" \"2022-Q1-90\" \"2022-Q3-92\" \"2023-Q1-90\" \"2023-Q3-92\" from <- as_naive_time(year_month_day(2019, 1, 1)) to <- as_naive_time(year_month_day(2019, 5, 15))  seq(from, to, by = 20) #> <naive_time<day>[7]> #> [1] \"2019-01-01\" \"2019-01-21\" \"2019-02-10\" \"2019-03-02\" \"2019-03-22\" #> [6] \"2019-04-11\" \"2019-05-01\" from <- as_naive_time(year_month_day(2019, 1, 1, 2, 30, 00)) to <- as_naive_time(year_month_day(2019, 1, 1, 12, 30, 00))  seq(from, to, by = duration_minutes(90)) #> <naive_time<second>[7]> #> [1] \"2019-01-01T02:30:00\" \"2019-01-01T04:00:00\" \"2019-01-01T05:30:00\" #> [4] \"2019-01-01T07:00:00\" \"2019-01-01T08:30:00\" \"2019-01-01T10:00:00\" #> [7] \"2019-01-01T11:30:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-3","dir":"Articles","previous_headings":"Generate sequences of dates and date-times","what":"High level API","title":"Examples and Recipes","text":"high level API, can use date_seq() generate sequences. doesn’t flexibility seq() methods , still extremely useful added benefit switching calendars, sys-times, naive-times automatically . integer supplied date , defaults daily sequence: can generate monthly sequence supplying month precision duration . supply , aware components precise precision must match exactly. example, day component doesn’t match , sequence isn’t defined. date_seq() also catches invalid dates , forcing specify invalid argument specify handle . specifying invalid = \"previous\" , can generate month end values. Compare automatic “overflow” behavior seq(), often source confusion.","code":"date_seq(date_build(2019, 1), by = 2, total_size = 10) #>  [1] \"2019-01-01\" \"2019-01-03\" \"2019-01-05\" \"2019-01-07\" \"2019-01-09\" #>  [6] \"2019-01-11\" \"2019-01-13\" \"2019-01-15\" \"2019-01-17\" \"2019-01-19\" date_seq(date_build(2019, 1), by = duration_months(2), total_size = 10) #>  [1] \"2019-01-01\" \"2019-03-01\" \"2019-05-01\" \"2019-07-01\" \"2019-09-01\" #>  [6] \"2019-11-01\" \"2020-01-01\" \"2020-03-01\" \"2020-05-01\" \"2020-07-01\" date_seq(   date_build(2019, 1, 1),   to = date_build(2019, 10, 2),   by = duration_months(2) ) #> Error in `date_seq()`: #> ! All components of `from` and `to` more precise than \"month\" #>   must match. #> ℹ `from` is \"2019-01-01\". #> ℹ `to` is \"2019-10-02\". jan31 <- date_build(2019, 1, 31) dec31 <- date_build(2019, 12, 31)  date_seq(jan31, to = dec31, by = duration_months(1)) #> Error in `invalid_resolve()`: #> ! Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. date_seq(jan31, to = dec31, by = duration_months(1), invalid = \"previous\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\" seq(jan31, to = dec31, by = \"1 month\") #>  [1] \"2019-01-31\" \"2019-03-03\" \"2019-03-31\" \"2019-05-01\" \"2019-05-31\" #>  [6] \"2019-07-01\" \"2019-07-31\" \"2019-08-31\" \"2019-10-01\" \"2019-10-31\" #> [11] \"2019-12-01\" \"2019-12-31\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"grouping-by-months-or-quarters","dir":"Articles","previous_headings":"","what":"Grouping by months or quarters","title":"Examples and Recipes","text":"working data analysis, might required summarize certain metrics monthly quarterly level. calendar_group(), can easily summarize granular precision care . Take vector day precision naive-times 2019: group month, first convert year-month-day: group quarter, convert year-quarter-day: need group multiple months / quarters, can : Note returned calendar vector precision grouped , original precision , say, day month / quarter set 1. Additionally, aware calendar_group() groups “within” component one unit precision larger precision specify. , grouping \"day\", groups “day month”, can’t cross month year boundary. need bundle dates together something like 60 days (.e. crossing month boundary), use time_point_floor().","code":"from <- as_naive_time(year_month_day(2019, 1, 1)) to <- as_naive_time(year_month_day(2019, 12, 31))  x <- seq(from, to, by = duration_days(20))  x #> <naive_time<day>[19]> #>  [1] \"2019-01-01\" \"2019-01-21\" \"2019-02-10\" \"2019-03-02\" \"2019-03-22\" #>  [6] \"2019-04-11\" \"2019-05-01\" \"2019-05-21\" \"2019-06-10\" \"2019-06-30\" #> [11] \"2019-07-20\" \"2019-08-09\" \"2019-08-29\" \"2019-09-18\" \"2019-10-08\" #> [16] \"2019-10-28\" \"2019-11-17\" \"2019-12-07\" \"2019-12-27\" ymd <- as_year_month_day(x)  head(ymd) #> <year_month_day<day>[6]> #> [1] \"2019-01-01\" \"2019-01-21\" \"2019-02-10\" \"2019-03-02\" \"2019-03-22\" #> [6] \"2019-04-11\"  calendar_group(ymd, \"month\") #> <year_month_day<month>[19]> #>  [1] \"2019-01\" \"2019-01\" \"2019-02\" \"2019-03\" \"2019-03\" \"2019-04\" #>  [7] \"2019-05\" \"2019-05\" \"2019-06\" \"2019-06\" \"2019-07\" \"2019-08\" #> [13] \"2019-08\" \"2019-09\" \"2019-10\" \"2019-10\" \"2019-11\" \"2019-12\" #> [19] \"2019-12\" yqd <- as_year_quarter_day(x)  head(yqd) #> <year_quarter_day<January><day>[6]> #> [1] \"2019-Q1-01\" \"2019-Q1-21\" \"2019-Q1-41\" \"2019-Q1-61\" \"2019-Q1-81\" #> [6] \"2019-Q2-11\"  calendar_group(yqd, \"quarter\") #> <year_quarter_day<January><quarter>[19]> #>  [1] \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q2\" #>  [7] \"2019-Q2\" \"2019-Q2\" \"2019-Q2\" \"2019-Q2\" \"2019-Q3\" \"2019-Q3\" #> [13] \"2019-Q3\" \"2019-Q3\" \"2019-Q4\" \"2019-Q4\" \"2019-Q4\" \"2019-Q4\" #> [19] \"2019-Q4\" calendar_group(ymd, \"month\", n = 2) #> <year_month_day<month>[19]> #>  [1] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-03\" \"2019-03\" \"2019-03\" #>  [7] \"2019-05\" \"2019-05\" \"2019-05\" \"2019-05\" \"2019-07\" \"2019-07\" #> [13] \"2019-07\" \"2019-09\" \"2019-09\" \"2019-09\" \"2019-11\" \"2019-11\" #> [19] \"2019-11\"  calendar_group(yqd, \"quarter\", n = 2) #> <year_quarter_day<January><quarter>[19]> #>  [1] \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" #>  [7] \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q3\" \"2019-Q3\" #> [13] \"2019-Q3\" \"2019-Q3\" \"2019-Q3\" \"2019-Q3\" \"2019-Q3\" \"2019-Q3\" #> [19] \"2019-Q3\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-4","dir":"Articles","previous_headings":"Grouping by months or quarters","what":"High level API","title":"Examples and Recipes","text":"high level API, can use date_group() group Date vectors one 3 components: year, month, day. Since month precision dates can’t represented Date vectors, date_group() sets day month 1. won’t able group \"quarter\", since isn’t one 3 components high level API lets work . Instead, case convert year-quarter-day, group type, convert back Date. actually equivalent date_group(x, \"month\", n = 3). fiscal year starts January, can use instead. However, fiscal year starts different month, say, June, ’ll need use approach like :","code":"x <- seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-31\"), by = 20)  date_group(x, \"month\") #>  [1] \"2019-01-01\" \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-03-01\" #>  [6] \"2019-04-01\" \"2019-05-01\" \"2019-05-01\" \"2019-06-01\" \"2019-06-01\" #> [11] \"2019-07-01\" \"2019-08-01\" \"2019-08-01\" \"2019-09-01\" \"2019-10-01\" #> [16] \"2019-10-01\" \"2019-11-01\" \"2019-12-01\" \"2019-12-01\" x %>%   as_year_quarter_day() %>%   calendar_group(\"quarter\") %>%   set_day(1) %>%   as.Date() #>  [1] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #>  [6] \"2019-04-01\" \"2019-04-01\" \"2019-04-01\" \"2019-04-01\" \"2019-04-01\" #> [11] \"2019-07-01\" \"2019-07-01\" \"2019-07-01\" \"2019-07-01\" \"2019-10-01\" #> [16] \"2019-10-01\" \"2019-10-01\" \"2019-10-01\" \"2019-10-01\" x %>%   as_year_quarter_day(start = clock_months$june) %>%   calendar_group(\"quarter\") %>%   set_day(1) %>%   as.Date() #>  [1] \"2018-12-01\" \"2018-12-01\" \"2018-12-01\" \"2019-03-01\" \"2019-03-01\" #>  [6] \"2019-03-01\" \"2019-03-01\" \"2019-03-01\" \"2019-06-01\" \"2019-06-01\" #> [11] \"2019-06-01\" \"2019-06-01\" \"2019-06-01\" \"2019-09-01\" \"2019-09-01\" #> [16] \"2019-09-01\" \"2019-09-01\" \"2019-12-01\" \"2019-12-01\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"flooring-by-days","dir":"Articles","previous_headings":"","what":"Flooring by days","title":"Examples and Recipes","text":"calendar_group() can group “component”, isn’t useful bundling together sets time points can cross month/year boundaries, like “60 days” data. , better flooring rolling sets 60 days. Flooring operates underlying duration, day precision time points count days since origin, 1970-01-01. 60 day counter starts , means times [1970-01-01, 1970-03-02) floored 1970-01-01. 1970-03-02, counter starts . like change origin, can provide time point start counting origin argument. mostly useful flooring weeks want change day week count starts . Since 1970-01-01 Thursday, flooring 14 days defaults returning Thursdays. can use origin change floor Mondays.","code":"from <- as_naive_time(year_month_day(2019, 1, 1)) to <- as_naive_time(year_month_day(2019, 12, 31))  x <- seq(from, to, by = duration_days(20)) time_point_floor(x, \"day\", n = 60) #> <naive_time<day>[19]> #>  [1] \"2018-12-15\" \"2018-12-15\" \"2018-12-15\" \"2019-02-13\" \"2019-02-13\" #>  [6] \"2019-02-13\" \"2019-04-14\" \"2019-04-14\" \"2019-04-14\" \"2019-06-13\" #> [11] \"2019-06-13\" \"2019-06-13\" \"2019-08-12\" \"2019-08-12\" \"2019-08-12\" #> [16] \"2019-10-11\" \"2019-10-11\" \"2019-10-11\" \"2019-12-10\" unclass(x[1]) #> $lower #> [1] 2147483648 #>  #> $upper #> [1] 17897 #>  #> attr(,\"clock\") #> [1] 1 #> attr(,\"precision\") #> [1] 4 x <- seq(as_naive_time(year_month_day(2019, 1, 1)), by = 3, length.out = 10) x #> <naive_time<day>[10]> #>  [1] \"2019-01-01\" \"2019-01-04\" \"2019-01-07\" \"2019-01-10\" \"2019-01-13\" #>  [6] \"2019-01-16\" \"2019-01-19\" \"2019-01-22\" \"2019-01-25\" \"2019-01-28\"  thursdays <- time_point_floor(x, \"day\", n = 14) thursdays #> <naive_time<day>[10]> #>  [1] \"2018-12-27\" \"2018-12-27\" \"2018-12-27\" \"2019-01-10\" \"2019-01-10\" #>  [6] \"2019-01-10\" \"2019-01-10\" \"2019-01-10\" \"2019-01-24\" \"2019-01-24\"  as_weekday(thursdays) #> <weekday[10]> #>  [1] Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu origin <- as_naive_time(year_month_day(2018, 12, 31)) as_weekday(origin) #> <weekday[1]> #> [1] Mon  mondays <- time_point_floor(x, \"day\", n = 14, origin = origin) mondays #> <naive_time<day>[10]> #>  [1] \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" #>  [6] \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-28\"  as_weekday(mondays) #> <weekday[10]> #>  [1] Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-5","dir":"Articles","previous_headings":"Flooring by days","what":"High level API","title":"Examples and Recipes","text":"can use date_floor() Date POSIXct types. origin provide another Date. week precision flooring Dates, can specify \"week\" precision.","code":"x <- seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-31\"), by = 20)  date_floor(x, \"day\", n = 60) #>  [1] \"2018-12-15\" \"2018-12-15\" \"2018-12-15\" \"2019-02-13\" \"2019-02-13\" #>  [6] \"2019-02-13\" \"2019-04-14\" \"2019-04-14\" \"2019-04-14\" \"2019-06-13\" #> [11] \"2019-06-13\" \"2019-06-13\" \"2019-08-12\" \"2019-08-12\" \"2019-08-12\" #> [16] \"2019-10-11\" \"2019-10-11\" \"2019-10-11\" \"2019-12-10\" x <- seq(as.Date(\"2019-01-01\"), by = 3, length.out = 10)  origin <- as.Date(\"2018-12-31\")  date_floor(x, \"week\", n = 2, origin = origin) #>  [1] \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" #>  [6] \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-28\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"day-of-the-year","dir":"Articles","previous_headings":"","what":"Day of the year","title":"Examples and Recipes","text":"get day year, convert year-day calendar type extract day get_day().","code":"x <- year_month_day(2019, clock_months$july, 4)  yd <- as_year_day(x) yd #> <year_day<day>[1]> #> [1] \"2019-185\"  get_day(yd) #> [1] 185"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-6","dir":"Articles","previous_headings":"Day of the year","what":"High level API","title":"Examples and Recipes","text":"","code":"x <- as.Date(\"2019-07-04\")  x %>%   as_year_day() %>%   get_day() #> [1] 185"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"computing-an-age-in-years","dir":"Articles","previous_headings":"","what":"Computing an age in years","title":"Examples and Recipes","text":"get age individual years, use calendar_count_between().","code":"x <- year_month_day(1980, 12, 14:16) today <- year_month_day(2005, 12, 15)  # Note that the month and day of the month are taken into account! # (Time of day would also be taken into account if there was any.) calendar_count_between(x, today, \"year\") #> [1] 25 25 24"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-7","dir":"Articles","previous_headings":"Computing an age in years","what":"High level API","title":"Examples and Recipes","text":"can use date_count_between() Date POSIXct types.","code":"x <- date_build(1980, 12, 14:16) today <- date_build(2005, 12, 15)  date_count_between(x, today, \"year\") #> [1] 25 25 24"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"computing-number-of-weeks-since-the-start-of-the-year","dir":"Articles","previous_headings":"","what":"Computing number of weeks since the start of the year","title":"Examples and Recipes","text":"lubridate::week() useful function returns “number complete seven day periods occurred date January 1st, plus one.” direct equivalent , possible replicate calendar_start() time_point_count_between(). also peek lubridate::week() implementation see just:","code":"x <- year_month_day(2019, 11, 28)  # lubridate::week(as.Date(x)) # [1] 48  x_start <- calendar_start(x, \"year\") x_start #> <year_month_day<day>[1]> #> [1] \"2019-01-01\"  time_point_count_between(   as_naive_time(x_start),   as_naive_time(x),   \"week\" ) + 1L #> [1] 48 doy <- get_day(as_year_day(x)) doy #> [1] 332  (doy - 1L) %/% 7L + 1L #> [1] 48"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-8","dir":"Articles","previous_headings":"Computing number of weeks since the start of the year","what":"High level API","title":"Examples and Recipes","text":"actually little easier high level API don’t think switching types.","code":"x <- date_build(2019, 11, 28)  date_count_between(date_start(x, \"year\"), x, \"week\") + 1L #> [1] 48"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"compute-the-number-of-months-between-two-dates","dir":"Articles","previous_headings":"","what":"Compute the number of months between two dates","title":"Examples and Recipes","text":"can compute number months two dates? bit ambiguous question “month” isn’t well-defined, various different interpretations take. might want ignore day component entirely, just compute number months 2013-10 2016-10. include day month, say 2013-10-15 2014-10-15 defines 1 month (.e. hit day month next month). also compute number days remaining two dates. compute number days two dates units seconds, divide average number seconds 1 proleptic Gregorian month.","code":"x <- year_month_day(2013, 10, 15) y <- year_month_day(2016, 10, 13) calendar_narrow(y, \"month\") - calendar_narrow(x, \"month\") #> <duration<month>[1]> #> [1] 36 calendar_count_between(x, y, \"month\") #> [1] 35 x_close <- add_months(x, calendar_count_between(x, y, \"month\")) x_close #> <year_month_day<day>[1]> #> [1] \"2016-09-15\"  x_close_st <- as_sys_time(x_close) y_st <- as_sys_time(y)  time_point_count_between(x_close_st, y_st, \"day\") #> [1] 28 # Days between x and y days <- as_sys_time(y) - as_sys_time(x) days #> <duration<day>[1]> #> [1] 1094  # In units of seconds days <- duration_cast(days, \"second\") days <- as.numeric(days) days #> [1] 94521600  # Average number of seconds in 1 proleptic Gregorian month avg_sec_in_month <- duration_cast(duration_months(1), \"second\") avg_sec_in_month <- as.numeric(avg_sec_in_month)  days / avg_sec_in_month #> [1] 35.94324"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-9","dir":"Articles","previous_headings":"Compute the number of months between two dates","what":"High level API","title":"Examples and Recipes","text":"ignore day month, first shift start month, can use date_count_between(). utilize day field, without calling date_start(). high level equivalent average length one proleptic Gregorian month example.","code":"x <- date_build(2013, 10, 15) y <- date_build(2016, 10, 13) date_count_between(date_start(x, \"month\"), date_start(y, \"month\"), \"month\") #> [1] 36 date_count_between(x, y, \"month\") #> [1] 35"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"computing-the-iso-year-or-week","dir":"Articles","previous_headings":"","what":"Computing the ISO year or week","title":"Examples and Recipes","text":"ISO 8601 standard outlines alternative calendar specified year, week year, day week. also specifies start week considered Monday. ends meaning actual ISO year may different Gregorian year, somewhat difficult compute “hand”. Instead, can use year_week_day() calendar need work ISO week dates. year-week-day calendar fully supported calendar, meaning calendar_*() functions work : also iso_year_week_day() calendar available, identical year_week_day(start = clock_weekdays$monday). ISO calendar actually existed first, generalized start weekday.","code":"x <- date_build(2019:2026) y <- as_year_week_day(x, start = clock_weekdays$monday)  data.frame(x = x, y = y) #>            x          y #> 1 2019-01-01 2019-W01-2 #> 2 2020-01-01 2020-W01-3 #> 3 2021-01-01 2020-W53-5 #> 4 2022-01-01 2021-W52-6 #> 5 2023-01-01 2022-W52-7 #> 6 2024-01-01 2024-W01-1 #> 7 2025-01-01 2025-W01-3 #> 8 2026-01-01 2026-W01-4 get_year(y) #> [1] 2019 2020 2020 2021 2022 2024 2025 2026 get_week(y) #> [1]  1  1 53 52 52  1  1  1  # Last week in the ISO year set_week(y, \"last\") #> <year_week_day<Monday><day>[8]> #> [1] \"2019-W52-2\" \"2020-W53-3\" \"2020-W53-5\" \"2021-W52-6\" \"2022-W52-7\" #> [6] \"2024-W52-1\" \"2025-W52-3\" \"2026-W53-4\" calendar_narrow(y, \"week\") #> <year_week_day<Monday><week>[8]> #> [1] \"2019-W01\" \"2020-W01\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2024-W01\" #> [7] \"2025-W01\" \"2026-W01\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"computing-the-epidemiological-year-or-week","dir":"Articles","previous_headings":"","what":"Computing the Epidemiological year or week","title":"Examples and Recipes","text":"Epidemiologists following US CDC guidelines use calendar similar ISO calendar, defines start week Sunday instead Monday. year_week_day() supports well:","code":"x <- date_build(2019:2026) iso <- as_year_week_day(x, start = clock_weekdays$monday) epi <- as_year_week_day(x, start = clock_weekdays$sunday)  data.frame(x = x, iso = iso, epi = epi) #>            x        iso        epi #> 1 2019-01-01 2019-W01-2 2019-W01-3 #> 2 2020-01-01 2020-W01-3 2020-W01-4 #> 3 2021-01-01 2020-W53-5 2020-W53-6 #> 4 2022-01-01 2021-W52-6 2021-W52-7 #> 5 2023-01-01 2022-W52-7 2023-W01-1 #> 6 2024-01-01 2024-W01-1 2024-W01-2 #> 7 2025-01-01 2025-W01-3 2025-W01-4 #> 8 2026-01-01 2026-W01-4 2025-W53-5 get_year(epi) #> [1] 2019 2020 2020 2021 2023 2024 2025 2025 get_week(epi) #> [1]  1  1 53 52  1  1  1 53"},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"converting-a-time-zone-abbreviation-into-a-time-zone-name","dir":"Articles","previous_headings":"","what":"Converting a time zone abbreviation into a time zone name","title":"Examples and Recipes","text":"possible might run date-time strings form \"2020-10-25 01:30:00 IST\", contain time zone abbreviation rather full time zone name. time zone maintainers change abbreviation use throughout time, multiple time zones sometimes use abbreviation, generally impossible parse strings form without information. said, know time zone abbreviation goes , can parse time zoned_time_parse_abbrev(), supplying zone. don’t know time zone abbreviation goes , generally luck. However, low-level tools library can help generate list possible zoned-times map . Assuming x naive-time corresponding time zone abbreviation attached, first thing parse string naive-time. Next, ’ll develop function attempts turn naive-time zoned-time, iterating time zone names available time zone database. time zone names accessible tzdb_names(). using low-level naive_time_info(), rather as_zoned_time(), lookup zone specific information, ’ll also get back information UTC offset time zone abbreviation currently use. matching abbreviation input abbreviation, can generate list zoned-times use abbreviation care particular instance time. looks like got 7 candidates, reality 3. Asia/Kolkata, Europe/Dublin, Asia/Jerusalem 3 candidates. others aliases 3 retired kept backwards compatibility. Looking code, two ways add candidate time zone name list. unique mapping {naive-time, zone} sys-time, check abbreviation goes unique mapping matches input abbreviation. , convert x zoned-time time zone. ambiguous mapping {naive-time, zone} sys-time, due daylight saving fallback, check abbreviation earliest latest possible times. either matches, convert x zoned-time using time zone information two ambiguous times used. example particularly interesting, since 3 candidates came different path. Asia/Kolkata one unique, Europe/Dublin one ambiguous earliest chosen, Asia/Jerusalem one ambiguous latest chosen:","code":"x <- \"2020-10-25 01:30:00 IST\"  zoned_time_parse_abbrev(x, \"Asia/Kolkata\") #> <zoned_time<second><Asia/Kolkata>[1]> #> [1] \"2020-10-25T01:30:00+05:30\" zoned_time_parse_abbrev(x, \"Asia/Jerusalem\") #> <zoned_time<second><Asia/Jerusalem>[1]> #> [1] \"2020-10-25T01:30:00+02:00\" x <- naive_time_parse(x, format = \"%Y-%m-%d %H:%M:%S IST\") x #> <naive_time<second>[1]> #> [1] \"2020-10-25T01:30:00\" naive_find_by_abbrev <- function(x, abbrev) {   if (!is_naive_time(x)) {     abort(\"`x` must be a naive-time.\")   }   if (length(x) != 1L) {     abort(\"`x` must be length 1.\")   }   if (!rlang::is_string(abbrev)) {     abort(\"`abbrev` must be a single string.\")   }      zones <- tzdb_names()   info <- naive_time_info(x, zones)   info$zones <- zones      c(     compute_uniques(x, info, abbrev),     compute_ambiguous(x, info, abbrev)   ) }  compute_uniques <- function(x, info, abbrev) {   info <- info[info$type == \"unique\",]      # If the abbreviation of the unique time matches the input `abbrev`,   # then that candidate zone should be in the output   matches <- info$first$abbreviation == abbrev   zones <- info$zones[matches]      lapply(zones, as_zoned_time, x = x) }  compute_ambiguous <- function(x, info, abbrev) {   info <- info[info$type == \"ambiguous\",]    # Of the two possible times,   # does the abbreviation of the earliest match the input `abbrev`?   matches <- info$first$abbreviation == abbrev   zones <- info$zones[matches]      earliest <- lapply(zones, as_zoned_time, x = x, ambiguous = \"earliest\")      # Of the two possible times,   # does the abbreviation of the latest match the input `abbrev`?   matches <- info$second$abbreviation == abbrev   zones <- info$zones[matches]      latest <- lapply(zones, as_zoned_time, x = x, ambiguous = \"latest\")      c(earliest, latest) } candidates <- naive_find_by_abbrev(x, \"IST\") candidates #> [[1]] #> <zoned_time<second><Asia/Calcutta>[1]> #> [1] \"2020-10-25T01:30:00+05:30\" #>  #> [[2]] #> <zoned_time<second><Asia/Kolkata>[1]> #> [1] \"2020-10-25T01:30:00+05:30\" #>  #> [[3]] #> <zoned_time<second><Eire>[1]> #> [1] \"2020-10-25T01:30:00+01:00\" #>  #> [[4]] #> <zoned_time<second><Europe/Dublin>[1]> #> [1] \"2020-10-25T01:30:00+01:00\" #>  #> [[5]] #> <zoned_time<second><Asia/Jerusalem>[1]> #> [1] \"2020-10-25T01:30:00+02:00\" #>  #> [[6]] #> <zoned_time<second><Asia/Tel_Aviv>[1]> #> [1] \"2020-10-25T01:30:00+02:00\" #>  #> [[7]] #> <zoned_time<second><Israel>[1]> #> [1] \"2020-10-25T01:30:00+02:00\" as_zoned_time(x, \"Asia/Kolkata\") #> <zoned_time<second><Asia/Kolkata>[1]> #> [1] \"2020-10-25T01:30:00+05:30\" as_zoned_time(x, \"Europe/Dublin\", ambiguous = \"earliest\") #> <zoned_time<second><Europe/Dublin>[1]> #> [1] \"2020-10-25T01:30:00+01:00\" as_zoned_time(x, \"Asia/Jerusalem\", ambiguous = \"latest\") #> <zoned_time<second><Asia/Jerusalem>[1]> #> [1] \"2020-10-25T01:30:00+02:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"when-is-the-next-daylight-saving-time-event","dir":"Articles","previous_headings":"","what":"When is the next daylight saving time event?","title":"Examples and Recipes","text":"Given particular zoned-time, next affected daylight saving time? , can use relatively low level helper, zoned_time_info(). returns data frame information current daylight saving time transition points, along information offset, current time zone abbreviation, whether daylight saving time currently active . 2018-11-04 (second) 1 o’clock hour, daylight saving time turned . 2019-03-10 3 o’clock, daylight saving time considered . next moment time right daylight saving time gap 1 hour, can see subtracting 1 second (sys-time):","code":"x <- zoned_time_parse_complete(\"2019-01-01T00:00:00-05:00[America/New_York]\")  info <- zoned_time_info(x)  # Beginning of the current DST range info$begin #> <zoned_time<second><America/New_York>[1]> #> [1] \"2018-11-04T01:00:00-05:00\"  # Beginning of the next DST range info$end #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-03-10T03:00:00-04:00\" # Last moment in time in the current DST range info$end %>%   as_sys_time() %>%   add_seconds(-1) %>%   as_zoned_time(zoned_time_zone(x)) #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-03-10T01:59:59-05:00\""},{"path":"https://clock.r-lib.org/dev/articles/recipes.html","id":"high-level-api-10","dir":"Articles","previous_headings":"When is the next daylight saving time event?","what":"High level API","title":"Examples and Recipes","text":"date_time_info() exists high level API similar thing. basically zoned_time_info(), except begin end columns returned R POSIXct date-times rather zoned-times, offset column returned integer rather clock duration (since try expose high level API users low level types).","code":"x <- date_time_parse(\"2019-01-01 00:00:00\", zone = \"America/New_York\")  date_time_info(x) #>                 begin                 end offset   dst abbreviation #> 1 2018-11-04 01:00:00 2019-03-10 03:00:00 -18000 FALSE          EST"},{"path":"https://clock.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Davis Vaughan. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://clock.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vaughan D (2025). clock: Date-Time Types Tools. R package version 0.7.2.9000, https://github.com/r-lib/clock, https://clock.r-lib.org.","code":"@Manual{,   title = {clock: Date-Time Types and Tools},   author = {Davis Vaughan},   year = {2025},   note = {R package version 0.7.2.9000, https://github.com/r-lib/clock},   url = {https://clock.r-lib.org}, }"},{"path":"https://clock.r-lib.org/dev/index.html","id":"clock-","dir":"","previous_headings":"","what":"Date-Time Types and Tools","title":"Date-Time Types and Tools","text":"clock R package working date-times. packed features, including utilities : parsing, formatting, arithmetic, rounding, extraction/updating individual components. addition tools manipulating date-times, clock provides entirely new date-time types structured reduce agony working time zones much possible. high-level, clock: Provides new family date-time classes (durations, time points, zoned-times, calendars) partition responsibilities think time zones need . Implements high level API R’s native date (Date) date-time (POSIXct) classes lets get productive quickly without learn details clock’s new date-time types. Requires explicit handling invalid dates (e.g. date one month January 31st?) nonexistent ambiguous times (caused daylight saving time issues). built C++ date library, provides correct high-performance backend. four key classes clock, inspired design C++ date chrono libraries. types efficient others particular operations, 4 taken whole get complete date time library. duration counts units time, like “5 years” “6 nanoseconds”. Bigger units defined terms seconds, .e. 1 day 86400 seconds 1 year 365.2425 days. Durations important form backbone clock; ’s relatively rare use directly. time point records instant time, like “1:24pm January 1st 2015”. combines duration “clock” defines start counting exactly count. two important types time clock: sys-time naive-time. ’re equivalent start working zoned-times. zoned-time time point paired time zone. can create either sys-time naive-time, depending whether want convert time point UTC (leaving underlying duration unchanged, changing printed time), declare time point specific time zone (leaving printed time unchanged, changing underlying duration). Zoned-times primarily needed communication humans. calendar represents date using combination fields like year-month-day, year-month-weekday, year-quarter-day, year-day, iso-year-week-day, along hour/minute/second fields represent time within day (’re similar R’s POSIXlt). Calendar objects extremely efficient arithmetic involving irregular periods months, quarters, years getting setting specified components. calendar can represent invalid dates (like 2020-02-31) need resolved converting back time point.","code":""},{"path":"https://clock.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Date-Time Types and Tools","text":"Install released version CRAN : Install development version GitHub :","code":"install.packages(\"clock\") # install.packages(\"pak\") pak::pak(\"r-lib/clock\")"},{"path":"https://clock.r-lib.org/dev/index.html","id":"learning","dir":"","previous_headings":"","what":"Learning","title":"Date-Time Types and Tools","text":"clock, high-level API manipulating R’s native date date-time types (Date, POSIXct, POSIXlt), well low-level API advanced date-time manipulations. high-level API allow quickly get productive clock without learn many new types. easy way get overview looking High Level API section pkgdown reference page. ’ll also want take look clock’s vignettes: Getting Started Motivations clock Examples Recipes Frequently Asked Questions can also watch 5 minute lightning talk clock:","code":""},{"path":"https://clock.r-lib.org/dev/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Date-Time Types and Tools","text":"ideas used build clock come number places: First foremost, clock depends inspired date library Howard Hinnant, variant voted C++20. R “record” types clock built come vctrs. nanotime package first implement nanosecond resolution time type R. zoo package first implement year-month year-quarter types, functioned successful time series infrastructure package many years. Additionally, ’d like thank wife power user clock, number discussions around bugs missing features. can thank date_count_between().","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: date — Date-arithmetic","title":"Arithmetic: date — Date-arithmetic","text":"Date methods arithmetic generics. Calendrical based arithmetic: functions convert year-month-day calendar, perform arithmetic, convert back Date. add_years() add_quarters() add_months() Time point based arithmetic: functions convert time point, perform arithmetic, convert back Date. add_weeks() add_days()","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: date — Date-arithmetic","text":"","code":"# S3 method for class 'Date' add_years(x, n, ..., invalid = NULL)  # S3 method for class 'Date' add_quarters(x, n, ..., invalid = NULL)  # S3 method for class 'Date' add_months(x, n, ..., invalid = NULL)  # S3 method for class 'Date' add_weeks(x, n, ...)  # S3 method for class 'Date' add_days(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: date — Date-arithmetic","text":"x [Date] Date vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: date — Date-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: date — Date-arithmetic","text":"Adding single quarter add_quarters() equivalent adding 3 months. x n recycled using tidyverse recycling rules. calendrical based arithmetic potential generate invalid dates. Time point based arithmetic, like adding days, always generate valid date.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: date — Date-arithmetic","text":"","code":"x <- as.Date(\"2019-01-01\")  add_years(x, 1:5) #> [1] \"2020-01-01\" \"2021-01-01\" \"2022-01-01\" \"2023-01-01\" \"2024-01-01\"  y <- as.Date(\"2019-01-31\")  # Adding 1 month to `y` generates an invalid date. Unlike year-month-day # types, R's native Date type cannot handle invalid dates, so you must # resolve them immediately. If you don't you get an error: try(add_months(y, 1:2)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. add_months(as_year_month_day(y), 1:2) #> <year_month_day<day>[2]> #> [1] \"2019-02-31\" \"2019-03-31\"  # Resolve invalid dates by specifying an invalid date resolution strategy # with the `invalid` argument. Using `\"previous\"` here sets the date to # the previous valid date - i.e. the end of the month. add_months(y, 1:2, invalid = \"previous\") #> [1] \"2019-02-28\" \"2019-03-31\""},{"path":"https://clock.r-lib.org/dev/reference/Date-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: date — Date-getters","title":"Getters: date — Date-getters","text":"Date methods getter generics. get_year() returns Gregorian year. get_month() returns month year. get_day() returns day month. advanced component extraction, convert calendar type interested .","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: date — Date-getters","text":"","code":"# S3 method for class 'Date' get_year(x)  # S3 method for class 'Date' get_month(x)  # S3 method for class 'Date' get_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/Date-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: date — Date-getters","text":"x [Date] Date get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: date — Date-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: date — Date-getters","text":"","code":"x <- as.Date(\"2019-01-01\") + 0:5 get_day(x) #> [1] 1 2 3 4 5 6"},{"path":"https://clock.r-lib.org/dev/reference/Date-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: date — Date-setters","title":"Setters: date — Date-setters","text":"Date methods setter generics. set_year() sets year. set_month() sets month year. Valid values range [1, 12]. set_day() sets day month. Valid values range [1, 31].","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: date — Date-setters","text":"","code":"# S3 method for class 'Date' set_year(x, value, ..., invalid = NULL)  # S3 method for class 'Date' set_month(x, value, ..., invalid = NULL)  # S3 method for class 'Date' set_day(x, value, ..., invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/Date-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: date — Date-setters","text":"x [Date] Date vector. value [integer / \"last\"] value set component . set_day(), can also \"last\" set day last day month. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: date — Date-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/Date-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: date — Date-setters","text":"","code":"x <- as.Date(\"2019-02-01\")  # Set the day set_day(x, 12:14) #> [1] \"2019-02-12\" \"2019-02-13\" \"2019-02-14\"  # Set to the \"last\" day of the month set_day(x, \"last\") #> [1] \"2019-02-28\"  # You cannot set a Date to an invalid day like you can with # a year-month-day. Instead, the default strategy is to error. try(set_day(x, 31)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. set_day(as_year_month_day(x), 31) #> <year_month_day<day>[1]> #> [1] \"2019-02-31\"  # You can resolve these issues while setting the day by specifying # an invalid date resolution strategy with `invalid` set_day(x, 31, invalid = \"previous\") #> [1] \"2019-02-28\""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a zoned-time from a date — as-zoned-time-Date","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"Date method as_zoned_time() generic. clock assumes Dates naive date-time types. Like naive-times, yet---specified time zone. method allows specify time zone, keeping printed time. possible, time set midnight (see Details rare case possible).","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"","code":"# S3 method for class 'Date' as_zoned_time(x, zone, ..., nonexistent = NULL, ambiguous = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"x [Date] Date. zone [character(1)] zone convert . ... dots future extensions must empty. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"rare instance specified time zone contain date-time midnight due daylight saving time, nonexistent can used resolve issue. Similarly, two possible midnight times due daylight saving time fallback, ambiguous can used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-Date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a zoned-time from a date — as-zoned-time-Date","text":"","code":"x <- as.Date(\"2019-01-01\")  # The resulting zoned-times have the same printed time, but are in # different time zones as_zoned_time(x, \"UTC\") #> <zoned_time<second><UTC>[1]> #> [1] \"2019-01-01T00:00:00+00:00\" as_zoned_time(x, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\"  # Converting Date -> zoned-time is the same as naive-time -> zoned-time x <- as_naive_time(year_month_day(2019, 1, 1)) as_zoned_time(x, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\"  # In Asia/Beirut, there was a DST gap from # 2021-03-27 23:59:59 -> 2021-03-28 01:00:00, # skipping the 0th hour entirely. This means there is no midnight value. x <- as.Date(\"2021-03-28\") try(as_zoned_time(x, \"Asia/Beirut\")) #> Error in as_zoned_time(x, zone = zone, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # To resolve this, set a `nonexistent` time resolution strategy as_zoned_time(x, \"Asia/Beirut\", nonexistent = \"roll-forward\") #> <zoned_time<second><Asia/Beirut>[1]> #> [1] \"2021-03-28T01:00:00+03:00\""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"naive-time method as_zoned_time() generic. Converting zoned-time naive-time retains printed time, changes underlying duration, depending zone choose. Naive-times time points yet---determined time zone. converting zoned-time, specifying time zone attempting keep printed information (possible). want retain underlying duration, try converting zoned-time sys-time, time point interpreted UTC time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"","code":"# S3 method for class 'clock_naive_time' as_zoned_time(x, zone, ..., nonexistent = NULL, ambiguous = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"x [clock_naive_time] naive-time convert zoned-time. zone [character(1)] zone convert . ... dots future extensions must empty. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"zoned-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":"daylight-saving-time","dir":"Reference","previous_headings":"","what":"Daylight Saving Time","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"Converting naive-time zoned-time always possible due daylight saving time issues. two types issues: Nonexistent times result daylight saving time \"gaps\". example, America/New_York time zone, daylight saving time gap 1 second \"2020-03-08 01:59:59\", clocks changed 01:59:59 -> 03:00:00, completely skipping 2 o'clock hour. means naive time \"2020-03-08 02:30:00\", convert straight zoned-time time zone. resolve issues, nonexistent argument can used specify one many nonexistent time resolution strategies. Ambiguous times result daylight saving time \"fallbacks\". example, America/New_York time zone, daylight saving time fallback 1 second \"2020-11-01 01:59:59 EDT\", point clocks \"fell backwards\" 1 hour, resulting printed time \"2020-11-01 01:00:00 EST\" (note EDT->EST shift). resulted two 1 o'clock hours day, naive time \"2020-11-01 01:30:00\", able convert directly zoned-time time zone, way clock know two ambiguous times wanted. resolve issues, ambiguous argument can used specify one many ambiguous time resolution strategies.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-naive-time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a zoned-time from a naive-time — as-zoned-time-naive-time","text":"","code":"library(magrittr)  x <- as_naive_time(year_month_day(2019, 1, 1))  # Converting a naive-time to a zoned-time generally retains the # printed time, while changing the underlying duration. as_zoned_time(x, \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\" as_zoned_time(x, \"America/Los_Angeles\") #> <zoned_time<second><America/Los_Angeles>[1]> #> [1] \"2019-01-01T00:00:00-08:00\"  # --------------------------------------------------------------------------- # Nonexistent time:  new_york <- \"America/New_York\"  # There was a daylight saving gap in the America/New_York time zone on # 2020-03-08 01:59:59 -> 03:00:00, which means that one of these # naive-times don't exist in that time zone. By default, attempting to # convert it to a zoned time will result in an error. nonexistent_time <- year_month_day(2020, 03, 08, c(02, 03), c(45, 30), 00) nonexistent_time <- as_naive_time(nonexistent_time) try(as_zoned_time(nonexistent_time, new_york)) #> Error in as_zoned_time(nonexistent_time, new_york) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # Resolve this by specifying a nonexistent time resolution strategy as_zoned_time(nonexistent_time, new_york, nonexistent = \"roll-forward\") #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-03-08T03:00:00-04:00\" \"2020-03-08T03:30:00-04:00\" as_zoned_time(nonexistent_time, new_york, nonexistent = \"roll-backward\") #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-03-08T01:59:59-05:00\" \"2020-03-08T03:30:00-04:00\"  # Note that rolling backwards will choose the last possible moment in # time at the current precision of the input nonexistent_nanotime <- time_point_cast(nonexistent_time, \"nanosecond\") nonexistent_nanotime #> <naive_time<nanosecond>[2]> #> [1] \"2020-03-08T02:45:00.000000000\" \"2020-03-08T03:30:00.000000000\" as_zoned_time(nonexistent_nanotime, new_york, nonexistent = \"roll-backward\") #> <zoned_time<nanosecond><America/New_York>[2]> #> [1] \"2020-03-08T01:59:59.999999999-05:00\" #> [2] \"2020-03-08T03:30:00.000000000-04:00\"  # A word of caution - Shifting does not guarantee that the relative ordering # of the input is maintained shifted <- as_zoned_time(   nonexistent_time,   new_york,   nonexistent = \"shift-forward\" ) shifted #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-03-08T03:45:00-04:00\" \"2020-03-08T03:30:00-04:00\"  # 02:45:00 < 03:30:00 nonexistent_time[1] < nonexistent_time[2] #> [1] TRUE # 03:45:00 > 03:30:00 (relative ordering is lost) shifted[1] < shifted[2] #> [1] FALSE  # --------------------------------------------------------------------------- # Ambiguous time:  new_york <- \"America/New_York\"  # There was a daylight saving time fallback in the America/New_York time # zone on 2020-11-01 01:59:59 EDT -> 2020-11-01 01:00:00 EST, resulting # in two 1 o'clock hours. This means that the following naive time is # ambiguous since we don't know which of the two 1 o'clocks it belongs to. # By default, attempting to convert it to a zoned time will result in an # error. ambiguous_time <- year_month_day(2020, 11, 01, 01, 30, 00) ambiguous_time <- as_naive_time(ambiguous_time) try(as_zoned_time(ambiguous_time, new_york)) #> Error in as_zoned_time(ambiguous_time, new_york) :  #>   Ambiguous time due to daylight saving time at location 1. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument.  # Resolve this by specifying an ambiguous time resolution strategy earliest <- as_zoned_time(ambiguous_time, new_york, ambiguous = \"earliest\") latest <- as_zoned_time(ambiguous_time, new_york, ambiguous = \"latest\") na <- as_zoned_time(ambiguous_time, new_york, ambiguous = \"NA\") earliest #> <zoned_time<second><America/New_York>[1]> #> [1] \"2020-11-01T01:30:00-04:00\" latest #> <zoned_time<second><America/New_York>[1]> #> [1] \"2020-11-01T01:30:00-05:00\" na #> <zoned_time<second><America/New_York>[1]> #> [1] NA  # Now assume that you were given the following zoned-times, i.e., # you didn't build them from scratch so you already know their otherwise # ambiguous offsets x <- c(earliest, latest) x #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-11-01T01:30:00-04:00\" \"2020-11-01T01:30:00-05:00\"  # To set the seconds to 5 in both, you might try: x_naive <- x %>%   as_naive_time() %>%   as_year_month_day() %>%   set_second(5) %>%   as_naive_time()  x_naive #> <naive_time<second>[2]> #> [1] \"2020-11-01T01:30:05\" \"2020-11-01T01:30:05\"  # But this fails because you've \"lost\" the information about which # offsets these ambiguous times started in try(as_zoned_time(x_naive, zoned_time_zone(x))) #> Error in as_zoned_time(x_naive, zoned_time_zone(x)) :  #>   Ambiguous time due to daylight saving time at location 1. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument.  # To get around this, you can use that information by specifying # `ambiguous = x`, which will use the offset from `x` to resolve the # ambiguity in `x_naive` as long as `x` is also an ambiguous time with the # same daylight saving time transition point as `x_naive` (i.e. here # everything has a transition point of `\"2020-11-01 01:00:00 EST\"`). as_zoned_time(x_naive, zoned_time_zone(x), ambiguous = x) #> <zoned_time<second><America/New_York>[2]> #> [1] \"2020-11-01T01:30:05-04:00\" \"2020-11-01T01:30:05-05:00\"  # Say you added one more time to `x` that would not be considered ambiguous # in naive-time x <- c(x, as_zoned_time(as_sys_time(latest) + 3600, zoned_time_zone(latest))) x #> <zoned_time<second><America/New_York>[3]> #> [1] \"2020-11-01T01:30:00-04:00\" \"2020-11-01T01:30:00-05:00\" #> [3] \"2020-11-01T02:30:00-05:00\"  # Imagine you want to floor this vector to a multiple of 2 hours, with # an origin of 1am that day. You can do this by subtracting the origin, # flooring, then adding it back origin <- year_month_day(2019, 11, 01, 01, 00, 00) %>%   as_naive_time() %>%   as_duration()  x_naive <- x %>%   as_naive_time() %>%   add_seconds(-origin) %>%   time_point_floor(\"hour\", n = 2) %>%   add_seconds(origin)  x_naive #> <naive_time<second>[3]> #> [1] \"2020-11-01T01:00:00\" \"2020-11-01T01:00:00\" \"2020-11-01T01:00:00\"  # You again have ambiguous naive-time points, so you might try using # `ambiguous = x`. It looks like this took care of the first two problems, # but we have an issue at location 3. try(as_zoned_time(x_naive, zoned_time_zone(x), ambiguous = x)) #> Error in as_zoned_time(x_naive, zoned_time_zone(x), ambiguous = x) :  #>   Ambiguous time due to daylight saving time at location 3. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument.  # When we floored from 02:30:00 -> 01:00:00, we went from being # unambiguous -> ambiguous. In clock, this is something you must handle # explicitly, and cannot be handled by using information from `x`. You can # handle this while still retaining the behavior for the other two # time points that were ambiguous before and after the floor by passing a # list containing `x` and an ambiguous time resolution strategy to use # when information from `x` can't resolve ambiguities: as_zoned_time(x_naive, zoned_time_zone(x), ambiguous = list(x, \"latest\")) #> <zoned_time<second><America/New_York>[3]> #> [1] \"2020-11-01T01:00:00-04:00\" \"2020-11-01T01:00:00-05:00\" #> [3] \"2020-11-01T01:00:00-05:00\""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-posixt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","title":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","text":"POSIXct/POSIXlt method as_zoned_time() generic. Converting one R's native date-time classes (POSIXct POSIXlt) retain time zone object. zone argument.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-posixt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","text":"","code":"# S3 method for class 'POSIXt' as_zoned_time(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-posixt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","text":"x [POSIXct / POSIXlt] date-time. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-posixt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","text":"zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-posixt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a zoned-time from a date-time — as-zoned-time-posixt","text":"","code":"x <- as.POSIXct(\"2019-01-01\", tz = \"America/New_York\") as_zoned_time(x) #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-sys-time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","title":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","text":"sys-time method as_zoned_time() generic. Converting zoned-time sys-time retains underlying duration, changes printed time, depending zone choose. Remember sys-times interpreted UTC. want retain printed time, try converting zoned-time naive-time, time point yet---determined time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-sys-time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","text":"","code":"# S3 method for class 'clock_sys_time' as_zoned_time(x, zone, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-sys-time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","text":"x [clock_sys_time] sys-time convert zoned-time. zone [character(1)] zone convert . ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-sys-time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","text":"zoned-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as-zoned-time-sys-time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a zoned-time from a sys-time — as-zoned-time-sys-time","text":"","code":"x <- as_sys_time(year_month_day(2019, 02, 01, 02, 30, 00)) x #> <sys_time<second>[1]> #> [1] \"2019-02-01T02:30:00\"  # Since sys-time is interpreted as UTC, converting to a zoned-time with # a zone of UTC retains the printed time x_utc <- as_zoned_time(x, \"UTC\") x_utc #> <zoned_time<second><UTC>[1]> #> [1] \"2019-02-01T02:30:00+00:00\"  # Converting to a different zone results in a different printed time, # which corresponds to the exact same point in time, just in a different # part of the work x_ny <- as_zoned_time(x, \"America/New_York\") x_ny #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-31T21:30:00-05:00\""},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a date — as_date","title":"Convert to a date — as_date","text":"as_date() generic function converts input date (Date). methods converting date-times (POSIXct), calendars, time points, zoned-times dates. converting date-time, see as_date_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a date — as_date","text":"","code":"as_date(x, ...)  # S3 method for class 'Date' as_date(x, ...)  # S3 method for class 'POSIXt' as_date(x, ...)  # S3 method for class 'clock_calendar' as_date(x, ...)  # S3 method for class 'clock_time_point' as_date(x, ...)  # S3 method for class 'clock_zoned_time' as_date(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a date — as_date","text":"x [vector] vector. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a date — as_date","text":"date length x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a date — as_date","text":"Note clock always assumes R's Date class naive, converting POSIXct Date always retain printed year, month, day value. drop-replacement .Date(), converts limited set types Date. parsing characters dates, see date_parse(). converting numerics dates, see vctrs::new_date() continue use .Date().","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a date — as_date","text":"","code":"x <- date_time_parse(\"2019-01-01 23:02:03\", \"America/New_York\")  # R's `as.Date.POSIXct()` method defaults to changing the printed time # to UTC before converting, which can result in odd conversions like this: as.Date(x) #> [1] \"2019-01-02\"  # `as_date()` will never change the printed time before converting as_date(x) #> [1] \"2019-01-01\"  # Can also convert from other clock types as_date(year_month_day(2019, 2, 5)) #> [1] \"2019-02-05\""},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a date-time — as_date_time","title":"Convert to a date-time — as_date_time","text":"as_date_time() generic function converts input date-time (POSIXct). methods converting dates (Date), calendars, time points, zoned-times date-times. converting date, see as_date().","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a date-time — as_date_time","text":"","code":"as_date_time(x, ...)  # S3 method for class 'POSIXt' as_date_time(x, ...)  # S3 method for class 'Date' as_date_time(x, zone, ..., nonexistent = NULL, ambiguous = NULL)  # S3 method for class 'clock_calendar' as_date_time(x, zone, ..., nonexistent = NULL, ambiguous = NULL)  # S3 method for class 'clock_sys_time' as_date_time(x, zone, ...)  # S3 method for class 'clock_naive_time' as_date_time(x, zone, ..., nonexistent = NULL, ambiguous = NULL)  # S3 method for class 'clock_zoned_time' as_date_time(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a date-time — as_date_time","text":"x [vector] vector. ... dots future extensions must empty. zone [character(1)] zone convert . nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a date-time — as_date_time","text":"date-time length x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a date-time — as_date_time","text":"Note clock always assumes R's Date class naive, converting Date POSIXct always attempt retain printed year, month, day. possible, resulting time midnight (00:00:00), rare cases possible due daylight saving time. issue ever arises, error thrown, can resolved explicitly supplying nonexistent ambiguous. drop-replacement .POSIXct(), converts limited set types POSIXct. parsing characters date-times, see date_time_parse(). converting numerics date-times, see vctrs::new_datetime() continue use .POSIXct().","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_date_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a date-time — as_date_time","text":"","code":"x <- as.Date(\"2019-01-01\")  # `as.POSIXct()` will always treat Date as UTC, but will show the result # of the conversion in your system time zone, which can be somewhat confusing if (rlang::is_installed(\"withr\")) {   withr::with_timezone(\"UTC\", print(as.POSIXct(x)))   withr::with_timezone(\"Europe/Paris\", print(as.POSIXct(x)))   withr::with_timezone(\"America/New_York\", print(as.POSIXct(x))) } #> [1] \"2019-01-01 UTC\" #> [1] \"2019-01-01 UTC\" #> [1] \"2019-01-01 UTC\"  # `as_date_time()` will treat Date as naive, which means that the original # printed date will attempt to be kept wherever possible, no matter the # time zone. The time will be set to midnight. as_date_time(x, \"UTC\") #> [1] \"2019-01-01 UTC\" as_date_time(x, \"Europe/Paris\") #> [1] \"2019-01-01 CET\" as_date_time(x, \"America/New_York\") #> [1] \"2019-01-01 EST\"  # In some rare cases, this is not possible. # For example, in Asia/Beirut, there was a DST gap from # 2021-03-27 23:59:59 -> 2021-03-28 01:00:00, # skipping the 0th hour entirely. x <- as.Date(\"2021-03-28\") try(as_date_time(x, \"Asia/Beirut\")) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # To resolve this, set a `nonexistent` time resolution strategy as_date_time(x, \"Asia/Beirut\", nonexistent = \"roll-forward\") #> [1] \"2021-03-28 01:00:00 EEST\"   # You can also convert to date-time from other clock types as_date_time(year_month_day(2019, 2, 3, 03), \"America/New_York\") #> [1] \"2019-02-03 03:00:00 EST\""},{"path":"https://clock.r-lib.org/dev/reference/as_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a duration — as_duration","title":"Convert to a duration — as_duration","text":"generally convert duration either sys-time naive-time. precision input retained returned duration. round existing duration another precision, see duration_floor().","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a duration — as_duration","text":"","code":"as_duration(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a duration — as_duration","text":"x [object] object convert duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a duration — as_duration","text":"duration precision x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a duration — as_duration","text":"","code":"x <- as_sys_time(year_month_day(2019, 01, 01))  # The number of days since 1970-01-01 UTC as_duration(x) #> <duration<day>[1]> #> [1] 17897  x <- x + duration_seconds(1) x #> <sys_time<second>[1]> #> [1] \"2019-01-01T00:00:01\"  # The number of seconds since 1970-01-01 00:00:00 UTC as_duration(x) #> <duration<second>[1]> #> [1] 1546300801"},{"path":"https://clock.r-lib.org/dev/reference/as_iso_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to iso-year-week-day — as_iso_year_week_day","title":"Convert to iso-year-week-day — as_iso_year_week_day","text":"as_iso_year_week_day() converts vector iso-year-week-day calendar. Time points, Dates, POSIXct, calendars can converted iso-year-week-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_iso_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to iso-year-week-day — as_iso_year_week_day","text":"","code":"as_iso_year_week_day(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_iso_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to iso-year-week-day — as_iso_year_week_day","text":"x [vector] vector convert iso-year-week-day. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_iso_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to iso-year-week-day — as_iso_year_week_day","text":"iso-year-week-day vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_iso_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to iso-year-week-day — as_iso_year_week_day","text":"","code":"# From Date as_iso_year_week_day(as.Date(\"2019-01-01\")) #> <iso_year_week_day<day>[1]> #> [1] \"2019-W01-2\"  # From POSIXct, which assumes that the naive time is what should be converted as_iso_year_week_day(as.POSIXct(\"2019-01-01 02:30:30\", \"America/New_York\")) #> <iso_year_week_day<second>[1]> #> [1] \"2019-W01-2T02:30:30\"  # From other calendars as_iso_year_week_day(year_quarter_day(2019, quarter = 2, day = 50)) #> <iso_year_week_day<day>[1]> #> [1] \"2019-W21-1\""},{"path":"https://clock.r-lib.org/dev/reference/as_naive_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a naive-time — as_naive_time","title":"Convert to a naive-time — as_naive_time","text":"as_naive_time() converts x naive-time. can convert naive-time calendar type, long least day precision. also must invalid dates. invalid dates exist, must first resolved invalid_resolve(). Converting naive-time sys-time zoned-time retains printed time, drops assumption time interpreted specific time zone. Converting naive-time duration just wraps duration naive-time object, assumption time zone. duration must least day precision. convenience methods converting naive-time R's native date date-time types. Like converting zoned-time, retain printed time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_naive_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a naive-time — as_naive_time","text":"","code":"as_naive_time(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_naive_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a naive-time — as_naive_time","text":"x [object] object convert naive-time. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_naive_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a naive-time — as_naive_time","text":"naive-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_naive_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a naive-time — as_naive_time","text":"","code":"x <- as.Date(\"2019-01-01\") as_naive_time(x) #> <naive_time<day>[1]> #> [1] \"2019-01-01\"  ym <- year_month_day(2019, 02)  # A minimum of day precision is required try(as_naive_time(ym)) #> Error : Can't convert to a time point from a calendar with 'month' precision. A minimum of 'day' precision is required.  ymd <- set_day(ym, 10) as_naive_time(ymd) #> <naive_time<day>[1]> #> [1] \"2019-02-10\""},{"path":"https://clock.r-lib.org/dev/reference/as_sys_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a sys-time — as_sys_time","title":"Convert to a sys-time — as_sys_time","text":"as_sys_time() converts x sys-time. can convert sys-time calendar type, long least day precision. also must invalid dates. invalid dates exist, must first resolved invalid_resolve(). Converting sys-time naive-time retains printed time, adds assumption time interpreted UTC time zone. Converting sys-time zoned-time retains underlying duration, printed time equivalent UTC time whatever zoned-time's zone happened . Converting sys-time duration just wraps duration sys-time object, adding assumption time interpreted UTC time zone. duration must least day precision. convenience methods converting sys-time R's native date date-time types. Like converting zoned-time, retain underlying duration, change printed time zone already UTC.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_sys_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a sys-time — as_sys_time","text":"","code":"as_sys_time(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_sys_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a sys-time — as_sys_time","text":"x [object] object convert sys-time. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_sys_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a sys-time — as_sys_time","text":"sys-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_sys_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a sys-time — as_sys_time","text":"","code":"x <- as.Date(\"2019-01-01\")  # Dates are assumed to be naive, so the printed time is the same whether # we convert it to sys-time or naive-time as_sys_time(x) #> <sys_time<day>[1]> #> [1] \"2019-01-01\" as_naive_time(x) #> <naive_time<day>[1]> #> [1] \"2019-01-01\"  y <- as.POSIXct(\"2019-01-01 01:00:00\", tz = \"America/New_York\")  # The sys time displays the equivalent time in UTC (5 hours ahead of # America/New_York at this point in the year) as_sys_time(y) #> <sys_time<second>[1]> #> [1] \"2019-01-01T06:00:00\"  ym <- year_month_day(2019, 02)  # A minimum of day precision is required try(as_sys_time(ym)) #> Error : Can't convert to a time point from a calendar with 'month' precision. A minimum of 'day' precision is required.  ymd <- set_day(ym, 10) as_sys_time(ymd) #> <sys_time<day>[1]> #> [1] \"2019-02-10\""},{"path":"https://clock.r-lib.org/dev/reference/as_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a weekday — as_weekday","title":"Convert to a weekday — as_weekday","text":"as_weekday() converts weekday type. normally useful converting weekday sys-time naive-time. can use function along circular arithmetic weekday implements easily get \"next Monday\" \"previous Sunday\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a weekday — as_weekday","text":"","code":"as_weekday(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a weekday — as_weekday","text":"x [object] object convert weekday. Usually sys-time naive-time. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a weekday — as_weekday","text":"weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a weekday — as_weekday","text":"","code":"x <- as_naive_time(year_month_day(2019, 01, 05))  # This is a Saturday! as_weekday(x) #> <weekday[1]> #> [1] Sat  # See the examples in `?weekday` for more usage."},{"path":"https://clock.r-lib.org/dev/reference/as_year_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to year-day — as_year_day","title":"Convert to year-day — as_year_day","text":"as_year_day() converts vector year-day calendar. Time points, Dates, POSIXct, calendars can converted year-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to year-day — as_year_day","text":"","code":"as_year_day(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_year_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to year-day — as_year_day","text":"x [vector] vector convert year-day. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to year-day — as_year_day","text":"year-day vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to year-day — as_year_day","text":"","code":"# From Date as_year_day(as.Date(\"2019-05-01\")) #> <year_day<day>[1]> #> [1] \"2019-121\"  # From POSIXct, which assumes that the naive time is what should be converted as_year_day(as.POSIXct(\"2019-05-01 02:30:30\", \"America/New_York\")) #> <year_day<second>[1]> #> [1] \"2019-121T02:30:30\"  # From other calendars as_year_day(year_quarter_day(2019, quarter = 2, day = 50)) #> <year_day<day>[1]> #> [1] \"2019-140\""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to year-month-day — as_year_month_day","title":"Convert to year-month-day — as_year_month_day","text":"as_year_month_day() converts vector year-month-day calendar. Time points, Dates, POSIXct, calendars can converted year-month-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to year-month-day — as_year_month_day","text":"","code":"as_year_month_day(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to year-month-day — as_year_month_day","text":"x [vector] vector convert year-month-day. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to year-month-day — as_year_month_day","text":"year-month-day vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to year-month-day — as_year_month_day","text":"","code":"# From Date as_year_month_day(as.Date(\"2019-01-01\")) #> <year_month_day<day>[1]> #> [1] \"2019-01-01\"  # From POSIXct, which assumes that the naive time is what should be converted as_year_month_day(as.POSIXct(\"2019-01-01 02:30:30\", \"America/New_York\")) #> <year_month_day<second>[1]> #> [1] \"2019-01-01T02:30:30\"  # From other calendars as_year_month_day(year_quarter_day(2019, quarter = 2, day = 50)) #> <year_month_day<day>[1]> #> [1] \"2019-05-20\""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to year-month-weekday — as_year_month_weekday","title":"Convert to year-month-weekday — as_year_month_weekday","text":"as_year_month_weekday() converts vector year-month-weekday calendar. Time points, Dates, POSIXct, calendars can converted year-month-weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to year-month-weekday — as_year_month_weekday","text":"","code":"as_year_month_weekday(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to year-month-weekday — as_year_month_weekday","text":"x [vector] vector convert year-month-weekday. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to year-month-weekday — as_year_month_weekday","text":"year-month-weekday vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_month_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to year-month-weekday — as_year_month_weekday","text":"","code":"# From Date as_year_month_weekday(as.Date(\"2019-01-01\")) #> <year_month_weekday<day>[1]> #> [1] \"2019-01-Tue[1]\"  # From POSIXct, which assumes that the naive time is what should be converted as_year_month_weekday(as.POSIXct(\"2019-01-01 02:30:30\", \"America/New_York\")) #> <year_month_weekday<second>[1]> #> [1] \"2019-01-Tue[1]T02:30:30\"  # From other calendars as_year_month_weekday(year_quarter_day(2019, quarter = 2, day = 50)) #> <year_month_weekday<day>[1]> #> [1] \"2019-05-Mon[3]\""},{"path":"https://clock.r-lib.org/dev/reference/as_year_quarter_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to year-quarter-day — as_year_quarter_day","title":"Convert to year-quarter-day — as_year_quarter_day","text":"as_year_quarter_day() converts vector year-quarter-day calendar. Time points, Dates, POSIXct, calendars can converted year-quarter-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_quarter_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to year-quarter-day — as_year_quarter_day","text":"","code":"as_year_quarter_day(x, ..., start = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/as_year_quarter_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to year-quarter-day — as_year_quarter_day","text":"x [vector] vector convert year-quarter-day. ... dots future extensions must empty. start [integer(1) / NULL] month start fiscal year . 1 = January 12 = December. NULL: x year-quarter-day, returned . Otherwise, start January used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_quarter_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to year-quarter-day — as_year_quarter_day","text":"year-quarter-day vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_quarter_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to year-quarter-day — as_year_quarter_day","text":"","code":"# From Date as_year_quarter_day(as.Date(\"2019-01-01\")) #> <year_quarter_day<January><day>[1]> #> [1] \"2019-Q1-01\" as_year_quarter_day(as.Date(\"2019-01-01\"), start = 3) #> <year_quarter_day<March><day>[1]> #> [1] \"2019-Q4-32\"  # From POSIXct, which assumes that the naive time is what should be converted as_year_quarter_day(as.POSIXct(\"2019-01-01 02:30:30\", \"America/New_York\")) #> <year_quarter_day<January><second>[1]> #> [1] \"2019-Q1-01T02:30:30\"  # From other calendars tuesday <- 3 as_year_quarter_day(year_month_weekday(2019, 2, tuesday, 2)) #> <year_quarter_day<January><day>[1]> #> [1] \"2019-Q1-43\"  # Converting between `start`s x <- year_quarter_day(2019, 01, 01, start = 2) x #> <year_quarter_day<February><day>[1]> #> [1] \"2019-Q1-01\"  # Default keeps the same start as_year_quarter_day(x) #> <year_quarter_day<February><day>[1]> #> [1] \"2019-Q1-01\"  # But you can change it as_year_quarter_day(x, start = 1) #> <year_quarter_day<January><day>[1]> #> [1] \"2018-Q1-32\""},{"path":"https://clock.r-lib.org/dev/reference/as_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to year-week-day — as_year_week_day","title":"Convert to year-week-day — as_year_week_day","text":"as_year_week_day() converts vector year-week-day calendar. Time points, Dates, POSIXct, calendars can converted year-week-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to year-week-day — as_year_week_day","text":"","code":"as_year_week_day(x, ..., start = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/as_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to year-week-day — as_year_week_day","text":"x [vector] vector convert year-week-day. ... dots future extensions must empty. start [integer(1) / NULL] day consider start week. 1 = Sunday 7 = Saturday. NULL: x year-week-day, returned . Otherwise, start Sunday used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to year-week-day — as_year_week_day","text":"year-week-day vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to year-week-day — as_year_week_day","text":"","code":"# From Date as_year_week_day(as.Date(\"2019-01-01\")) #> <year_week_day<Sunday><day>[1]> #> [1] \"2019-W01-3\" as_year_week_day(as.Date(\"2019-01-01\"), start = clock_weekdays$monday) #> <year_week_day<Monday><day>[1]> #> [1] \"2019-W01-2\"  # From POSIXct, which assumes that the naive time is what should be converted as_year_week_day(as.POSIXct(\"2019-01-01 02:30:30\", \"America/New_York\")) #> <year_week_day<Sunday><second>[1]> #> [1] \"2019-W01-3T02:30:30\"  # From other calendars as_year_week_day(year_quarter_day(2019, quarter = 2, day = 50)) #> <year_week_day<Sunday><day>[1]> #> [1] \"2019-W21-2\""},{"path":"https://clock.r-lib.org/dev/reference/as_zoned_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a zoned-time — as_zoned_time","title":"Convert to a zoned-time — as_zoned_time","text":"as_zoned_time() converts x zoned-time. generally convert zoned time either sys-time naive time. documented page: sys-time naive-time also convenience methods converting zoned time native R date date-time types: dates (Date) date-times (POSIXct / POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_zoned_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a zoned-time — as_zoned_time","text":"","code":"as_zoned_time(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/as_zoned_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a zoned-time — as_zoned_time","text":"x [object] object convert zoned-time. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_zoned_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a zoned-time — as_zoned_time","text":"zoned-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/as_zoned_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a zoned-time — as_zoned_time","text":"","code":"x <- as.Date(\"2019-01-01\") as_zoned_time(x, \"Europe/London\") #> <zoned_time<second><Europe/London>[1]> #> [1] \"2019-01-01T00:00:00+00:00\"  y <- as_naive_time(year_month_day(2019, 2, 1)) as_zoned_time(y, zone = \"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-02-01T00:00:00-05:00\""},{"path":"https://clock.r-lib.org/dev/reference/calendar-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: calendars — calendar-boundary","title":"Boundaries: calendars — calendar-boundary","text":"calendar_start() computes start calendar particular precision, \"start quarter\". calendar_end() computes end calendar particular precision, \"end month\". calendar_start() calendar_end(), precision x always retained. calendar help page describing precisions can compute boundary : year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: calendars — calendar-boundary","text":"","code":"calendar_start(x, precision)  calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/calendar-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: calendars — calendar-boundary","text":"x [calendar] calendar vector. precision [character(1)] precision. Allowed precisions dependent calendar used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: calendars — calendar-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: calendars — calendar-boundary","text":"","code":"# Hour precision x <- year_month_day(2019, 2:4, 5, 6) x #> <year_month_day<hour>[3]> #> [1] \"2019-02-05T06\" \"2019-03-05T06\" \"2019-04-05T06\"  # Compute the start of the month calendar_start(x, \"month\") #> <year_month_day<hour>[3]> #> [1] \"2019-02-01T00\" \"2019-03-01T00\" \"2019-04-01T00\"  # Or the end of the month, notice that the hour value is adjusted as well calendar_end(x, \"month\") #> <year_month_day<hour>[3]> #> [1] \"2019-02-28T23\" \"2019-03-31T23\" \"2019-04-30T23\""},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: calendars — calendar-count-between","title":"Counting: calendars — calendar-count-between","text":"calendar_count_between() counts number precision units start end (.e., number years months). count corresponds whole number units, never return fractional value. suitable , say, computing whole number years months two calendar dates, accounting day time day. calendar help page describing precisions can count : year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: calendars — calendar-count-between","text":"","code":"calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: calendars — calendar-count-between","text":"start, end [clock_calendar] pair calendar vectors. recycled common size. precision [character(1)] precision. Allowed precisions dependent calendar used. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: calendars — calendar-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":"comparison-direction","dir":"Reference","previous_headings":"","what":"Comparison Direction","title":"Counting: calendars — calendar-count-between","text":"computed count property start <= end, start + <count> <= end. Similarly, start >= end, start + <count> >= end. words, comparison direction start end never change adding count start. makes function useful repeated count computations increasingly fine precisions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: calendars — calendar-count-between","text":"","code":"# Number of whole years between these dates x <- year_month_day(2000, 01, 05) y <- year_month_day(2005, 01, 04:06)  # Note that `2000-01-05 -> 2005-01-04` is only 4 full years calendar_count_between(x, y, \"year\") #> [1] 4 5 5"},{"path":"https://clock.r-lib.org/dev/reference/calendar_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group calendar components — calendar_group","title":"Group calendar components — calendar_group","text":"calendar_group() groups multiple specified precision. Grouping alters value single component (.e. month component grouping month). Components precise precision grouped dropped altogether (.e. day component dropped grouping month). calendar help page describing grouping process detail: year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group calendar components — calendar_group","text":"","code":"calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group calendar components — calendar_group","text":"x [calendar] calendar vector. precision [character(1)] precision. Allowed precisions dependent calendar used. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group calendar components — calendar_group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group calendar components — calendar_group","text":"","code":"# See the calendar specific help pages for more examples x <- year_month_day(2019, c(1, 1, 2, 2, 3, 3, 4, 4), 1:8) x #> <year_month_day<day>[8]> #> [1] \"2019-01-01\" \"2019-01-02\" \"2019-02-03\" \"2019-02-04\" \"2019-03-05\" #> [6] \"2019-03-06\" \"2019-04-07\" \"2019-04-08\"  # Group by two months calendar_group(x, \"month\", n = 2) #> <year_month_day<month>[8]> #> [1] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-03\" \"2019-03\" #> [7] \"2019-03\" \"2019-03\"  # Group by two days of the month calendar_group(x, \"day\", n = 2) #> <year_month_day<day>[8]> #> [1] \"2019-01-01\" \"2019-01-01\" \"2019-02-03\" \"2019-02-03\" \"2019-03-05\" #> [6] \"2019-03-05\" \"2019-04-07\" \"2019-04-07\""},{"path":"https://clock.r-lib.org/dev/reference/calendar_leap_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the calendar year a leap year? — calendar_leap_year","title":"Is the calendar year a leap year? — calendar_leap_year","text":"calendar_leap_year() detects calendar year leap year - .e. contain one extra components years? particular year leap year : year_month_day(): February 29 days. year_month_weekday(): February weekday occurs 5 times. year_week_day(): 53 weeks year, resulting 371 days year. iso_year_week_day(): 53 weeks year, resulting 371 days year. year_quarter_day(): One quarters 1 day normal (quarter extra day depends start used, always particular start). aligns Gregorian leap years starts except February, case leap year always 1 year Gregorian leap year. year_day(): 366 days year.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_leap_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the calendar year a leap year? — calendar_leap_year","text":"","code":"calendar_leap_year(x)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_leap_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the calendar year a leap year? — calendar_leap_year","text":"x [calendar] calendar type detect leap years .","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_leap_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the calendar year a leap year? — calendar_leap_year","text":"logical vector size x. Returns TRUE leap year, FALSE leap year, NA x NA.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_leap_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is the calendar year a leap year? — calendar_leap_year","text":"","code":"x <- year_month_day(c(2019:2024, NA)) calendar_leap_year(x) #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE    NA  # For year-quarter-day, the leap year typically aligns with the Gregorian # leap year, unless the `start` is February, in which case the leap year is # always 1 year after the Gregorian leap year x <- year_quarter_day(2020:2021, start = clock_months$january) calendar_leap_year(x) #> [1]  TRUE FALSE  x <- year_quarter_day(2020:2021, start = clock_months$february) calendar_leap_year(x) #> [1] FALSE  TRUE  # With a January start, 2020 has the extra day get_day(year_quarter_day(2020, 1:4, \"last\", start = clock_months$january)) #> [1] 91 91 92 92 get_day(year_quarter_day(2021, 1:4, \"last\", start = clock_months$january)) #> [1] 90 91 92 92 get_day(year_quarter_day(2022, 1:4, \"last\", start = clock_months$january)) #> [1] 90 91 92 92  # With a February start, 2021 has the extra day get_day(year_quarter_day(2020, 1:4, \"last\", start = clock_months$february)) #> [1] 89 92 92 92 get_day(year_quarter_day(2021, 1:4, \"last\", start = clock_months$february)) #> [1] 90 92 92 92 get_day(year_quarter_day(2022, 1:4, \"last\", start = clock_months$february)) #> [1] 89 92 92 92"},{"path":"https://clock.r-lib.org/dev/reference/calendar_month_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a calendar to an ordered factor of month names — calendar_month_factor","title":"Convert a calendar to an ordered factor of month names — calendar_month_factor","text":"calendar_month_factor() extracts month values calendar converts ordered factor month names. can useful combination ggplot2, modeling. function relevant calendar types use month field, .e. year_month_day() year_month_weekday(). calendar type must least month precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_month_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a calendar to an ordered factor of month names — calendar_month_factor","text":"","code":"calendar_month_factor(x, ..., labels = \"en\", abbreviate = FALSE)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_month_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a calendar to an ordered factor of month names — calendar_month_factor","text":"x [calendar] calendar vector. ... dots future extensions must empty. labels [clock_labels / character(1)] Character representations localized weekday names, month names, /PM names. Either language code string (passed clock_labels_lookup()), object created clock_labels(). abbreviate [logical(1)] TRUE, abbreviated month names labels used. FALSE, full month names labels used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_month_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a calendar to an ordered factor of month names — calendar_month_factor","text":"ordered factor representing months.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_month_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a calendar to an ordered factor of month names — calendar_month_factor","text":"","code":"x <- year_month_day(2019, 1:12)  calendar_month_factor(x) #>  [1] January   February  March     April     May       June      #>  [7] July      August    September October   November  December  #> 12 Levels: January < February < March < April < May < ... < December calendar_month_factor(x, abbreviate = TRUE) #>  [1] Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < ... < Dec calendar_month_factor(x, labels = \"fr\") #>  [1] janvier   février   mars      avril     mai       juin      #>  [7] juillet   août      septembre octobre   novembre  décembre  #> 12 Levels: janvier < février < mars < avril < mai < ... < décembre"},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a calendar to a less precise precision — calendar_narrow","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"calendar_narrow() narrows x specified precision. dropping components represent precision finer precision. calendar help page describing precisions can narrow : year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"","code":"calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"x [calendar] calendar vector. precision [character(1)] precision. Allowed precisions dependent calendar used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"subsecond precision x narrowed another subsecond precision. narrow , say, \"nanosecond\" \"millisecond\" precision. clock operates philosophy set subsecond precision calendar, \"locked \" precision. expected use integer division divide nanoseconds 1e6 get millisecond precision, probably want convert time point first, use time_point_floor().","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a calendar to a less precise precision — calendar_narrow","text":"","code":"# Hour precision x <- year_month_day(2019, 1, 3, 4) x #> <year_month_day<hour>[1]> #> [1] \"2019-01-03T04\"  # Narrowed to day precision calendar_narrow(x, \"day\") #> <year_month_day<day>[1]> #> [1] \"2019-01-03\"  # Or month precision calendar_narrow(x, \"month\") #> <year_month_day<month>[1]> #> [1] \"2019-01\""},{"path":"https://clock.r-lib.org/dev/reference/calendar_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision: calendar — calendar_precision","title":"Precision: calendar — calendar_precision","text":"calendar_precision() extracts precision calendar object. returns precision single string.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision: calendar — calendar_precision","text":"","code":"calendar_precision(x)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision: calendar — calendar_precision","text":"x [clock_calendar] calendar.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision: calendar — calendar_precision","text":"single string holding precision calendar.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision: calendar — calendar_precision","text":"","code":"calendar_precision(year_month_day(2019)) #> [1] \"year\" calendar_precision(year_month_day(2019, 1, 1)) #> [1] \"day\" calendar_precision(year_quarter_day(2019, 3)) #> [1] \"quarter\""},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Spanning sequence: calendars — calendar_spanning_seq","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"calendar_spanning_seq() generates regular sequence along span x, .e. along [min(x), max(x)]. sequence generated precision x. Importantly, sequences can generated underlying seq() method calendar question supports value precision x. example, compute day precision spanning sequence year_month_day() calendar (can compute year month one). create day precision sequence, convert time-point first. See individual seq() method documentation learn precisions allowed.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"","code":"calendar_spanning_seq(x)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"x [clock_calendar] calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"sequence along [min(x), max(x)].","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"Missing values automatically removed sequence generated. need precise sequence generation, call range() seq() directly.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_spanning_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spanning sequence: calendars — calendar_spanning_seq","text":"","code":"x <- year_month_day(c(2019, 2022, 2020), c(2, 5, 3)) x #> <year_month_day<month>[3]> #> [1] \"2019-02\" \"2022-05\" \"2020-03\"  # Month precision spanning sequence calendar_spanning_seq(x) #> <year_month_day<month>[40]> #>  [1] \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\" \"2019-06\" \"2019-07\" #>  [7] \"2019-08\" \"2019-09\" \"2019-10\" \"2019-11\" \"2019-12\" \"2020-01\" #> [13] \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" \"2020-07\" #> [19] \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\" \"2021-01\" #> [25] \"2021-02\" \"2021-03\" \"2021-04\" \"2021-05\" \"2021-06\" \"2021-07\" #> [31] \"2021-08\" \"2021-09\" \"2021-10\" \"2021-11\" \"2021-12\" \"2022-01\" #> [37] \"2022-02\" \"2022-03\" \"2022-04\" \"2022-05\"  # Quarter precision: x <- year_quarter_day(c(2005, 2006, 2003), c(4, 2, 3)) calendar_spanning_seq(x) #> <year_quarter_day<January><quarter>[12]> #>  [1] \"2003-Q3\" \"2003-Q4\" \"2004-Q1\" \"2004-Q2\" \"2004-Q3\" \"2004-Q4\" #>  [7] \"2005-Q1\" \"2005-Q2\" \"2005-Q3\" \"2005-Q4\" \"2006-Q1\" \"2006-Q2\"  # Can't generate sequences if `seq()` doesn't allow the precision x <- year_month_day(2019, c(1, 2, 1), c(20, 3, 25)) try(calendar_spanning_seq(x)) #> Error in seq(from = from, to = to, by = 1L) :  #>   `from` must be 'year' or 'month' precision.  # Generally this means you need to convert to a time point and use # `time_point_spanning_seq()` instead time_point_spanning_seq(as_sys_time(x)) #> <sys_time<day>[15]> #>  [1] \"2019-01-20\" \"2019-01-21\" \"2019-01-22\" \"2019-01-23\" \"2019-01-24\" #>  [6] \"2019-01-25\" \"2019-01-26\" \"2019-01-27\" \"2019-01-28\" \"2019-01-29\" #> [11] \"2019-01-30\" \"2019-01-31\" \"2019-02-01\" \"2019-02-02\" \"2019-02-03\""},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen a calendar to a more precise precision — calendar_widen","title":"Widen a calendar to a more precise precision — calendar_widen","text":"calendar_widen() widens x specified precision. setting new components smallest value. calendar help page describing precisions can widen : year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen a calendar to a more precise precision — calendar_widen","text":"","code":"calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen a calendar to a more precise precision — calendar_widen","text":"x [calendar] calendar vector. precision [character(1)] precision. Allowed precisions dependent calendar used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen a calendar to a more precise precision — calendar_widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Widen a calendar to a more precise precision — calendar_widen","text":"subsecond precision x widened. widen , say, \"millisecond\" \"nanosecond\" precision. clock operates philosophy set subsecond precision calendar, \"locked \" precision. expected multiply milliseconds 1e6 get nanosecond precision, probably want convert time point first, use time_point_cast(). Generally, clock treats calendars specific precision range values. example, month precision year-month-day treated range [yyyy-mm-01, yyyy-mm-last], assumption day month. However, occasionally useful quickly widen calendar, assuming want beginning range used component. calendar_widen() can come handy.","code":""},{"path":"https://clock.r-lib.org/dev/reference/calendar_widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen a calendar to a more precise precision — calendar_widen","text":"","code":"# Month precision x <- year_month_day(2019, 1) x #> <year_month_day<month>[1]> #> [1] \"2019-01\"  # Widen to day precision calendar_widen(x, \"day\") #> <year_month_day<day>[1]> #> [1] \"2019-01-01\"  # Or second precision calendar_widen(x, \"second\") #> <year_month_day<second>[1]> #> [1] \"2019-01-01T00:00:00\""},{"path":"https://clock.r-lib.org/dev/reference/clock-arith.html","id":null,"dir":"Reference","previous_headings":"","what":"Support for vctrs arithmetic — vec_arith.clock_year_day","title":"Support for vctrs arithmetic — vec_arith.clock_year_day","text":"Support vctrs arithmetic","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support for vctrs arithmetic — vec_arith.clock_year_day","text":"","code":"# S3 method for class 'clock_year_day' vec_arith(op, x, y, ...)  # S3 method for class 'clock_year_month_day' vec_arith(op, x, y, ...)  # S3 method for class 'clock_year_month_weekday' vec_arith(op, x, y, ...)  # S3 method for class 'clock_iso_year_week_day' vec_arith(op, x, y, ...)  # S3 method for class 'clock_naive_time' vec_arith(op, x, y, ...)  # S3 method for class 'clock_year_quarter_day' vec_arith(op, x, y, ...)  # S3 method for class 'clock_sys_time' vec_arith(op, x, y, ...)  # S3 method for class 'clock_year_week_day' vec_arith(op, x, y, ...)  # S3 method for class 'clock_weekday' vec_arith(op, x, y, ...)"},{"path":"https://clock.r-lib.org/dev/reference/clock-arith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support for vctrs arithmetic — vec_arith.clock_year_day","text":"op arithmetic operator string x, y pair vectors. !, unary + unary -, y sentinel object class MISSING, created MISSING(). ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Support for vctrs arithmetic — vec_arith.clock_year_day","text":"result arithmetic operation.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Support for vctrs arithmetic — vec_arith.clock_year_day","text":"","code":"vctrs::vec_arith(\"+\", year_month_day(2019), 1) #> <year_month_day<year>[1]> #> [1] \"2020\""},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Clock arithmetic — clock-arithmetic","title":"Clock arithmetic — clock-arithmetic","text":"landing page clock arithmetic functions. specific sub-pages describing arithmetic works different calendars time points, look information. Calendars efficient arithmetic irregular units time, month, quarters, years. year-month-day year-month-weekday year-quarter-day year-week-day iso-year-week-day year-day Time points, naive-times sys-times, efficient arithmetic regular, well-defined units time, days, hours, seconds, nanoseconds. time-point Durations can use arithmetic functions, return new duration precision corresponding common type input function used. duration Weekdays can perform day-based circular arithmetic. weekday also convenience methods arithmetic directly native R date date-time type: dates (Date) date-times (POSIXct / POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clock arithmetic — clock-arithmetic","text":"","code":"add_years(x, n, ...)  add_quarters(x, n, ...)  add_months(x, n, ...)  add_weeks(x, n, ...)  add_days(x, n, ...)  add_hours(x, n, ...)  add_minutes(x, n, ...)  add_seconds(x, n, ...)  add_milliseconds(x, n, ...)  add_microseconds(x, n, ...)  add_nanoseconds(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clock arithmetic — clock-arithmetic","text":"x [object] object. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clock arithmetic — clock-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clock arithmetic — clock-arithmetic","text":"x n recycled using tidyverse recycling rules. Months years considered \"irregular\" months days others (28, 29, 30, 31), years days others (365 366). Days considered \"regular\" defined 86,400 seconds.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clock arithmetic — clock-arithmetic","text":"","code":"# See each sub-page for more specific examples x <- year_month_day(2019, 2, 1) add_months(x, 1) #> <year_month_day<day>[1]> #> [1] \"2019-03-01\""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer codes — clock-codes","title":"Integer codes — clock-codes","text":"Objects useful mappings month names weekday names integer codes.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"month-codes-clock-months-","dir":"Reference","previous_headings":"","what":"Month codes (clock_months)","title":"Integer codes — clock-codes","text":"january == 1 february == 2 march == 3 april == 4 may == 5 june == 6 july == 7 august == 8 september == 9 october == 10 november == 11 december == 12","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"weekday-codes-clock-weekdays-","dir":"Reference","previous_headings":"","what":"Weekday codes (clock_weekdays)","title":"Integer codes — clock-codes","text":"sunday == 1 monday == 2 tuesday == 3 wednesday == 4 thursday == 5 friday == 6 saturday == 7","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"iso-weekday-codes-clock-iso-weekdays-","dir":"Reference","previous_headings":"","what":"ISO weekday codes (clock_iso_weekdays)","title":"Integer codes — clock-codes","text":"monday == 1 tuesday == 2 wednesday == 3 thursday == 4 friday == 5 saturday == 6 sunday == 7","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer codes — clock-codes","text":"","code":"clock_months  clock_weekdays  clock_iso_weekdays"},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Integer codes — clock-codes","text":"clock_months: environment containing month codes. clock_weekdays: environment containing weekday codes. clock_iso_weekdays: environment containing ISO weekday codes.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer codes — clock-codes","text":"","code":"weekday(clock_weekdays$wednesday) #> <weekday[1]> #> [1] Wed  year_month_weekday(2019, clock_months$april, clock_weekdays$monday, 1:4) #> <year_month_weekday<day>[4]> #> [1] \"2019-04-Mon[1]\" \"2019-04-Mon[2]\" \"2019-04-Mon[3]\" \"2019-04-Mon[4]\"  year_week_day(2020, 52, start = clock_weekdays$monday) #> <year_week_day<Monday><week>[1]> #> [1] \"2020-W52\"  iso_year_week_day(2020, 52, clock_iso_weekdays$thursday) #> <iso_year_week_day<day>[1]> #> [1] \"2020-W52-4\""},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar getters — clock-getters","title":"Calendar getters — clock-getters","text":"family functions extract fields calendar vector. calendar set supported getters, documented help page: year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day also convenience methods extracting certain components directly R's native date date-time types. dates (Date) date-times (POSIXct / POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar getters — clock-getters","text":"","code":"get_year(x)  get_quarter(x)  get_month(x)  get_week(x)  get_day(x)  get_hour(x)  get_minute(x)  get_second(x)  get_millisecond(x)  get_microsecond(x)  get_nanosecond(x)  get_index(x)"},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar getters — clock-getters","text":"x [object] object get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar getters — clock-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar getters — clock-getters","text":"extract components directly time point type, sys-time naive-time. Convert calendar type first. Similarly, zoned-time must converted either sys-time naive-time, calendar type, able extract components .","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar getters — clock-getters","text":"","code":"x <- year_month_day(2019, 1:3, 5:7, 1, 20, 30) get_month(x) #> [1] 1 2 3 get_day(x) #> [1] 5 6 7 get_second(x) #> [1] 30 30 30"},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":null,"dir":"Reference","previous_headings":"","what":"Invalid calendar dates — clock-invalid","title":"Invalid calendar dates — clock-invalid","text":"family functions working invalid calendar dates. Invalid dates represent dates made valid individual components, taken whole represent valid calendar dates. example, year_month_day() following component ranges valid: year: [-32767, 32767], month: [1, 12], day: [1, 31]. However, date 2019-02-31 exist even though made valid components. example invalid date. Invalid dates allowed clock, provided eventually resolved using invalid_resolve() manually resolving arithmetic setter functions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invalid calendar dates — clock-invalid","text":"","code":"invalid_detect(x)  invalid_any(x)  invalid_count(x)  invalid_remove(x)  invalid_resolve(x, ..., invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invalid calendar dates — clock-invalid","text":"x [calendar] calendar vector. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invalid calendar dates — clock-invalid","text":"invalid_detect(): Returns logical vector detecting invalid dates. invalid_any(): Returns TRUE invalid dates detected. invalid_count(): Returns single integer containing number invalid dates. invalid_remove(): Returns x invalid dates removed. invalid_resolve(): Returns x invalid dates resolved using invalid strategy.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invalid calendar dates — clock-invalid","text":"Invalid dates must resolved converting time point. recommended use \"previous\" \"next\" resolving invalid dates, ensure relative ordering among x maintained. often important property maintain time series data analysis. See examples information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-invalid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invalid calendar dates — clock-invalid","text":"","code":"# Invalid date x <- year_month_day(2019, 04, 30:31, c(3, 2), 30, 00) x #> <year_month_day<second>[2]> #> [1] \"2019-04-30T03:30:00\" \"2019-04-31T02:30:00\"  invalid_detect(x) #> [1] FALSE  TRUE  # Previous valid moment in time x_previous <- invalid_resolve(x, invalid = \"previous\") x_previous #> <year_month_day<second>[2]> #> [1] \"2019-04-30T03:30:00\" \"2019-04-30T23:59:59\"  # Previous valid day, retaining time of day x_previous_day <- invalid_resolve(x, invalid = \"previous-day\") x_previous_day #> <year_month_day<second>[2]> #> [1] \"2019-04-30T03:30:00\" \"2019-04-30T02:30:00\"  # Note that `\"previous\"` retains the relative ordering in `x` x[1] < x[2] #> [1] TRUE x_previous[1] < x_previous[2] #> [1] TRUE  # But `\"previous-day\"` here does not! x_previous_day[1] < x_previous_day[2] #> [1] FALSE  # Remove invalid dates entirely invalid_remove(x) #> <year_month_day<second>[1]> #> [1] \"2019-04-30T03:30:00\"  y <- year_quarter_day(2019, 1, 90:92) y #> <year_quarter_day<January><day>[3]> #> [1] \"2019-Q1-90\" \"2019-Q1-91\" \"2019-Q1-92\"  # Overflow rolls forward by the number of days between `y` and the previous # valid date invalid_resolve(y, invalid = \"overflow\") #> <year_quarter_day<January><day>[3]> #> [1] \"2019-Q1-90\" \"2019-Q2-01\" \"2019-Q2-02\""},{"path":"https://clock.r-lib.org/dev/reference/clock-package.html","id":null,"dir":"Reference","previous_headings":"","what":"clock: Date-Time Types and Tools — clock-package","title":"clock: Date-Time Types and Tools — clock-package","text":"Provides comprehensive library date-time manipulations using new family orthogonal date-time classes (durations, time points, zoned-times, calendars) partition responsibilities complexities time zones considered really needed. Capabilities include: date-time parsing, formatting, arithmetic, extraction updating components, rounding.","code":""},{"path":[]},{"path":"https://clock.r-lib.org/dev/reference/clock-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"clock: Date-Time Types and Tools — clock-package","text":"Maintainer: Davis Vaughan davis@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar setters — clock-setters","title":"Calendar setters — clock-setters","text":"family functions sets fields calendar vector. calendar set supported setters, documented help page: year-month-day year-month-weekday year-week-day iso-year-week-day year-quarter-day year-day also convenience methods setting certain components directly R's native date date-time types. dates (Date) date-times (POSIXct / POSIXlt) general rules setting components calendar types: can set components relevant calendar type working . example, set quarter year-month-day type. convert year-quarter-day first. can set component current precision, one level precision precise current precision. example, can set day field month precision year-month-day type, hour field. Setting component can result invalid date, set_day(year_month_day(2019, 02), 31), long eventually resolved either manually strategy invalid_resolve(). sub-second precisions, can set component corresponding precision . example, can set nanoseconds second nanosecond precision, milliseconds.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar setters — clock-setters","text":"","code":"set_year(x, value, ...)  set_quarter(x, value, ...)  set_month(x, value, ...)  set_week(x, value, ...)  set_day(x, value, ...)  set_hour(x, value, ...)  set_minute(x, value, ...)  set_second(x, value, ...)  set_millisecond(x, value, ...)  set_microsecond(x, value, ...)  set_nanosecond(x, value, ...)  set_index(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar setters — clock-setters","text":"x [object] object set component . value [integer] value set component . ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar setters — clock-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar setters — clock-setters","text":"set components directly time point type, sys-time naive-time. Convert calendar type first. Similarly, zoned-time must converted either sys-time naive-time, calendar type, able set components .","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar setters — clock-setters","text":"","code":"x <- year_month_day(2019, 1:3)  # Set the day set_day(x, 12:14) #> <year_month_day<day>[3]> #> [1] \"2019-01-12\" \"2019-02-13\" \"2019-03-14\"  # Set to the \"last\" day of the month set_day(x, \"last\") #> <year_month_day<day>[3]> #> [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\""},{"path":"https://clock.r-lib.org/dev/reference/clock_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or retrieve date related labels — clock_labels","title":"Create or retrieve date related labels — clock_labels","text":"parsing formatting dates, often need know weekdays week months represented text. functions allow either create labels, look standard set language specific labels. standard list derived ICU (https://unicode-org.github.io/icu/) via stringi package. clock_labels_lookup() looks set labels given language code. clock_labels_languages() lists language codes accepted. clock_labels() lets create set labels. Use currently supported languages meet needs.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or retrieve date related labels — clock_labels","text":"","code":"clock_labels(   month,   month_abbrev = month,   weekday,   weekday_abbrev = weekday,   am_pm )  clock_labels_lookup(language)  clock_labels_languages()"},{"path":"https://clock.r-lib.org/dev/reference/clock_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or retrieve date related labels — clock_labels","text":"month, month_abbrev [character(12)] Full abbreviated month names. Starts January. weekday, weekday_abbrev [character(7)] Full abbreviated weekday names. Starts Sunday. am_pm [character(2)] Names used PM. language [character(1)] BCP 47 locale, generally constructed two three digit language code. See clock_labels_languages() complete list available locales.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or retrieve date related labels — clock_labels","text":"\"clock_labels\" object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or retrieve date related labels — clock_labels","text":"","code":"clock_labels_lookup(\"en\") #> <clock_labels> #> Weekdays: Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), #>           Thursday (Thu), Friday (Fri), Saturday (Sat) #> Months:   January (Jan), February (Feb), March (Mar), April (Apr), May #>           (May), June (Jun), July (Jul), August (Aug), #>           September (Sep), October (Oct), November (Nov), #>           December (Dec) #> AM/PM:    AM/PM clock_labels_lookup(\"ko\") #> <clock_labels> #> Weekdays: 일요일 (일), 월요일 (월), 화요일 (화), 수요일 (수), 목요일 #>           (목), 금요일 (금), 토요일 (토) #> Months:   1월, 2월, 3월, 4월, 5월, 6월, 7월, 8월, 9월, 10월, 11월, 12월 #> AM/PM:    오전/오후 clock_labels_lookup(\"fr\") #> <clock_labels> #> Weekdays: dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), #>           jeudi (jeu.), vendredi (ven.), samedi (sam.) #> Months:   janvier (janv.), février (févr.), mars (mars), avril (avr.), #>           mai (mai), juin (juin), juillet (juil.), août #>           (août), septembre (sept.), octobre (oct.), novembre #>           (nov.), décembre (déc.) #> AM/PM:    AM/PM"},{"path":"https://clock.r-lib.org/dev/reference/clock_locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a clock locale — clock_locale","title":"Create a clock locale — clock_locale","text":"clock locale contains information required format parse dates. defaults chosen match US English. clock locale object can provided format() methods parse functions (like year_month_day_parse()) override defaults.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_locale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a clock locale — clock_locale","text":"","code":"clock_locale(labels = \"en\", decimal_mark = \".\")"},{"path":"https://clock.r-lib.org/dev/reference/clock_locale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a clock locale — clock_locale","text":"labels [clock_labels / character(1)] Character representations localized weekday names, month names, /PM names. Either language code string (passed clock_labels_lookup()), object created clock_labels(). decimal_mark [character(1)] Symbol used decimal place formatting sub-second date-times. Either \",\" \".\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_locale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a clock locale — clock_locale","text":"\"clock_locale\" object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/clock_locale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a clock locale — clock_locale","text":"","code":"clock_locale() #> <clock_locale> #> Decimal Mark: . #> <clock_labels> #> Weekdays: Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), #>           Thursday (Thu), Friday (Fri), Saturday (Sat) #> Months:   January (Jan), February (Feb), March (Mar), April (Apr), May #>           (May), June (Jun), July (Jul), August (Aug), #>           September (Sep), October (Oct), November (Nov), #>           December (Dec) #> AM/PM:    AM/PM clock_locale(labels = \"fr\") #> <clock_locale> #> Decimal Mark: . #> <clock_labels> #> Weekdays: dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), #>           jeudi (jeu.), vendredi (ven.), samedi (sam.) #> Months:   janvier (janv.), février (févr.), mars (mars), avril (avr.), #>           mai (mai), juin (juin), juillet (juil.), août #>           (août), septembre (sept.), octobre (oct.), novembre #>           (nov.), décembre (déc.) #> AM/PM:    AM/PM"},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: date and date-time — date-and-date-time-boundary","title":"Boundaries: date and date-time — date-and-date-time-boundary","text":"date_start() computes date start particular precision, \"start year\". date_end() computes date end particular precision, \"end month\". separate help pages computing boundaries dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: date and date-time — date-and-date-time-boundary","text":"","code":"date_start(x, precision, ...)  date_end(x, precision, ...)"},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: date and date-time — date-and-date-time-boundary","text":"x [Date / POSIXct / POSIXlt] date date-time vector. precision [character(1)] precision. Allowed precisions dependent input used. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: date and date-time — date-and-date-time-boundary","text":"x components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: date and date-time — date-and-date-time-boundary","text":"","code":"# See type specific documentation for more examples  x <- date_build(2019, 2:4)  date_end(x, \"month\") #> [1] \"2019-02-28\" \"2019-03-31\" \"2019-04-30\"  x <- date_time_build(2019, 2:4, 3:5, 4, 5, zone = \"America/New_York\")  # Note that the hour, minute, and second components are also adjusted date_end(x, \"month\") #> [1] \"2019-02-28 23:59:59 EST\" \"2019-03-31 23:59:59 EDT\" #> [3] \"2019-04-30 23:59:59 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Date and date-time rounding — date-and-date-time-rounding","title":"Date and date-time rounding — date-and-date-time-rounding","text":"date_floor() rounds date date-time multiple specified precision. date_ceiling() rounds date date-time multiple specified precision. date_round() rounds depending closer, rounding ties. separate help pages rounding dates date-times: dates (Date) date-times (POSIXct/POSIXlt) functions round underlying duration , relative origin. example, rounding 15 hours construct groups 15 hours, starting origin, defaults naive time 1970-01-01 00:00:00. want group components, \"day month\", see date_group().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date and date-time rounding — date-and-date-time-rounding","text":"","code":"date_floor(x, precision, ..., n = 1L, origin = NULL)  date_ceiling(x, precision, ..., n = 1L, origin = NULL)  date_round(x, precision, ..., n = 1L, origin = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date and date-time rounding — date-and-date-time-rounding","text":"x [Date / POSIXct / POSIXlt] date date-time vector. precision [character(1)] precision. Allowed precisions dependent input used. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use. origin [Date(1) / POSIXct(1) / POSIXlt(1) / NULL] origin start counting . default origin midnight 1970-01-01 time zone x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date and date-time rounding — date-and-date-time-rounding","text":"x rounded specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date and date-time rounding — date-and-date-time-rounding","text":"","code":"# See the type specific documentation for more examples  x <- as.Date(\"2019-03-31\") + 0:5 x #> [1] \"2019-03-31\" \"2019-04-01\" \"2019-04-02\" \"2019-04-03\" \"2019-04-04\" #> [6] \"2019-04-05\"  # Flooring by 2 days, note that this is not tied to the current month, # and instead counts from the specified `origin`. date_floor(x, \"day\", n = 2) #> [1] \"2019-03-31\" \"2019-03-31\" \"2019-04-02\" \"2019-04-02\" \"2019-04-04\" #> [6] \"2019-04-04\""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-shifting.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifting: date and date-time — date-and-date-time-shifting","title":"Shifting: date and date-time — date-and-date-time-shifting","text":"date_shift() shifts x target weekday. can shift next previous weekday. x currently target weekday, can choose leave alone advance next instance target. separate help pages shifting dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-shifting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifting: date and date-time — date-and-date-time-shifting","text":"","code":"date_shift(x, target, ..., which = \"next\", boundary = \"keep\")"},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-shifting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifting: date and date-time — date-and-date-time-shifting","text":"x [Date / POSIXct / POSIXlt] date date-time vector. target [weekday] weekday created weekday() target. Generally length 1, can also length x. ... dots future extensions must empty. [character(1)] One : \"next\": Shift next instance target weekday. \"previous: Shift previous instance target weekday. boundary [character(1)] One : \"keep\": x currently target weekday, return . \"advance\": x currently target weekday, advance anyways.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-shifting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifting: date and date-time — date-and-date-time-shifting","text":"x shifted target weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-and-date-time-shifting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shifting: date and date-time — date-and-date-time-shifting","text":"","code":"# See the type specific documentation for more examples  x <- as.Date(\"2019-01-01\") + 0:1  # A Tuesday and Wednesday as_weekday(x) #> <weekday[2]> #> [1] Tue Wed  monday <- weekday(clock_weekdays$monday)  # Shift to the next Monday date_shift(x, monday) #> [1] \"2019-01-07\" \"2019-01-07\""},{"path":"https://clock.r-lib.org/dev/reference/date-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: date — date-boundary","title":"Boundaries: date — date-boundary","text":"Date method date_start() date_end() generics.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: date — date-boundary","text":"","code":"# S3 method for class 'Date' date_start(x, precision, ..., invalid = NULL)  # S3 method for class 'Date' date_end(x, precision, ..., invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: date — date-boundary","text":"x [Date] date vector. precision [character(1)] One : \"year\" \"month\" \"day\" ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: date — date-boundary","text":"x components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: date — date-boundary","text":"","code":"x <- date_build(2019:2021, 2:4, 3:5) x #> [1] \"2019-02-03\" \"2020-03-04\" \"2021-04-05\"  # Last day of the month date_end(x, \"month\") #> [1] \"2019-02-28\" \"2020-03-31\" \"2021-04-30\"  # Last day of the year date_end(x, \"year\") #> [1] \"2019-12-31\" \"2020-12-31\" \"2021-12-31\"  # First day of the year date_start(x, \"year\") #> [1] \"2019-01-01\" \"2020-01-01\" \"2021-01-01\""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: date — date-count-between","title":"Counting: date — date-count-between","text":"Date method date_count_between() generic. date_count_between() counts number precision units start end (.e., number years months). count corresponds whole number units, never return fractional value. suitable , say, computing whole number years months two dates, accounting day month. Calendrical based counting: precisions convert year-month-day calendar count type. \"year\" \"quarter\" \"month\" Time point based counting: precisions convert time point count type. \"week\" \"day\" dates, whether calendar time point used important, fairly important date-times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: date — date-count-between","text":"","code":"# S3 method for class 'Date' date_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: date — date-count-between","text":"start, end [Date] pair date vectors. recycled common size. precision [character(1)] One : \"year\" \"quarter\" \"month\" \"week\" \"day\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: date — date-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting: date — date-count-between","text":"\"quarter\" equivalent \"month\" precision n set n * 3L.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"comparison-direction","dir":"Reference","previous_headings":"","what":"Comparison Direction","title":"Counting: date — date-count-between","text":"computed count property start <= end, start + <count> <= end. Similarly, start >= end, start + <count> >= end. words, comparison direction start end never change adding count start. makes function useful repeated count computations increasingly fine precisions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: date — date-count-between","text":"","code":"start <- date_parse(\"2000-05-05\") end <- date_parse(c(\"2020-05-04\", \"2020-05-06\"))  # Age in years date_count_between(start, end, \"year\") #> [1] 19 20  # Number of \"whole\" months between these dates. i.e. # `2000-05-05 -> 2020-04-05` is 239 months # `2000-05-05 -> 2020-05-05` is 240 months # Since 2020-05-04 occurs before the 5th of that month, # it gets a count of 239 date_count_between(start, end, \"month\") #> [1] 239 240  # Number of \"whole\" quarters between (same as `\"month\"` with `n * 3`) date_count_between(start, end, \"quarter\") #> [1] 79 80 date_count_between(start, end, \"month\", n = 3) #> [1] 79 80  # Number of days between date_count_between(start, end, \"day\") #> [1] 7304 7306  # Number of full 3 day periods between these two dates date_count_between(start, end, \"day\", n = 3) #> [1] 2434 2435  # Essentially the truncated value of this date_count_between(start, end, \"day\") / 3 #> [1] 2434.667 2435.333  # ---------------------------------------------------------------------------  # Breakdown into full years, months, and days between x <- start  years <- date_count_between(x, end, \"year\") x <- add_years(x, years)  months <- date_count_between(x, end, \"month\") x <- add_months(x, months)  days <- date_count_between(x, end, \"day\") x <- add_days(x, days)  data.frame(   start = start,   end = end,   years = years,   months = months,   days = days ) #>        start        end years months days #> 1 2000-05-05 2020-05-04    19     11   29 #> 2 2000-05-05 2020-05-06    20      0    1  # Note that when breaking down a date like that, you may need to # set `invalid` during intermediate calculations start <- date_build(2019, c(3, 3, 4), c(30, 31, 1)) end <- date_build(2019, 5, 05)  # These are 1 month apart (plus a few days) months <- date_count_between(start, end, \"month\")  # But adding that 1 month to `start` results in an invalid date try(add_months(start, months)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument.  # You can choose various ways to resolve this start_previous <- add_months(start, months, invalid = \"previous\") start_next <- add_months(start, months, invalid = \"next\")  days_previous <- date_count_between(start_previous, end, \"day\") days_next <- date_count_between(start_next, end, \"day\")  # Resulting in slightly different day values. # No result is \"perfect\". Choosing \"previous\" or \"next\" both result # in multiple `start` dates having the same month/day breakdown values. data.frame(   start = start,   end = end,   months = months,   days_previous = days_previous,   days_next = days_next ) #>        start        end months days_previous days_next #> 1 2019-03-30 2019-05-05      1             5         5 #> 2 2019-03-31 2019-05-05      1             5         4 #> 3 2019-04-01 2019-05-05      1             4         4"},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting: date — date-formatting","title":"Formatting: date — date-formatting","text":"Date method date_format() generic. date_format() formats date (Date) using format string. format NULL, default format \"%Y-%m-%d\" used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting: date — date-formatting","text":"","code":"# S3 method for class 'Date' date_format(x, ..., format = NULL, locale = clock_locale())"},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting: date — date-formatting","text":"x [Date] date vector. ... dots future extensions must empty. format [character(1) / NULL] NULL, default format used, depends type input. Otherwise, format string combination : Year %C: year divided 100 using floored division. result single decimal digit, prefixed 0. %y: last two decimal digits year. result single digit prefixed 0. %Y: year decimal number. result less four digits left-padded 0 four digits. Month %b, %h: locale's abbreviated month name. %B: locale's full month name. %m: month decimal number. January 01. result single digit, prefixed 0. Day %d: day month decimal number. result single decimal digit, prefixed 0. Day week %: locale's abbreviated weekday name. %: locale's full weekday name. %w: weekday decimal number (0-6), Sunday 0. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. result single digit prefixed 0. %G: ISO week-based year decimal number. result less four digits left-padded 0 four digits. %V: ISO week-based week number decimal number. result single digit, prefixed 0. %u: ISO weekday decimal number (1-7), Monday 1. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. result single digit, prefixed 0. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. result single digit, prefixed 0. Day year %j: day year decimal number. January 1 001. result less three digits, left-padded 0 three digits. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. Time day %H: hour (24-hour clock) decimal number. result single digit, prefixed 0. %: hour (12-hour clock) decimal number. result single digit, prefixed 0. %M: minute decimal number. result single digit, prefixed 0. %S: Seconds decimal number. Fractional seconds printed precision input. character decimal point localized according locale. %p: locale's equivalent /PM designations associated 12-hour clock. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Nearly equivalent %:%M:%S %p, seconds always printed second precision. Time zone %z: offset UTC ISO 8601 format. example -0430 refers 4 hours 30 minutes behind UTC. offset zero, +0000 used. modified command %Ez inserts : hour minutes, like -04:30. %Z: full time zone name. abbreviate_zone TRUE, time zone abbreviation. Miscellaneous %c: date time representation. Similar , exactly , %%b %d %H:%M:%S %Y. %%: % character. %n: newline character. %t: horizontal-tab character. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting: date — date-formatting","text":"character vector formatted input.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting: date — date-formatting","text":"Date considered naive type clock, meaning currently implied time zone, using %z %Z format commands allowed result NA.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting: date — date-formatting","text":"","code":"x <- as.Date(\"2019-01-01\")  # Default date_format(x) #> [1] \"2019-01-01\"  date_format(x, format = \"year: %Y, month: %m, day: %d\") #> [1] \"year: 2019, month: 01, day: 01\"  # With different locales date_format(x, format = \"%A, %B %d, %Y\") #> [1] \"Tuesday, January 01, 2019\" date_format(x, format = \"%A, %B %d, %Y\", locale = clock_locale(\"fr\")) #> [1] \"mardi, janvier 01, 2019\""},{"path":"https://clock.r-lib.org/dev/reference/date-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group date components — date-group","title":"Group date components — date-group","text":"Date method date_group() generic. date_group() groups single component Date, month year, day month. need group complex components, like ISO weeks, quarters, convert calendar type contains component interested grouping .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group date components — date-group","text":"","code":"# S3 method for class 'Date' date_group(x, precision, ..., n = 1L, invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group date components — date-group","text":"x [Date] date vector. precision [character(1)] One : \"year\" \"month\" \"day\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group date components — date-group","text":"x, grouped precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group date components — date-group","text":"","code":"x <- as.Date(\"2019-01-01\") + -3:5 x #> [1] \"2018-12-29\" \"2018-12-30\" \"2018-12-31\" \"2019-01-01\" \"2019-01-02\" #> [6] \"2019-01-03\" \"2019-01-04\" \"2019-01-05\" \"2019-01-06\"  # Group by 2 days of the current month. # Note that this resets at the beginning of the month, creating day groups # of [29, 30] [31] [01, 02] [03, 04]. date_group(x, \"day\", n = 2) #> [1] \"2018-12-29\" \"2018-12-29\" \"2018-12-31\" \"2019-01-01\" \"2019-01-01\" #> [6] \"2019-01-03\" \"2019-01-03\" \"2019-01-05\" \"2019-01-05\"  # Group by month date_group(x, \"month\") #> [1] \"2018-12-01\" \"2018-12-01\" \"2018-12-01\" \"2019-01-01\" \"2019-01-01\" #> [6] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\""},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding: date — date-rounding","title":"Rounding: date — date-rounding","text":"Date methods rounding generics. date_floor() rounds date multiple specified precision. date_ceiling() rounds date multiple specified precision. date_round() rounds depending closer, rounding ties. supported rounding precisions Dates \"day\" \"week\". can group irregular periods \"month\" \"year\" using date_group().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding: date — date-rounding","text":"","code":"# S3 method for class 'Date' date_floor(x, precision, ..., n = 1L, origin = NULL)  # S3 method for class 'Date' date_ceiling(x, precision, ..., n = 1L, origin = NULL)  # S3 method for class 'Date' date_round(x, precision, ..., n = 1L, origin = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding: date — date-rounding","text":"x [Date] date vector. precision [character(1)] One : \"week\" \"day\" \"week\" alias \"day\" n * 7. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use. origin [Date(1) / NULL] origin start counting . default origin 1970-01-01.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding: date — date-rounding","text":"x rounded specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding: date — date-rounding","text":"rounding \"week\", remember origin determines \"week start\". default, 1970-01-01 implicit origin, Thursday. like round weeks different week start, just supply origin weekday interested .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding: date — date-rounding","text":"","code":"x <- as.Date(\"2019-03-31\") + 0:5 x #> [1] \"2019-03-31\" \"2019-04-01\" \"2019-04-02\" \"2019-04-03\" \"2019-04-04\" #> [6] \"2019-04-05\"  # Flooring by 2 days, note that this is not tied to the current month, # and instead counts from the specified `origin`, so groups can cross # the month boundary date_floor(x, \"day\", n = 2) #> [1] \"2019-03-31\" \"2019-03-31\" \"2019-04-02\" \"2019-04-02\" \"2019-04-04\" #> [6] \"2019-04-04\"  # Compare to `date_group()`, which groups by the day of the month date_group(x, \"day\", n = 2) #> [1] \"2019-03-31\" \"2019-04-01\" \"2019-04-01\" \"2019-04-03\" \"2019-04-03\" #> [6] \"2019-04-05\"  y <- as.Date(\"2019-01-01\") + 0:20 y #>  [1] \"2019-01-01\" \"2019-01-02\" \"2019-01-03\" \"2019-01-04\" \"2019-01-05\" #>  [6] \"2019-01-06\" \"2019-01-07\" \"2019-01-08\" \"2019-01-09\" \"2019-01-10\" #> [11] \"2019-01-11\" \"2019-01-12\" \"2019-01-13\" \"2019-01-14\" \"2019-01-15\" #> [16] \"2019-01-16\" \"2019-01-17\" \"2019-01-18\" \"2019-01-19\" \"2019-01-20\" #> [21] \"2019-01-21\"  # Flooring by week uses an implicit `origin` of 1970-01-01, which # is a Thursday date_floor(y, \"week\") #>  [1] \"2018-12-27\" \"2018-12-27\" \"2019-01-03\" \"2019-01-03\" \"2019-01-03\" #>  [6] \"2019-01-03\" \"2019-01-03\" \"2019-01-03\" \"2019-01-03\" \"2019-01-10\" #> [11] \"2019-01-10\" \"2019-01-10\" \"2019-01-10\" \"2019-01-10\" \"2019-01-10\" #> [16] \"2019-01-10\" \"2019-01-17\" \"2019-01-17\" \"2019-01-17\" \"2019-01-17\" #> [21] \"2019-01-17\" as_weekday(date_floor(y, \"week\")) #> <weekday[21]> #>  [1] Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu Thu #> [17] Thu Thu Thu Thu Thu  # If you want to round by weeks with a different week start, supply an # `origin` that falls on the weekday you care about. This uses a Monday. origin <- as.Date(\"1970-01-05\") as_weekday(origin) #> <weekday[1]> #> [1] Mon  date_floor(y, \"week\", origin = origin) #>  [1] \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" \"2018-12-31\" #>  [6] \"2018-12-31\" \"2019-01-07\" \"2019-01-07\" \"2019-01-07\" \"2019-01-07\" #> [11] \"2019-01-07\" \"2019-01-07\" \"2019-01-07\" \"2019-01-14\" \"2019-01-14\" #> [16] \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" \"2019-01-14\" #> [21] \"2019-01-21\" as_weekday(date_floor(y, \"week\", origin = origin)) #> <weekday[21]> #>  [1] Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon Mon #> [17] Mon Mon Mon Mon Mon"},{"path":"https://clock.r-lib.org/dev/reference/date-sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: date — date-sequence","title":"Sequences: date — date-sequence","text":"Date method date_seq() generic. date_seq() generates date (Date) sequence. calling date_seq(), exactly two following must specified: total_size","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: date — date-sequence","text":"","code":"# S3 method for class 'Date' date_seq(from, ..., to = NULL, by = NULL, total_size = NULL, invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date-sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: date — date-sequence","text":"[Date(1)] date start sequence . ... dots future extensions must empty. [Date(1) / NULL] date stop sequence . included result resulting sequence divides distance exactly. supplied along , components precise precision must match exactly. example, = duration_months(1), day component must match day component . ensures generated sequence , minimum, weakly monotonic sequence dates. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, equivalent duration_days(). duration, allowed precision : year quarter month week day total_size [positive integer(1) / NULL] size resulting sequence. specified alongside , must generate non-fractional sequence . invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: date — date-sequence","text":"date vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: date — date-sequence","text":"","code":"from <- date_build(2019, 1) to <- date_build(2019, 4)  # Defaults to daily sequence date_seq(from, to = to, by = 7) #>  [1] \"2019-01-01\" \"2019-01-08\" \"2019-01-15\" \"2019-01-22\" \"2019-01-29\" #>  [6] \"2019-02-05\" \"2019-02-12\" \"2019-02-19\" \"2019-02-26\" \"2019-03-05\" #> [11] \"2019-03-12\" \"2019-03-19\" \"2019-03-26\"  # Use durations to change to monthly or yearly sequences date_seq(from, to = to, by = duration_months(1)) #> [1] \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-04-01\" date_seq(from, by = duration_years(-2), total_size = 3) #> [1] \"2019-01-01\" \"2017-01-01\" \"2015-01-01\"  # Note that components of `to` more precise than the precision of `by` # must match `from` exactly. For example, this is not well defined: from <- date_build(2019, 5, 2) to <- date_build(2025, 7, 5) try(date_seq(from, to = to, by = duration_years(1))) #> Error in date_seq(from, to = to, by = duration_years(1)) :  #>   All components of `from` and `to` more precise than \"year\" must #> match. #> ℹ `from` is \"2019-05-02\". #> ℹ `to` is \"2025-07-05\".  # The month and day components of `to` must match `from` to <- date_build(2025, 5, 2) date_seq(from, to = to, by = duration_years(1)) #> [1] \"2019-05-02\" \"2020-05-02\" \"2021-05-02\" \"2022-05-02\" \"2023-05-02\" #> [6] \"2024-05-02\" \"2025-05-02\"  # ---------------------------------------------------------------------------  # Invalid dates must be resolved with the `invalid` argument from <- date_build(2019, 1, 31) to <- date_build(2019, 12, 31)  try(date_seq(from, to = to, by = duration_months(1))) #> Error in invalid_resolve(out, invalid = invalid) :  #>   Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. date_seq(from, to = to, by = duration_months(1), invalid = \"previous\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\"  # Compare this to the base R result, which is often a source of confusion seq(from, to = to, by = \"1 month\") #>  [1] \"2019-01-31\" \"2019-03-03\" \"2019-03-31\" \"2019-05-01\" \"2019-05-31\" #>  [6] \"2019-07-01\" \"2019-07-31\" \"2019-08-31\" \"2019-10-01\" \"2019-10-31\" #> [11] \"2019-12-01\" \"2019-12-31\"  # This is equivalent to the overflow invalid resolution strategy date_seq(from, to = to, by = duration_months(1), invalid = \"overflow\") #>  [1] \"2019-01-31\" \"2019-03-03\" \"2019-03-31\" \"2019-05-01\" \"2019-05-31\" #>  [6] \"2019-07-01\" \"2019-07-31\" \"2019-08-31\" \"2019-10-01\" \"2019-10-31\" #> [11] \"2019-12-01\" \"2019-12-31\"  # ---------------------------------------------------------------------------  # Usage of `to` and `total_size` must generate a non-fractional sequence # between `from` and `to` from <- date_build(2019, 1, 1) to <- date_build(2019, 1, 4)  # These are fine date_seq(from, to = to, total_size = 2) #> [1] \"2019-01-01\" \"2019-01-04\" date_seq(from, to = to, total_size = 4) #> [1] \"2019-01-01\" \"2019-01-02\" \"2019-01-03\" \"2019-01-04\"  # But this is not! try(date_seq(from, to = to, total_size = 3)) #> Error : The supplied output size does not result in a non-fractional sequence between `from` and `to`."},{"path":"https://clock.r-lib.org/dev/reference/date-shifting.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifting: date — date-shifting","title":"Shifting: date — date-shifting","text":"date_shift() shifts x target weekday. can shift next previous weekday. x currently target weekday, can choose leave alone advance next instance target. Weekday shifting one easiest ways floor week controlling considered first day week. can also accomplish origin argument date_floor(), slightly easier.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-shifting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifting: date — date-shifting","text":"","code":"# S3 method for class 'Date' date_shift(x, target, ..., which = \"next\", boundary = \"keep\")"},{"path":"https://clock.r-lib.org/dev/reference/date-shifting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifting: date — date-shifting","text":"x [Date] date vector. target [weekday] weekday created weekday() target. Generally length 1, can also length x. ... dots future extensions must empty. [character(1)] One : \"next\": Shift next instance target weekday. \"previous: Shift previous instance target weekday. boundary [character(1)] One : \"keep\": x currently target weekday, return . \"advance\": x currently target weekday, advance anyways.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-shifting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifting: date — date-shifting","text":"x shifted target weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-shifting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shifting: date — date-shifting","text":"","code":"x <- as.Date(\"2019-01-01\") + 0:1  # A Tuesday and Wednesday as_weekday(x) #> <weekday[2]> #> [1] Tue Wed  monday <- weekday(clock_weekdays$monday)  # Shift to the next Monday date_shift(x, monday) #> [1] \"2019-01-07\" \"2019-01-07\"  # Shift to the previous Monday # This is an easy way to \"floor by week\" with a target weekday in mind date_shift(x, monday, which = \"previous\") #> [1] \"2018-12-31\" \"2018-12-31\"  # What about Tuesday? tuesday <- weekday(clock_weekdays$tuesday)  # Notice that the day that was currently on a Tuesday was not shifted date_shift(x, tuesday) #> [1] \"2019-01-01\" \"2019-01-08\"  # You can force it to `\"advance\"` date_shift(x, tuesday, boundary = \"advance\") #> [1] \"2019-01-08\" \"2019-01-08\""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: date-time — date-time-parse","title":"Parsing: date-time — date-time-parse","text":"four parsers parsing strings POSIXct date-times, date_time_parse(), date_time_parse_complete(), date_time_parse_abbrev(), date_time_parse_RFC_3339().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"date-time-parse-","dir":"Reference","previous_headings":"","what":"date_time_parse()","title":"Parsing: date-time — date-time-parse","text":"date_time_parse() useful strings like \"2019-01-01 00:00:00\", UTC offset full time zone name present string. string first parsed naive-time without time zone assumptions, converted POSIXct supplied zone. converting naive-time POSIXct may result nonexistent ambiguous times due daylight saving time, must resolved explicitly nonexistent ambiguous arguments. date_time_parse() completely ignores %z %Z commands. time zone specific information used zone. default format used \"%Y-%m-%d %H:%M:%S\". matches default result calling format() POSIXct date-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"date-time-parse-complete-","dir":"Reference","previous_headings":"","what":"date_time_parse_complete()","title":"Parsing: date-time — date-time-parse","text":"date_time_parse_complete() parser complete date-time strings, like \"2019-01-01T00:00:00-05:00[America/New_York]\". complete date-time string time zone offset full time zone name string, way string contain information required unambiguously construct zoned-time. , date_time_parse_complete() requires %z %Z commands supplied format string. default format used \"%Y-%m-%dT%H:%M:%S%Ez[%Z]\". matches default result calling date_format() POSIXct date-time. Additionally, format matches de-facto standard extension RFC 3339 creating completely unambiguous date-times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"date-time-parse-abbrev-","dir":"Reference","previous_headings":"","what":"date_time_parse_abbrev()","title":"Parsing: date-time — date-time-parse","text":"date_time_parse_abbrev() parser date-time strings containing time zone abbreviation, like \"2019-01-01 00:00:00 EST\". time zone abbreviation enough identify full time zone name date-time belongs , full time zone name must supplied zone argument. However, time zone abbreviation can help resolving ambiguity around daylight saving time fallbacks. date_time_parse_abbrev(), %Z must supplied interpreted time zone abbreviation rather full time zone name. used, %z command must parse correctly, value completely ignored. default format used \"%Y-%m-%d %H:%M:%S %Z\". matches default result calling print() format(usetz = TRUE) POSIXct date-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"date-time-parse-rfc-","dir":"Reference","previous_headings":"","what":"date_time_parse_RFC_3339()","title":"Parsing: date-time — date-time-parse","text":"date_time_parse_RFC_3339() parser date-time strings extremely common date-time format outlined RFC 3339. document outlines profile ISO 8601 format even restrictive, corresponds common formats likely used internet protocols (.e. APIs). particular, function intended parse following three formats:   function defaults parsing first formats using format string \"%Y-%m-%dT%H:%M:%SZ\". date-time strings use offsets UTC rather \"Z\", set offset one following: \"%z\" offset form \"+0430\". \"%Ez\" offset form \"+04:30\". RFC 3339 standard allows replacing \"T\" \"t\" space (\" \"). Set separator adjust needed. date-times returned function always UTC time zone.","code":"2019-01-01T00:00:00Z 2019-01-01T00:00:00+0430 2019-01-01T00:00:00+04:30"},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: date-time — date-time-parse","text":"","code":"date_time_parse(   x,   zone,   ...,   format = NULL,   locale = clock_locale(),   nonexistent = NULL,   ambiguous = NULL )  date_time_parse_complete(x, ..., format = NULL, locale = clock_locale())  date_time_parse_abbrev(x, zone, ..., format = NULL, locale = clock_locale())  date_time_parse_RFC_3339(x, ..., separator = \"T\", offset = \"Z\")"},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: date-time — date-time-parse","text":"x [character] character vector parse. zone [character(1)] full time zone name. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale(). nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times. separator [character(1)] separator date time components string. One : \"T\" \"t\" \" \" offset [character(1)] format offset UTC contained string. One : \"Z\" \"z\" \"%z\" parse numeric offset form \"+0430\" \"%Ez\" parse numeric offset form \"+04:30\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: date-time — date-time-parse","text":"POSIXct.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing: date-time — date-time-parse","text":"date_time_parse_complete() given input length zero, NAs, completely fails parse, time zone able determined. case, result use \"UTC\". strings sub-second components, date-time parsers appropriate . Remember clock treats POSIXct second precision type, parsing string fractional seconds directly POSIXct ambiguous undefined. Instead, fully parse string, including fractional seconds, clock type can handle , naive-time naive_time_parse(), round seconds whatever rounding convention appropriate use case, time_point_floor(), finally convert POSIXct as_date_time(). gives complete control fractional seconds handled converting POSIXct.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: date-time — date-time-parse","text":"","code":"# Parse with a known `zone`, even though that information isn't in the string date_time_parse(\"2020-01-01 05:06:07\", \"America/New_York\") #> [1] \"2020-01-01 05:06:07 EST\"  # Same time as above, except this is a completely unambiguous parse that # doesn't require a `zone` argument, because the zone name and offset are # both present in the string date_time_parse_complete(\"2020-01-01T05:06:07-05:00[America/New_York]\") #> [1] \"2020-01-01 05:06:07 EST\"  # Only day components date_time_parse(\"2020-01-01\", \"America/New_York\", format = \"%Y-%m-%d\") #> [1] \"2020-01-01 EST\"  # `date_time_parse()` may have issues with ambiguous times due to daylight # saving time fallbacks. For example, there were two 1'oclock hours here: x <- date_time_parse(\"1970-10-25 00:59:59\", \"America/New_York\")  # First (earliest) 1'oclock hour add_seconds(x, 1) #> [1] \"1970-10-25 01:00:00 EDT\" # Second (latest) 1'oclock hour add_seconds(x, 3601) #> [1] \"1970-10-25 01:00:00 EST\"  # If you try to parse this ambiguous time directly, you'll get an error: ambiguous_time <- \"1970-10-25 01:00:00\" try(date_time_parse(ambiguous_time, \"America/New_York\")) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Ambiguous time due to daylight saving time at location 1. #> ℹ Resolve ambiguous time issues by specifying the `ambiguous` argument.  # Resolve it by specifying whether you'd like to use the # `earliest` or `latest` of the two possible times date_time_parse(ambiguous_time, \"America/New_York\", ambiguous = \"earliest\") #> [1] \"1970-10-25 01:00:00 EDT\" date_time_parse(ambiguous_time, \"America/New_York\", ambiguous = \"latest\") #> [1] \"1970-10-25 01:00:00 EST\"  # `date_time_parse_complete()` doesn't have these issues, as it requires # that the offset and zone name are both in the string, which resolves # the ambiguity complete_times <- c(   \"1970-10-25T01:00:00-04:00[America/New_York]\",   \"1970-10-25T01:00:00-05:00[America/New_York]\" ) date_time_parse_complete(complete_times) #> [1] \"1970-10-25 01:00:00 EDT\" \"1970-10-25 01:00:00 EST\"  # `date_time_parse_abbrev()` also doesn't have these issues, since it # uses the time zone abbreviation name to resolve the ambiguity abbrev_times <- c(   \"1970-10-25 01:00:00 EDT\",   \"1970-10-25 01:00:00 EST\" ) date_time_parse_abbrev(abbrev_times, \"America/New_York\") #> [1] \"1970-10-25 01:00:00 EDT\" \"1970-10-25 01:00:00 EST\"  # --------------------------------------------------------------------------- # RFC 3339  # Typical UTC format x <- \"2019-01-01T00:01:02Z\" date_time_parse_RFC_3339(x) #> [1] \"2019-01-01 00:01:02 UTC\"  # With a UTC offset containing a `:` x <- \"2019-01-01T00:01:02+02:30\" date_time_parse_RFC_3339(x, offset = \"%Ez\") #> [1] \"2018-12-31 21:31:02 UTC\"  # With a space between the date and time and no `:` in the offset x <- \"2019-01-01 00:01:02+0230\" date_time_parse_RFC_3339(x, separator = \" \", offset = \"%z\") #> [1] \"2018-12-31 21:31:02 UTC\"  # --------------------------------------------------------------------------- # Sub-second components  # If you have a string with sub-second components, but only require up to # seconds, first parse them into a clock type that can handle sub-seconds to # fully capture that information, then round using whatever convention is # required for your use case before converting to a date-time. x <- c(\"2019-01-01T00:00:01.1\", \"2019-01-01T00:00:01.78\")  x <- naive_time_parse(x, precision = \"millisecond\") x #> <naive_time<millisecond>[2]> #> [1] \"2019-01-01T00:00:01.100\" \"2019-01-01T00:00:01.780\"  time_point_floor(x, \"second\") #> <naive_time<second>[2]> #> [1] \"2019-01-01T00:00:01\" \"2019-01-01T00:00:01\" time_point_round(x, \"second\") #> <naive_time<second>[2]> #> [1] \"2019-01-01T00:00:01\" \"2019-01-01T00:00:02\"  as_date_time(time_point_round(x, \"second\"), \"America/New_York\") #> [1] \"2019-01-01 00:00:01 EST\" \"2019-01-01 00:00:02 EST\""},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the time zone — date-time-zone","title":"Get or set the time zone — date-time-zone","text":"date_time_zone() gets time zone. date_time_set_zone() sets time zone. retains underlying duration, changes printed time depending zone chosen.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the time zone — date-time-zone","text":"","code":"date_time_zone(x)  date_time_set_zone(x, zone)"},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the time zone — date-time-zone","text":"x [POSIXct / POSIXlt] date-time vector. zone [character(1)] valid time zone switch .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the time zone — date-time-zone","text":"date_time_zone() returns string containing time zone. date_time_set_zone() returns x altered printed time. underlying duration changed.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the time zone — date-time-zone","text":"function valid date-times, clock treats R's Date class naive type, always yet---specified time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-time-zone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the time zone — date-time-zone","text":"","code":"library(magrittr)  # Cannot set or get the zone of Date. # clock assumes that Dates are naive types, like naive-time. x <- date_parse(\"2019-01-01\") try(date_time_zone(x)) #> Error in date_time_zone(x) : `x` can't be a <Date>. #> ℹ <Date> is considered a naive time with an unspecified time zone. #> ℹ Time zones can only be get or set for date-times (<POSIXct> or #>   <POSIXlt>). try(date_time_set_zone(x, \"America/New_York\")) #> Error in date_time_set_zone(x, \"America/New_York\") :  #>   `x` can't be a <Date>. #> ℹ <Date> is considered a naive time with an unspecified time zone. #> ℹ Time zones can only be get or set for date-times (<POSIXct> or #>   <POSIXlt>).  x <- date_time_parse(\"2019-01-02 01:30:00\", \"America/New_York\") x #> [1] \"2019-01-02 01:30:00 EST\"  date_time_zone(x) #> [1] \"America/New_York\"  # If it is 1:30am in New York, what time is it in Los Angeles? # Same underlying duration, new printed time date_time_set_zone(x, \"America/Los_Angeles\") #> [1] \"2019-01-01 22:30:00 PST\"  # If you want to retain the printed time, but change the underlying duration, # convert to a naive-time to drop the time zone, then convert back to a # date-time. Be aware that this requires that you handle daylight saving time # irregularities with the `nonexistent` and `ambiguous` arguments to # `as_date_time()`! x %>%   as_naive_time() %>%   as_date_time(\"America/Los_Angeles\") #> [1] \"2019-01-02 01:30:00 PST\"  y <- date_time_parse(\"2021-03-28 03:30:00\", \"America/New_York\") y #> [1] \"2021-03-28 03:30:00 EDT\"  y_nt <- as_naive_time(y) y_nt #> <naive_time<second>[1]> #> [1] \"2021-03-28T03:30:00\"  # Helsinki had a daylight saving time gap where they jumped from # 02:59:59 -> 04:00:00 try(as_date_time(y_nt, \"Europe/Helsinki\")) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  as_date_time(y_nt, \"Europe/Helsinki\", nonexistent = \"roll-forward\") #> [1] \"2021-03-28 04:00:00 EEST\" as_date_time(y_nt, \"Europe/Helsinki\", nonexistent = \"roll-backward\") #> [1] \"2021-03-28 02:59:59 EET\""},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":null,"dir":"Reference","previous_headings":"","what":"Current date and date-time — date-today","title":"Current date and date-time — date-today","text":"date_today() returns current date specified zone Date. date_now() returns current date-time specified zone POSIXct.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current date and date-time — date-today","text":"","code":"date_today(zone)  date_now(zone)"},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current date and date-time — date-today","text":"zone [character(1)] time zone get current time .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current date and date-time — date-today","text":"date_today() single Date. date_now() single POSIXct.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current date and date-time — date-today","text":"clock assumes Date naive type, like naive-time. means date_today() first looks current date-time specified zone, converts Date, retaining printed time dropping information time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-today.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current date and date-time — date-today","text":"","code":"# Current date in the local time zone date_today(\"\") #> [1] \"2025-03-17\"  # Current date in a specified time zone date_today(\"Europe/London\") #> [1] \"2025-03-17\"  # Current date-time in that same time zone date_now(\"Europe/London\") #> [1] \"2025-03-17 12:56:33 GMT\""},{"path":"https://clock.r-lib.org/dev/reference/date-zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the time zone — date-zone","title":"Get or set the time zone — date-zone","text":"date_zone() deprecated favor date_time_zone(). date_set_zone() deprecated favor date_time_set_zone().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date-zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the time zone — date-zone","text":"","code":"date_zone(x)  date_set_zone(x, zone)"},{"path":"https://clock.r-lib.org/dev/reference/date-zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the time zone — date-zone","text":"x [POSIXct / POSIXlt] date-time vector. zone [character(1)] valid time zone switch .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Building: date — date_build","title":"Building: date — date_build","text":"date_build() builds Date individual components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building: date — date_build","text":"","code":"date_build(year, month = 1L, day = 1L, ..., invalid = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building: date — date_build","text":"year [integer] year. Values [-32767, 32767] generally allowed. month [integer] month. Values [1, 12] allowed. day [integer / \"last\"] day month. Values [1, 31] allowed. \"last\", last day month returned. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building: date — date_build","text":"Date.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Building: date — date_build","text":"Components recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Building: date — date_build","text":"","code":"date_build(2019) #> [1] \"2019-01-01\" date_build(2019, 1:3) #> [1] \"2019-01-01\" \"2019-02-01\" \"2019-03-01\"  # Generating invalid dates will trigger an error try(date_build(2019, 1:12, 31)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument.  # You can resolve this with `invalid` date_build(2019, 1:12, 31, invalid = \"previous\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\"  # But this particular case (the last day of the month) is better # specified as: date_build(2019, 1:12, \"last\") #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\""},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: date and date-time — date_count_between","title":"Counting: date and date-time — date_count_between","text":"date_count_between() counts number precision units start end (.e., number years months hours). count corresponds whole number units, never return fractional value. suitable , say, computing whole number years months two dates, accounting day time day. separate help pages counting dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: date and date-time — date_count_between","text":"","code":"date_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: date and date-time — date_count_between","text":"start, end [Date / POSIXct / POSIXlt] pair date date-time vectors. recycled common size. precision [character(1)] precision. Allowed precisions dependent calendar used. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: date and date-time — date_count_between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":"comparison-direction","dir":"Reference","previous_headings":"","what":"Comparison Direction","title":"Counting: date and date-time — date_count_between","text":"computed count property start <= end, start + <count> <= end. Similarly, start >= end, start + <count> >= end. words, comparison direction start end never change adding count start. makes function useful repeated count computations increasingly fine precisions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_count_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: date and date-time — date_count_between","text":"","code":"# See method specific documentation for more examples  start <- date_parse(\"2000-05-05\") end <- date_parse(c(\"2020-05-04\", \"2020-05-06\"))  # Age in years date_count_between(start, end, \"year\") #> [1] 19 20  # Number of \"whole\" months between these dates date_count_between(start, end, \"month\") #> [1] 239 240"},{"path":"https://clock.r-lib.org/dev/reference/date_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting: date and date-time — date_format","title":"Formatting: date and date-time — date_format","text":"date_format() formats date (Date) date-time (POSIXct/POSIXlt) using format string. separate help pages formatting dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting: date and date-time — date_format","text":"","code":"date_format(x, ...)"},{"path":"https://clock.r-lib.org/dev/reference/date_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting: date and date-time — date_format","text":"x [Date / POSIXct / POSIXlt] date date-time vector. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting: date and date-time — date_format","text":"character vector formatted input.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting: date and date-time — date_format","text":"","code":"# See method specific documentation for more examples  x <- as.Date(\"2019-01-01\") date_format(x, format = \"year: %Y, month: %m, day: %d\") #> [1] \"year: 2019, month: 01, day: 01\""},{"path":"https://clock.r-lib.org/dev/reference/date_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group date and date-time components — date_group","title":"Group date and date-time components — date_group","text":"date_group() groups single component date-time, month year, day month. separate help pages grouping dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group date and date-time components — date_group","text":"","code":"date_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/date_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group date and date-time components — date_group","text":"x [Date / POSIXct / POSIXlt] date date-time vector. precision [character(1)] precision. Allowed precisions dependent input used. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group date and date-time components — date_group","text":"x, grouped precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group date and date-time components — date_group","text":"","code":"# See type specific documentation for more examples date_group(as.Date(\"2019-01-01\") + 0:5, \"day\", n = 2) #> [1] \"2019-01-01\" \"2019-01-01\" \"2019-01-03\" \"2019-01-03\" \"2019-01-05\" #> [6] \"2019-01-05\""},{"path":"https://clock.r-lib.org/dev/reference/date_leap_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the year a leap year? — date_leap_year","title":"Is the year a leap year? — date_leap_year","text":"date_leap_year() detects year leap year.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_leap_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the year a leap year? — date_leap_year","text":"","code":"date_leap_year(x)"},{"path":"https://clock.r-lib.org/dev/reference/date_leap_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the year a leap year? — date_leap_year","text":"x [Date / POSIXct / POSIXlt] date date-time detect leap years .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_leap_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the year a leap year? — date_leap_year","text":"logical vector size x. Returns TRUE leap year, FALSE leap year, NA x NA.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_leap_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is the year a leap year? — date_leap_year","text":"","code":"x <- as.Date(\"2019-01-01\") x <- add_years(x, 0:5) date_leap_year(x) #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  y <- as.POSIXct(\"2019-01-01\", \"America/New_York\") y <- add_years(y, 0:5) date_leap_year(y) #> [1] FALSE  TRUE FALSE FALSE FALSE  TRUE"},{"path":"https://clock.r-lib.org/dev/reference/date_month_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a date or date-time to an ordered factor of month names — date_month_factor","title":"Convert a date or date-time to an ordered factor of month names — date_month_factor","text":"date_month_factor() extracts month values date date-time converts ordered factor month names. can useful combination ggplot2, modeling.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_month_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a date or date-time to an ordered factor of month names — date_month_factor","text":"","code":"date_month_factor(x, ..., labels = \"en\", abbreviate = FALSE)"},{"path":"https://clock.r-lib.org/dev/reference/date_month_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a date or date-time to an ordered factor of month names — date_month_factor","text":"x [Date / POSIXct / POSIXlt] date date-time vector. ... dots future extensions must empty. labels [clock_labels / character(1)] Character representations localized weekday names, month names, /PM names. Either language code string (passed clock_labels_lookup()), object created clock_labels(). abbreviate [logical(1)] TRUE, abbreviated month names labels used. FALSE, full month names labels used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_month_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a date or date-time to an ordered factor of month names — date_month_factor","text":"ordered factor representing months.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_month_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a date or date-time to an ordered factor of month names — date_month_factor","text":"","code":"x <- add_months(as.Date(\"2019-01-01\"), 0:11)  date_month_factor(x) #>  [1] January   February  March     April     May       June      #>  [7] July      August    September October   November  December  #> 12 Levels: January < February < March < April < May < ... < December date_month_factor(x, abbreviate = TRUE) #>  [1] Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < ... < Dec date_month_factor(x, labels = \"fr\") #>  [1] janvier   février   mars      avril     mai       juin      #>  [7] juillet   août      septembre octobre   novembre  décembre  #> 12 Levels: janvier < février < mars < avril < mai < ... < décembre"},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: date — date_parse","title":"Parsing: date — date_parse","text":"date_parse() parses strings Date. default format used \"%Y-%m-%d\". matches default result calling print() format() Date.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: date — date_parse","text":"","code":"date_parse(x, ..., format = NULL, locale = clock_locale())"},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: date — date_parse","text":"x [character] character vector parse. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: date — date_parse","text":"Date.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing: date — date_parse","text":"date_parse() ignores %z %Z commands, clock treats Date naive type, yet---specified time zone. Parsing strings sub-daily components, hours, minutes, seconds, generally done date_time_parse(). need date components string sub-daily components, choose one following: date components front string, want time components affect date way, can use date_parse() parse date components. example, date_parse(\"2019-01-05 00:01:02\", format = \"%Y-%m-%d\") parse 05 stop. want time components influence date, parse full string date_time_parse(), round day precision rounding function like date_round(), cast date as_date(). Attempting directly parse components sub-daily string Date ambiguous undefined, unlikely work might expect. example, date_parse(\"2019-01-05 00:01:02\", format = \"%Y-%m-%d %H:%M:%S\") officially supported, even works cases.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: date — date_parse","text":"","code":"date_parse(\"2020-01-01\") #> [1] \"2020-01-01\"  date_parse(   \"January 5, 2020\",   format = \"%B %d, %Y\" ) #> [1] \"2020-01-05\"  # With a different locale date_parse(   \"janvier 5, 2020\",   format = \"%B %d, %Y\",   locale = clock_locale(\"fr\") ) #> [1] \"2020-01-05\"  # A neat feature of `date_parse()` is the ability to parse # the ISO year-week-day format date_parse(\"2020-W01-2\", format = \"%G-W%V-%u\") #> [1] \"2019-12-31\"  # --------------------------------------------------------------------------- # Sub-daily components  # If you have a string with sub-daily components, but only require the date, # first parse them as date-times to fully parse the sub-daily components, # then round using whatever convention is required for your use case before # converting to date. x <- c(\"2019-01-01 11\", \"2019-01-01 12\")  x <- date_time_parse(x, zone = \"UTC\", format = \"%Y-%m-%d %H\") x #> [1] \"2019-01-01 11:00:00 UTC\" \"2019-01-01 12:00:00 UTC\"  date_floor(x, \"day\") #> [1] \"2019-01-01 UTC\" \"2019-01-01 UTC\" date_round(x, \"day\") #> [1] \"2019-01-01 UTC\" \"2019-01-02 UTC\"  as_date(date_round(x, \"day\")) #> [1] \"2019-01-01\" \"2019-01-02\""},{"path":"https://clock.r-lib.org/dev/reference/date_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: date and date-time — date_seq","title":"Sequences: date and date-time — date_seq","text":"date_seq() generates date (Date) date-time (POSIXct/POSIXlt) sequence. separate help pages generating sequences dates date-times: dates (Date) date-times (POSIXct/POSIXlt)","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: date and date-time — date_seq","text":"","code":"date_seq(from, ..., to = NULL, by = NULL, total_size = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/date_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: date and date-time — date_seq","text":"[Date(1) / POSIXct(1) / POSIXlt(1)] date date-time start sequence . ... dots future extensions must empty. [Date(1) / POSIXct(1) / POSIXlt(1) / NULL] date date-time stop sequence . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . total_size [positive integer(1) / NULL] size resulting sequence. specified alongside , must generate non-fractional sequence .","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: date and date-time — date_seq","text":"date date-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: date and date-time — date_seq","text":"","code":"# See method specific documentation for more examples  x <- as.Date(\"2019-01-01\") date_seq(x, by = duration_months(2), total_size = 20) #>  [1] \"2019-01-01\" \"2019-03-01\" \"2019-05-01\" \"2019-07-01\" \"2019-09-01\" #>  [6] \"2019-11-01\" \"2020-01-01\" \"2020-03-01\" \"2020-05-01\" \"2020-07-01\" #> [11] \"2020-09-01\" \"2020-11-01\" \"2021-01-01\" \"2021-03-01\" \"2021-05-01\" #> [16] \"2021-07-01\" \"2021-09-01\" \"2021-11-01\" \"2022-01-01\" \"2022-03-01\""},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Spanning sequence: date and date-time — date_spanning_seq","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"date_spanning_seq() generates regular sequence along span x, .e. along [min(x), max(x)]. dates, generates day precision sequence, date-times generates second precision sequence.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"","code":"date_spanning_seq(x)"},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"x [Date / POSIXct / POSIXlt] date date-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"sequence along [min(x), max(x)].","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"Missing infinite values automatically removed sequence generated. date-times, sys-time based sequences generated, consistent date_seq() using second precision value. need precise sequence generation, call range() date_seq() directly.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_spanning_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spanning sequence: date and date-time — date_spanning_seq","text":"","code":"x <- date_build(2020, c(1, 2, 1), c(10, 5, 12)) date_spanning_seq(x) #>  [1] \"2020-01-10\" \"2020-01-11\" \"2020-01-12\" \"2020-01-13\" \"2020-01-14\" #>  [6] \"2020-01-15\" \"2020-01-16\" \"2020-01-17\" \"2020-01-18\" \"2020-01-19\" #> [11] \"2020-01-20\" \"2020-01-21\" \"2020-01-22\" \"2020-01-23\" \"2020-01-24\" #> [16] \"2020-01-25\" \"2020-01-26\" \"2020-01-27\" \"2020-01-28\" \"2020-01-29\" #> [21] \"2020-01-30\" \"2020-01-31\" \"2020-02-01\" \"2020-02-02\" \"2020-02-03\" #> [26] \"2020-02-04\" \"2020-02-05\"  # Missing and infinite dates are removed before the sequence is generated x <- c(x, NA, Inf, -Inf) x #> [1] \"2020-01-10\" \"2020-02-05\" \"2020-01-12\" NA           \"Inf\"        #> [6] \"-Inf\"        date_spanning_seq(x) #>  [1] \"2020-01-10\" \"2020-01-11\" \"2020-01-12\" \"2020-01-13\" \"2020-01-14\" #>  [6] \"2020-01-15\" \"2020-01-16\" \"2020-01-17\" \"2020-01-18\" \"2020-01-19\" #> [11] \"2020-01-20\" \"2020-01-21\" \"2020-01-22\" \"2020-01-23\" \"2020-01-24\" #> [16] \"2020-01-25\" \"2020-01-26\" \"2020-01-27\" \"2020-01-28\" \"2020-01-29\" #> [21] \"2020-01-30\" \"2020-01-31\" \"2020-02-01\" \"2020-02-02\" \"2020-02-03\" #> [26] \"2020-02-04\" \"2020-02-05\"  # For date-times, sequences are generated at second precision x <- date_time_build(   2020, 1, 2, 3, c(5, 4, 5), c(10, 48, 12),   zone = \"America/New_York\" ) x #> [1] \"2020-01-02 03:05:10 EST\" \"2020-01-02 03:04:48 EST\" #> [3] \"2020-01-02 03:05:12 EST\"  date_spanning_seq(x) #>  [1] \"2020-01-02 03:04:48 EST\" \"2020-01-02 03:04:49 EST\" #>  [3] \"2020-01-02 03:04:50 EST\" \"2020-01-02 03:04:51 EST\" #>  [5] \"2020-01-02 03:04:52 EST\" \"2020-01-02 03:04:53 EST\" #>  [7] \"2020-01-02 03:04:54 EST\" \"2020-01-02 03:04:55 EST\" #>  [9] \"2020-01-02 03:04:56 EST\" \"2020-01-02 03:04:57 EST\" #> [11] \"2020-01-02 03:04:58 EST\" \"2020-01-02 03:04:59 EST\" #> [13] \"2020-01-02 03:05:00 EST\" \"2020-01-02 03:05:01 EST\" #> [15] \"2020-01-02 03:05:02 EST\" \"2020-01-02 03:05:03 EST\" #> [17] \"2020-01-02 03:05:04 EST\" \"2020-01-02 03:05:05 EST\" #> [19] \"2020-01-02 03:05:06 EST\" \"2020-01-02 03:05:07 EST\" #> [21] \"2020-01-02 03:05:08 EST\" \"2020-01-02 03:05:09 EST\" #> [23] \"2020-01-02 03:05:10 EST\" \"2020-01-02 03:05:11 EST\" #> [25] \"2020-01-02 03:05:12 EST\""},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Building: date-time — date_time_build","title":"Building: date-time — date_time_build","text":"date_time_build() builds POSIXct individual components. build POSIXct, required specify zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building: date-time — date_time_build","text":"","code":"date_time_build(   year,   month = 1L,   day = 1L,   hour = 0L,   minute = 0L,   second = 0L,   ...,   zone,   invalid = NULL,   nonexistent = NULL,   ambiguous = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building: date-time — date_time_build","text":"year [integer] year. Values [-32767, 32767] generally allowed. month [integer] month. Values [1, 12] allowed. day [integer / \"last\"] day month. Values [1, 31] allowed. \"last\", last day month returned. hour [integer] hour. Values [0, 23] allowed. minute [integer] minute. Values [0, 59] allowed. second [integer] second. Values [0, 59] allowed. ... dots future extensions must empty. zone [character(1)] valid time zone name. argument required, must specified name. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building: date-time — date_time_build","text":"POSIXct.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Building: date-time — date_time_build","text":"Components recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Building: date-time — date_time_build","text":"","code":"# The zone argument is required! # clock always requires you to be explicit about your choice of `zone`. try(date_time_build(2020)) #> Error in date_time_build(2020) : `zone` must be supplied.  date_time_build(2020, zone = \"America/New_York\") #> [1] \"2020-01-01 EST\"  # Nonexistent time due to daylight saving time gap from 01:59:59 -> 03:00:00 try(date_time_build(1970, 4, 26, 1:12, 30, zone = \"America/New_York\")) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 2. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # Resolve with a nonexistent time resolution strategy date_time_build(   1970, 4, 26, 1:12, 30,   zone = \"America/New_York\",   nonexistent = \"roll-forward\" ) #>  [1] \"1970-04-26 01:30:00 EST\" \"1970-04-26 03:00:00 EDT\" #>  [3] \"1970-04-26 03:30:00 EDT\" \"1970-04-26 04:30:00 EDT\" #>  [5] \"1970-04-26 05:30:00 EDT\" \"1970-04-26 06:30:00 EDT\" #>  [7] \"1970-04-26 07:30:00 EDT\" \"1970-04-26 08:30:00 EDT\" #>  [9] \"1970-04-26 09:30:00 EDT\" \"1970-04-26 10:30:00 EDT\" #> [11] \"1970-04-26 11:30:00 EDT\" \"1970-04-26 12:30:00 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/date_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Info: date-time — date_time_info","title":"Info: date-time — date_time_info","text":"date_time_info() retrieves set low-level information generally required date-time manipulations. returns data frame columns sys_time_info(), begin end columns date-times time zone x, offset column integer rather second based duration column since part high-level API.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info: date-time — date_time_info","text":"","code":"date_time_info(x)"},{"path":"https://clock.r-lib.org/dev/reference/date_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info: date-time — date_time_info","text":"x [POSIXct / POSIXlt] date-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info: date-time — date_time_info","text":"data frame low level information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Info: date-time — date_time_info","text":"","code":"x <- date_time_build(   2021, 03, 14, c(01, 03), c(59, 00), c(59, 00),   zone = \"America/New_York\" )  # x[1] is in EST, x[2] is in EDT x #> [1] \"2021-03-14 01:59:59 EST\" \"2021-03-14 03:00:00 EDT\"  info <- date_time_info(x) info #>                 begin                 end offset   dst abbreviation #> 1 2020-11-01 01:00:00 2021-03-14 03:00:00 -18000 FALSE          EST #> 2 2021-03-14 03:00:00 2021-11-07 01:00:00 -14400  TRUE          EDT  # `end` can be used to iterate through daylight saving time transitions date_time_info(info$end) #>                 begin                 end offset   dst abbreviation #> 1 2021-03-14 03:00:00 2021-11-07 01:00:00 -14400  TRUE          EDT #> 2 2021-11-07 01:00:00 2022-03-13 03:00:00 -18000 FALSE          EST"},{"path":"https://clock.r-lib.org/dev/reference/date_weekday_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a date or date-time to a weekday factor — date_weekday_factor","title":"Convert a date or date-time to a weekday factor — date_weekday_factor","text":"date_weekday_factor() converts date date-time ordered factor levels representing weekday. can useful combination ggplot2, modeling.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_weekday_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a date or date-time to a weekday factor — date_weekday_factor","text":"","code":"date_weekday_factor(   x,   ...,   labels = \"en\",   abbreviate = TRUE,   encoding = \"western\" )"},{"path":"https://clock.r-lib.org/dev/reference/date_weekday_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a date or date-time to a weekday factor — date_weekday_factor","text":"x [Date / POSIXct / POSIXlt] date date-time vector. ... dots future extensions must empty. labels [clock_labels / character(1)] Character representations localized weekday names, month names, /PM names. Either language code string (passed clock_labels_lookup()), object created clock_labels(). abbreviate [logical(1)] TRUE, abbreviated weekday names labels used. FALSE, full weekday names labels used. encoding [character(1)] One : \"western\": Encode weekdays ordered factor levels Sunday -> Saturday. \"iso\": Encode weekdays ordered factor levels Monday -> Sunday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_weekday_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a date or date-time to a weekday factor — date_weekday_factor","text":"ordered factor representing weekdays.","code":""},{"path":"https://clock.r-lib.org/dev/reference/date_weekday_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a date or date-time to a weekday factor — date_weekday_factor","text":"","code":"x <- as.Date(\"2019-01-01\") + 0:6  # Default to Sunday -> Saturday date_weekday_factor(x) #> [1] Tue Wed Thu Fri Sat Sun Mon #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat  # ISO encoding is Monday -> Sunday date_weekday_factor(x, encoding = \"iso\") #> [1] Tue Wed Thu Fri Sat Sun Mon #> Levels: Mon < Tue < Wed < Thu < Fri < Sat < Sun  # With full names date_weekday_factor(x, abbreviate = FALSE) #> [1] Tuesday   Wednesday Thursday  Friday    Saturday  Sunday    #> [7] Monday    #> 7 Levels: Sunday < Monday < Tuesday < Wednesday < ... < Saturday  # Or a different language date_weekday_factor(x, labels = \"fr\") #> [1] mar. mer. jeu. ven. sam. dim. lun. #> Levels: dim. < lun. < mar. < mer. < jeu. < ven. < sam."},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: duration — duration-arithmetic","title":"Arithmetic: duration — duration-arithmetic","text":"duration methods arithmetic generics. add_years() add_quarters() add_months() add_weeks() add_days() add_hours() add_minutes() add_seconds() add_milliseconds() add_microseconds() add_nanoseconds() adding duration using one functions, second duration created based function name n. two durations added together, precision result determined precise precision two durations.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: duration — duration-arithmetic","text":"","code":"# S3 method for class 'clock_duration' add_years(x, n, ...)  # S3 method for class 'clock_duration' add_quarters(x, n, ...)  # S3 method for class 'clock_duration' add_months(x, n, ...)  # S3 method for class 'clock_duration' add_weeks(x, n, ...)  # S3 method for class 'clock_duration' add_days(x, n, ...)  # S3 method for class 'clock_duration' add_hours(x, n, ...)  # S3 method for class 'clock_duration' add_minutes(x, n, ...)  # S3 method for class 'clock_duration' add_seconds(x, n, ...)  # S3 method for class 'clock_duration' add_milliseconds(x, n, ...)  # S3 method for class 'clock_duration' add_microseconds(x, n, ...)  # S3 method for class 'clock_duration' add_nanoseconds(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: duration — duration-arithmetic","text":"x [clock_duration] duration vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: duration — duration-arithmetic","text":"x performing arithmetic, possibly precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: duration — duration-arithmetic","text":"can add calendrical durations calendrical durations, chronological durations chronological durations, add chronological duration calendrical duration (adding days months). information, see documentation duration helper page. x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: duration — duration-arithmetic","text":"","code":"x <- duration_seconds(5)  # Addition in the same precision add_seconds(x, 1:10) #> <duration<second>[10]> #>  [1] 6  7  8  9  10 11 12 13 14 15  # Addition with days, defined as 86400 seconds add_days(x, 1) #> <duration<second>[1]> #> [1] 86405  # Similarly, if you start with days and add seconds, you get the common # precision of the two back, which is seconds y <- duration_days(1) add_seconds(y, 5) #> <duration<second>[1]> #> [1] 86405  # But you can't add a chronological duration (days) and # a calendrical duration (months) try(add_months(y, 1)) #> Error in duration_arith(x, y, names, duration_plus_cpp) :  #>   Can't combine `x` <duration<day>> and `y` <duration<month>>. #> Can't combine calendrical durations with chronological durations.  # You can add years to a duration of months, which adds # an additional 12 months / year z <- duration_months(5) add_years(z, 1) #> <duration<month>[1]> #> [1] 17"},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a duration — duration-helper","title":"Construct a duration — duration-helper","text":"helpers construct durations specified precision. Durations represent units time. Durations separated two categories: Calendrical year quarter month Chronological week day hour minute second millisecond microsecond nanosecond Calendrical durations generally used manipulating calendar types, like year-month-day. Chronological durations generally used working time points, like sys-time naive-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a duration — duration-helper","text":"","code":"duration_years(n = integer())  duration_quarters(n = integer())  duration_months(n = integer())  duration_weeks(n = integer())  duration_days(n = integer())  duration_hours(n = integer())  duration_minutes(n = integer())  duration_seconds(n = integer())  duration_milliseconds(n = integer())  duration_microseconds(n = integer())  duration_nanoseconds(n = integer())"},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a duration — duration-helper","text":"n [integer] number units time use creating duration.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a duration — duration-helper","text":"duration specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":"internal-representation","dir":"Reference","previous_headings":"","what":"Internal Representation","title":"Construct a duration — duration-helper","text":"Durations internally represented integer number \"ticks\" along ratio describing converts number seconds. following duration ratios used clock: 1 year == 31556952 seconds 1 quarter == 7889238 seconds 1 month == 2629746 seconds 1 week == 604800 seconds 1 day == 86400 seconds 1 hour == 3600 seconds 1 minute == 60 seconds 1 second == 1 second 1 millisecond == 1 / 1000 seconds 1 microsecond == 1 / 1000000 seconds 1 nanosecond == 1 / 1000000000 seconds duration 1 year defined correspond average length proleptic Gregorian year, .e. 365.2425 days. duration 1 month defined exactly 1/12 year. duration 1 quarter defined exactly 1/4 year. duration 1 week defined exactly 7 days. conversions come play operations like adding flooring durations. Generally, add two calendrical durations together get new calendrical duration, rather adding calendrical chronological duration together. one exception duration_cast(), can cast durations precision, potential loss information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-helper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a duration — duration-helper","text":"","code":"duration_years(1:5) #> <duration<year>[5]> #> [1] 1 2 3 4 5 duration_nanoseconds(1:5) #> <duration<nanosecond>[5]> #> [1] 1 2 3 4 5"},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Duration rounding — duration-rounding","title":"Duration rounding — duration-rounding","text":"duration_floor() rounds duration multiple specified precision. duration_ceiling() rounds duration multiple specified precision. duration_round() rounds depending closer, rounding ties.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duration rounding — duration-rounding","text":"","code":"duration_floor(x, precision, ..., n = 1L)  duration_ceiling(x, precision, ..., n = 1L)  duration_round(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duration rounding — duration-rounding","text":"x [clock_duration] duration. precision [character(1)] precision. One : \"year\" \"quarter\" \"month\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duration rounding — duration-rounding","text":"x rounded precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Duration rounding — duration-rounding","text":"can floor calendrical durations calendrical durations, chronological durations chronological durations, floor chronological duration calendrical duration (flooring day month). information, see documentation duration helper page.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration-rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duration rounding — duration-rounding","text":"","code":"x <- duration_seconds(c(86399, 86401))  duration_floor(x, \"day\") #> <duration<day>[2]> #> [1] 0 1 duration_ceiling(x, \"day\") #> <duration<day>[2]> #> [1] 1 2  # Can't floor from a chronological duration (seconds) # to a calendrical duration (months) try(duration_floor(x, \"month\")) #> Error in duration_floor(x, \"month\") :  #>   Can't floor from a chronological precision (second) to a #> calendrical precision (month).  # Every 2 days, using an origin of day 0 y <- duration_seconds(c(0, 86400, 86400 * 2, 86400 * 3)) duration_floor(y, \"day\", n = 2) #> <duration<day>[4]> #> [1] 0 0 2 2  # Shifting the origin to be day 1 origin <- duration_days(1) duration_floor(y - origin, \"day\", n = 2) + origin #> <duration<day>[4]> #> [1] -1 1  1  3   # Rounding will round ties up half_day <- 86400 / 2 half_day_durations <- duration_seconds(c(half_day - 1, half_day, half_day + 1)) duration_round(half_day_durations, \"day\") #> <duration<day>[3]> #> [1] 0 1 1  # With larger units x <- duration_months(c(0, 15, 24)) duration_floor(x, \"year\") #> <duration<year>[3]> #> [1] 0 1 2 duration_floor(x, \"quarter\") #> <duration<quarter>[3]> #> [1] 0 5 8"},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast a duration between precisions — duration_cast","title":"Cast a duration between precisions — duration_cast","text":"Casting one way change duration's precision. Casting less precise precision completely drop information precise precision casting . way makes round towards zero. Casting precise precision done multiplication conversion factor current precision new precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast a duration between precisions — duration_cast","text":"","code":"duration_cast(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast a duration between precisions — duration_cast","text":"x [clock_duration] duration. precision [character(1)] precision. One : \"year\" \"quarter\" \"month\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast a duration between precisions — duration_cast","text":"x cast new precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cast a duration between precisions — duration_cast","text":"want change less precise precision, often want duration_floor() instead duration_cast(), rounds towards negative infinity, generally desired behavior working time points (especially ones pre-1970, stored negative durations).","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast a duration between precisions — duration_cast","text":"","code":"x <- duration_seconds(c(86401, -86401))  # Casting rounds towards 0 cast <- duration_cast(x, \"day\") cast #> <duration<day>[2]> #> [1] 1  -1  # Flooring rounds towards negative infinity floor <- duration_floor(x, \"day\") floor #> <duration<day>[2]> #> [1] 1  -2  # Flooring is generally more useful when working with time points, # note that the cast ends up rounding the pre-1970 date up to the next # day, while the post-1970 date is rounded down. as_sys_time(x) #> <sys_time<second>[2]> #> [1] \"1970-01-02T00:00:01\" \"1969-12-30T23:59:59\" as_sys_time(cast) #> <sys_time<day>[2]> #> [1] \"1970-01-02\" \"1969-12-31\" as_sys_time(floor) #> <sys_time<day>[2]> #> [1] \"1970-01-02\" \"1969-12-30\"  # Casting to a more precise precision duration_cast(x, \"millisecond\") #> <duration<millisecond>[2]> #> [1] 86401000  -86401000"},{"path":"https://clock.r-lib.org/dev/reference/duration_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision: duration — duration_precision","title":"Precision: duration — duration_precision","text":"duration_precision() extracts precision duration object. returns precision single string.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision: duration — duration_precision","text":"","code":"duration_precision(x)"},{"path":"https://clock.r-lib.org/dev/reference/duration_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision: duration — duration_precision","text":"x [clock_duration] duration.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision: duration — duration_precision","text":"single string holding precision duration.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision: duration — duration_precision","text":"","code":"duration_precision(duration_seconds(1)) #> [1] \"second\" duration_precision(duration_nanoseconds(2)) #> [1] \"nanosecond\" duration_precision(duration_quarters(1:5)) #> [1] \"quarter\""},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Spanning sequence: duration — duration_spanning_seq","title":"Spanning sequence: duration — duration_spanning_seq","text":"duration_spanning_seq() generates regular sequence along span x, .e. along [min(x), max(x)].","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spanning sequence: duration — duration_spanning_seq","text":"","code":"duration_spanning_seq(x)"},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spanning sequence: duration — duration_spanning_seq","text":"x [clock_duration] duration vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spanning sequence: duration — duration_spanning_seq","text":"sequence along [min(x), max(x)].","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spanning sequence: duration — duration_spanning_seq","text":"Missing values automatically removed sequence generated. need precise sequence generation, call range() seq() directly.","code":""},{"path":"https://clock.r-lib.org/dev/reference/duration_spanning_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spanning sequence: duration — duration_spanning_seq","text":"","code":"x <- duration_days(c(1, 5, 2)) duration_spanning_seq(x) #> <duration<day>[5]> #> [1] 1 2 3 4 5  # Missing values are removed before the sequence is created x <- vctrs::vec_c(NA, x, NA) duration_spanning_seq(x) #> <duration<day>[5]> #> [1] 1 2 3 4 5"},{"path":"https://clock.r-lib.org/dev/reference/format.clock_zoned_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting: zoned-time — format.clock_zoned_time","title":"Formatting: zoned-time — format.clock_zoned_time","text":"zoned-time method format() generic. function allows format zoned-time using flexible format string. format NULL, default format \"%Y-%m-%dT%H:%M:%S%Ez[%Z]\" used. matches default format zoned_time_parse_complete() parses. Additionally, format matches de-facto standard extension RFC 3339 creating completely unambiguous date-times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/format.clock_zoned_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting: zoned-time — format.clock_zoned_time","text":"","code":"# S3 method for class 'clock_zoned_time' format(x, ..., format = NULL, locale = clock_locale(), abbreviate_zone = FALSE)"},{"path":"https://clock.r-lib.org/dev/reference/format.clock_zoned_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting: zoned-time — format.clock_zoned_time","text":"x [clock_zoned_time] zoned-time. ... [dots] used, error thrown empty remain compatible usage format() generic. format [character(1) / NULL] NULL, default format used, depends type input. Otherwise, format string combination : Year %C: year divided 100 using floored division. result single decimal digit, prefixed 0. %y: last two decimal digits year. result single digit prefixed 0. %Y: year decimal number. result less four digits left-padded 0 four digits. Month %b, %h: locale's abbreviated month name. %B: locale's full month name. %m: month decimal number. January 01. result single digit, prefixed 0. Day %d: day month decimal number. result single decimal digit, prefixed 0. Day week %: locale's abbreviated weekday name. %: locale's full weekday name. %w: weekday decimal number (0-6), Sunday 0. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. result single digit prefixed 0. %G: ISO week-based year decimal number. result less four digits left-padded 0 four digits. %V: ISO week-based week number decimal number. result single digit, prefixed 0. %u: ISO weekday decimal number (1-7), Monday 1. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. result single digit, prefixed 0. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. result single digit, prefixed 0. Day year %j: day year decimal number. January 1 001. result less three digits, left-padded 0 three digits. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. Time day %H: hour (24-hour clock) decimal number. result single digit, prefixed 0. %: hour (12-hour clock) decimal number. result single digit, prefixed 0. %M: minute decimal number. result single digit, prefixed 0. %S: Seconds decimal number. Fractional seconds printed precision input. character decimal point localized according locale. %p: locale's equivalent /PM designations associated 12-hour clock. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Nearly equivalent %:%M:%S %p, seconds always printed second precision. Time zone %z: offset UTC ISO 8601 format. example -0430 refers 4 hours 30 minutes behind UTC. offset zero, +0000 used. modified command %Ez inserts : hour minutes, like -04:30. %Z: full time zone name. abbreviate_zone TRUE, time zone abbreviation. Miscellaneous %c: date time representation. Similar , exactly , %%b %d %H:%M:%S %Y. %%: % character. %n: newline character. %t: horizontal-tab character. locale [clock_locale] locale object created clock_locale(). abbreviate_zone [logical(1)] TRUE, %Z returns abbreviated time zone name. FALSE, %Z returns full time zone name.","code":""},{"path":"https://clock.r-lib.org/dev/reference/format.clock_zoned_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting: zoned-time — format.clock_zoned_time","text":"character vector formatted input.","code":""},{"path":"https://clock.r-lib.org/dev/reference/format.clock_zoned_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting: zoned-time — format.clock_zoned_time","text":"","code":"x <- year_month_day(2019, 1, 1) x <- as_zoned_time(as_naive_time(x), \"America/New_York\")  format(x) #> [1] \"2019-01-01T00:00:00-05:00[America/New_York]\" format(x, format = \"%B %d, %Y\") #> [1] \"January 01, 2019\" format(x, format = \"%B %d, %Y\", locale = clock_locale(\"fr\")) #> [1] \"janvier 01, 2019\""},{"path":"https://clock.r-lib.org/dev/reference/is_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a duration? — is_duration","title":"Is x a duration? — is_duration","text":"function determines input duration object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a duration? — is_duration","text":"","code":"is_duration(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a duration? — is_duration","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a duration? — is_duration","text":"TRUE x inherits \"clock_duration\", otherwise FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a duration? — is_duration","text":"","code":"is_duration(1) #> [1] FALSE is_duration(duration_days(1)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_iso_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a iso-year-week-day? — is_iso_year_week_day","title":"Is x a iso-year-week-day? — is_iso_year_week_day","text":"Check x iso-year-week-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_iso_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a iso-year-week-day? — is_iso_year_week_day","text":"","code":"is_iso_year_week_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_iso_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a iso-year-week-day? — is_iso_year_week_day","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_iso_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a iso-year-week-day? — is_iso_year_week_day","text":"Returns TRUE x inherits \"clock_iso_year_week_day\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_iso_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a iso-year-week-day? — is_iso_year_week_day","text":"","code":"is_iso_year_week_day(iso_year_week_day(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_naive_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a naive-time? — is_naive_time","title":"Is x a naive-time? — is_naive_time","text":"function determines input naive-time object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_naive_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a naive-time? — is_naive_time","text":"","code":"is_naive_time(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_naive_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a naive-time? — is_naive_time","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_naive_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a naive-time? — is_naive_time","text":"TRUE x inherits \"clock_naive_time\", otherwise FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_naive_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a naive-time? — is_naive_time","text":"","code":"is_naive_time(1) #> [1] FALSE is_naive_time(as_naive_time(duration_days(1))) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_sys_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a sys-time? — is_sys_time","title":"Is x a sys-time? — is_sys_time","text":"function determines input sys-time object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_sys_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a sys-time? — is_sys_time","text":"","code":"is_sys_time(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_sys_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a sys-time? — is_sys_time","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_sys_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a sys-time? — is_sys_time","text":"TRUE x inherits \"clock_sys_time\", otherwise FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_sys_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a sys-time? — is_sys_time","text":"","code":"is_sys_time(1) #> [1] FALSE is_sys_time(as_sys_time(duration_days(1))) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a weekday? — is_weekday","title":"Is x a weekday? — is_weekday","text":"function determines input weekday object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a weekday? — is_weekday","text":"","code":"is_weekday(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a weekday? — is_weekday","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a weekday? — is_weekday","text":"TRUE x inherits \"clock_weekday\", otherwise FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a weekday? — is_weekday","text":"","code":"is_weekday(1) #> [1] FALSE is_weekday(weekday(1)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_year_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a year-day? — is_year_day","title":"Is x a year-day? — is_year_day","text":"Check x year-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a year-day? — is_year_day","text":"","code":"is_year_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_year_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a year-day? — is_year_day","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a year-day? — is_year_day","text":"Returns TRUE x inherits \"clock_year_day\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a year-day? — is_year_day","text":"","code":"is_year_day(year_day(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a year-month-day? — is_year_month_day","title":"Is x a year-month-day? — is_year_month_day","text":"Check x year-month-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a year-month-day? — is_year_month_day","text":"","code":"is_year_month_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a year-month-day? — is_year_month_day","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a year-month-day? — is_year_month_day","text":"Returns TRUE x inherits \"clock_year_month_day\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a year-month-day? — is_year_month_day","text":"","code":"is_year_month_day(year_month_day(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a year-month-weekday? — is_year_month_weekday","title":"Is x a year-month-weekday? — is_year_month_weekday","text":"Check x year-month-weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a year-month-weekday? — is_year_month_weekday","text":"","code":"is_year_month_weekday(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a year-month-weekday? — is_year_month_weekday","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a year-month-weekday? — is_year_month_weekday","text":"Returns TRUE x inherits \"clock_year_month_weekday\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_month_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a year-month-weekday? — is_year_month_weekday","text":"","code":"is_year_month_weekday(year_month_weekday(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_year_quarter_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a year-quarter-day? — is_year_quarter_day","title":"Is x a year-quarter-day? — is_year_quarter_day","text":"Check x year-quarter-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_quarter_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a year-quarter-day? — is_year_quarter_day","text":"","code":"is_year_quarter_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_year_quarter_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a year-quarter-day? — is_year_quarter_day","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_quarter_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a year-quarter-day? — is_year_quarter_day","text":"Returns TRUE x inherits \"clock_year_quarter_day\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_quarter_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a year-quarter-day? — is_year_quarter_day","text":"","code":"is_year_quarter_day(year_quarter_day(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a year-week-day? — is_year_week_day","title":"Is x a year-week-day? — is_year_week_day","text":"Check x year-week-day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a year-week-day? — is_year_week_day","text":"","code":"is_year_week_day(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a year-week-day? — is_year_week_day","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a year-week-day? — is_year_week_day","text":"Returns TRUE x inherits \"clock_year_week_day\", otherwise returns FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a year-week-day? — is_year_week_day","text":"","code":"is_year_week_day(year_week_day(2019)) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/is_zoned_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Is x a zoned-time? — is_zoned_time","title":"Is x a zoned-time? — is_zoned_time","text":"function determines input zoned-time object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_zoned_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is x a zoned-time? — is_zoned_time","text":"","code":"is_zoned_time(x)"},{"path":"https://clock.r-lib.org/dev/reference/is_zoned_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is x a zoned-time? — is_zoned_time","text":"x [object] object.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_zoned_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is x a zoned-time? — is_zoned_time","text":"TRUE x inherits \"clock_zoned_time\", otherwise FALSE.","code":""},{"path":"https://clock.r-lib.org/dev/reference/is_zoned_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is x a zoned-time? — is_zoned_time","text":"","code":"is_zoned_time(1) #> [1] FALSE is_zoned_time(zoned_time_now(\"America/New_York\")) #> [1] TRUE"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"iso-year-week-day methods arithmetic generics. add_years() add weeks days iso-year-week-day calendar. Adding days much efficiently done converting time point first using as_naive_time() as_sys_time(). Adding weeks equally efficient adding 7 days. Additionally, adding weeks invalid iso-year-week object containing iso_year_week_day(2019, 53) undefined, 53rd ISO week 2019 exist begin .","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"","code":"# S3 method for class 'clock_iso_year_week_day' add_years(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"x [clock_iso_year_week_day] iso-year-week-day vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: iso-year-week-day — iso-year-week-day-arithmetic","text":"","code":"x <- iso_year_week_day(2019, 1, 1) add_years(x, 1:2) #> <iso_year_week_day<day>[2]> #> [1] \"2020-W01-1\" \"2021-W01-1\""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","title":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","text":"iso-year-week-day method calendar_start() calendar_end() generics. adjust components calendar start end specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","text":"","code":"# S3 method for class 'clock_iso_year_week_day' calendar_start(x, precision)  # S3 method for class 'clock_iso_year_week_day' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","text":"x [clock_iso_year_week_day] iso-year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: iso-year-week-day — iso-year-week-day-boundary","text":"","code":"x <- iso_year_week_day(2019:2020, 5, 6, 10) x #> <iso_year_week_day<hour>[2]> #> [1] \"2019-W05-6T10\" \"2020-W05-6T10\"  # Compute the last moment of the last iso week of the year calendar_end(x, \"year\") #> <iso_year_week_day<hour>[2]> #> [1] \"2019-W52-7T23\" \"2020-W53-7T23\"  # Compare that to just setting the week to `\"last\"`, # which doesn't affect the other components set_week(x, \"last\") #> <iso_year_week_day<hour>[2]> #> [1] \"2019-W52-6T10\" \"2020-W53-6T10\""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: iso-year-week-day — iso-year-week-day-count-between","title":"Counting: iso-year-week-day — iso-year-week-day-count-between","text":"iso-year-week-day method calendar_count_between() generic. counts number precision units start end (.e., number ISO years).","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: iso-year-week-day — iso-year-week-day-count-between","text":"","code":"# S3 method for class 'clock_iso_year_week_day' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: iso-year-week-day — iso-year-week-day-count-between","text":"start, end [clock_iso_year_week_day] pair iso-year-week-day vectors. recycled common size. precision [character(1)] One : \"year\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: iso-year-week-day — iso-year-week-day-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: iso-year-week-day — iso-year-week-day-count-between","text":"","code":"# Compute the number of whole ISO years between two dates x <- iso_year_week_day(2001, 1, 2) y <- iso_year_week_day(2021, 1, c(1, 3)) calendar_count_between(x, y, \"year\") #> [1] 19 20"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: iso-year-week-day — iso-year-week-day-getters","title":"Getters: iso-year-week-day — iso-year-week-day-getters","text":"iso-year-week-day methods getter generics. get_year() returns ISO year. Note can differ Gregorian year. get_week() returns ISO week current ISO year. get_day() returns value 1-7 indicating weekday current ISO week, 1 = Monday 7 = Sunday, line ISO standard. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: iso-year-week-day — iso-year-week-day-getters","text":"","code":"# S3 method for class 'clock_iso_year_week_day' get_year(x)  # S3 method for class 'clock_iso_year_week_day' get_week(x)  # S3 method for class 'clock_iso_year_week_day' get_day(x)  # S3 method for class 'clock_iso_year_week_day' get_hour(x)  # S3 method for class 'clock_iso_year_week_day' get_minute(x)  # S3 method for class 'clock_iso_year_week_day' get_second(x)  # S3 method for class 'clock_iso_year_week_day' get_millisecond(x)  # S3 method for class 'clock_iso_year_week_day' get_microsecond(x)  # S3 method for class 'clock_iso_year_week_day' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: iso-year-week-day — iso-year-week-day-getters","text":"x [clock_iso_year_week_day] iso-year-week-day get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: iso-year-week-day — iso-year-week-day-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: iso-year-week-day — iso-year-week-day-getters","text":"","code":"x <- iso_year_week_day(2019, 50:52, 1:3) x #> <iso_year_week_day<day>[3]> #> [1] \"2019-W50-1\" \"2019-W51-2\" \"2019-W52-3\"  # Get the ISO week get_week(x) #> [1] 50 51 52  # Gets the weekday, 1 = Monday, 7 = Sunday get_day(x) #> [1] 1 2 3  # Note that the ISO year can differ from the Gregorian year iso <- iso_year_week_day(2019, 1, 1) ymd <- as_year_month_day(iso)  get_year(iso) #> [1] 2019 get_year(ymd) #> [1] 2018"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: iso-year-week-day — iso-year-week-day-group","title":"Grouping: iso-year-week-day — iso-year-week-day-group","text":"iso-year-week-day method calendar_group() generic. Grouping iso-year-week-day object can done precision, long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: iso-year-week-day — iso-year-week-day-group","text":"","code":"# S3 method for class 'clock_iso_year_week_day' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: iso-year-week-day — iso-year-week-day-group","text":"x [clock_iso_year_week_day] iso-year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: iso-year-week-day — iso-year-week-day-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: iso-year-week-day — iso-year-week-day-group","text":"","code":"x <- iso_year_week_day(2019, 1:52)  # Group by 3 ISO weeks calendar_group(x, \"week\", n = 3) #> <iso_year_week_day<week>[52]> #>  [1] \"2019-W01\" \"2019-W01\" \"2019-W01\" \"2019-W04\" \"2019-W04\" \"2019-W04\" #>  [7] \"2019-W07\" \"2019-W07\" \"2019-W07\" \"2019-W10\" \"2019-W10\" \"2019-W10\" #> [13] \"2019-W13\" \"2019-W13\" \"2019-W13\" \"2019-W16\" \"2019-W16\" \"2019-W16\" #> [19] \"2019-W19\" \"2019-W19\" \"2019-W19\" \"2019-W22\" \"2019-W22\" \"2019-W22\" #> [25] \"2019-W25\" \"2019-W25\" \"2019-W25\" \"2019-W28\" \"2019-W28\" \"2019-W28\" #> [31] \"2019-W31\" \"2019-W31\" \"2019-W31\" \"2019-W34\" \"2019-W34\" \"2019-W34\" #> [37] \"2019-W37\" \"2019-W37\" \"2019-W37\" \"2019-W40\" \"2019-W40\" \"2019-W40\" #> [43] \"2019-W43\" \"2019-W43\" \"2019-W43\" \"2019-W46\" \"2019-W46\" \"2019-W46\" #> [49] \"2019-W49\" \"2019-W49\" \"2019-W49\" \"2019-W52\"  y <- iso_year_week_day(2000:2020, 1, 1)  # Group by 2 ISO years calendar_group(y, \"year\", n = 2) #> <iso_year_week_day<year>[21]> #>  [1] \"2000\" \"2000\" \"2002\" \"2002\" \"2004\" \"2004\" \"2006\" \"2006\" \"2008\" #> [10] \"2008\" \"2010\" \"2010\" \"2012\" \"2012\" \"2014\" \"2014\" \"2016\" \"2016\" #> [19] \"2018\" \"2018\" \"2020\""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: iso-year-week-day — iso-year-week-day-narrow","title":"Narrow: iso-year-week-day — iso-year-week-day-narrow","text":"iso-year-week-day method calendar_narrow() generic. narrows iso-year-week-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: iso-year-week-day — iso-year-week-day-narrow","text":"","code":"# S3 method for class 'clock_iso_year_week_day' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: iso-year-week-day — iso-year-week-day-narrow","text":"x [clock_iso_year_week_day] iso-year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: iso-year-week-day — iso-year-week-day-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: iso-year-week-day — iso-year-week-day-narrow","text":"","code":"# Day precision x <- iso_year_week_day(2019, 1, 5) x #> <iso_year_week_day<day>[1]> #> [1] \"2019-W01-5\"  # Narrowed to week precision calendar_narrow(x, \"week\") #> <iso_year_week_day<week>[1]> #> [1] \"2019-W01\""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: iso-year-week-day — iso-year-week-day-setters","title":"Setters: iso-year-week-day — iso-year-week-day-setters","text":"iso-year-week-day methods setter generics. set_year() sets ISO year. set_week() sets ISO week year. Valid values range [1, 53]. set_day() sets day week. Valid values range [1, 7], 1 = Monday, 7 = Sunday. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: iso-year-week-day — iso-year-week-day-setters","text":"","code":"# S3 method for class 'clock_iso_year_week_day' set_year(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_week(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_day(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_hour(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_minute(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_second(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_millisecond(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_microsecond(x, value, ...)  # S3 method for class 'clock_iso_year_week_day' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: iso-year-week-day — iso-year-week-day-setters","text":"x [clock_iso_year_week_day] iso-year-week-day vector. value [integer / \"last\"] value set component . set_week(), can also \"last\" adjust last week current ISO year. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: iso-year-week-day — iso-year-week-day-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: iso-year-week-day — iso-year-week-day-setters","text":"","code":"# Year precision vector x <- iso_year_week_day(2019:2023)  # Promote to week precision by setting the week # (Note that some ISO weeks have 52 weeks, and others have 53) x <- set_week(x, \"last\") x #> <iso_year_week_day<week>[5]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\"  # Set to an invalid week invalid <- set_week(x, 53) invalid #> <iso_year_week_day<week>[5]> #> [1] \"2019-W53\" \"2020-W53\" \"2021-W53\" \"2022-W53\" \"2023-W53\"  # Here are the invalid ones (they only have 52 weeks) invalid[invalid_detect(invalid)] #> <iso_year_week_day<week>[4]> #> [1] \"2019-W53\" \"2021-W53\" \"2022-W53\" \"2023-W53\"  # Resolve the invalid dates by choosing the previous/next valid moment invalid_resolve(invalid, invalid = \"previous\") #> <iso_year_week_day<week>[5]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\" invalid_resolve(invalid, invalid = \"next\") #> <iso_year_week_day<week>[5]> #> [1] \"2020-W01\" \"2020-W53\" \"2022-W01\" \"2023-W01\" \"2024-W01\""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: iso-year-week-day — iso-year-week-day-widen","title":"Widen: iso-year-week-day — iso-year-week-day-widen","text":"iso-year-week-day method calendar_widen() generic. widens iso-year-week-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: iso-year-week-day — iso-year-week-day-widen","text":"","code":"# S3 method for class 'clock_iso_year_week_day' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: iso-year-week-day — iso-year-week-day-widen","text":"x [clock_iso_year_week_day] iso-year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: iso-year-week-day — iso-year-week-day-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso-year-week-day-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: iso-year-week-day — iso-year-week-day-widen","text":"","code":"# Week precision x <- iso_year_week_day(2019, 1) x #> <iso_year_week_day<week>[1]> #> [1] \"2019-W01\"  # Widen to day precision # In the ISO calendar, the first day of the week is a Monday calendar_widen(x, \"day\") #> <iso_year_week_day<day>[1]> #> [1] \"2019-W01-1\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <iso_year_week_day<second>[1]> #> [1] \"2019-W01-1T00:00:00\""},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: iso-year-week-day — iso_year_week_day","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"iso_year_week_day() constructs calendar ISO year, week number, week day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"","code":"iso_year_week_day(   year,   week = NULL,   day = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"year [integer] ISO year. Values [-32767, 32767] generally allowed. week [integer / \"last\" / NULL] ISO week. Values [1, 53] allowed. \"last\", last week ISO year returned. day [integer / NULL] day week. Values [1, 7] allowed, 1 = Monday 7 = Sunday, accordance ISO specifications. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"iso-year-week-day calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/iso_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: iso-year-week-day — iso_year_week_day","text":"","code":"# Year-week x <- iso_year_week_day(2019:2025, 1) x #> <iso_year_week_day<week>[7]> #> [1] \"2019-W01\" \"2020-W01\" \"2021-W01\" \"2022-W01\" \"2023-W01\" \"2024-W01\" #> [7] \"2025-W01\"  # 2nd day of the first ISO week in multiple years iso_days <- set_day(x, clock_iso_weekdays$tuesday) iso_days #> <iso_year_week_day<day>[7]> #> [1] \"2019-W01-2\" \"2020-W01-2\" \"2021-W01-2\" \"2022-W01-2\" \"2023-W01-2\" #> [6] \"2024-W01-2\" \"2025-W01-2\"  # What year-month-day is this? as_year_month_day(iso_days) #> <year_month_day<day>[7]> #> [1] \"2019-01-01\" \"2019-12-31\" \"2021-01-05\" \"2022-01-04\" \"2023-01-03\" #> [6] \"2024-01-02\" \"2024-12-31\""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Info: naive-time — naive_time_info","title":"Info: naive-time — naive_time_info","text":"naive_time_info() retrieves set low-level information generally required date-time manipulations. used implicitly as_zoned_time() converting naive-time. returns data frame following columns: type: character vector containing one : \"unique\": naive-time maps uniquely zoned-time can created zone. \"nonexistent\": naive-time exist zoned-time can created zone. \"ambiguous\": naive-time exists twice zoned-time can created zone. first: sys_time_info() data frame. second: sys_time_info() data frame.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"type-unique-","dir":"Reference","previous_headings":"","what":"type == \"unique\"","title":"Info: naive-time — naive_time_info","text":"first filled sys-info representing daylight saving time information time point zone. second contain NA values, ambiguity represent information .","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"type-nonexistent-","dir":"Reference","previous_headings":"","what":"type == \"nonexistent\"","title":"Info: naive-time — naive_time_info","text":"first filled sys-info ends just prior x. second filled sys-info begins just x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"type-ambiguous-","dir":"Reference","previous_headings":"","what":"type == \"ambiguous\"","title":"Info: naive-time — naive_time_info","text":"first filled sys-info ends just x. second filled sys-info starts just x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info: naive-time — naive_time_info","text":"","code":"naive_time_info(x, zone)"},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info: naive-time — naive_time_info","text":"x [clock_naive_time] naive-time. zone [character] valid time zone name. Unlike functions clock, naive_time_info() zone vectorized recycled x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info: naive-time — naive_time_info","text":"data frame low level information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Info: naive-time — naive_time_info","text":"tibble package installed, recommended convert output tibble as_tibble(), print df-cols much nicer.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Info: naive-time — naive_time_info","text":"","code":"library(vctrs)  x <- year_month_day(1970, 04, 26, 02, 30, 00) x <- as_naive_time(x)  # Maps uniquely to a time in London naive_time_info(x, \"Europe/London\") #>     type         first.begin           first.end first.offset #> 1 unique 1968-10-26T23:00:00 1971-10-31T02:00:00         3600 #>   first.dst first.abbreviation second.begin second.end second.offset #> 1     FALSE                BST         <NA>       <NA>          <NA> #>   second.dst second.abbreviation #> 1         NA                <NA>  # This naive-time never existed in New York! # A DST gap jumped the time from 01:59:59 -> 03:00:00, # skipping the 2 o'clock hour zone <- \"America/New_York\" info <- naive_time_info(x, zone) info #>          type         first.begin           first.end first.offset #> 1 nonexistent 1969-10-26T06:00:00 1970-04-26T07:00:00       -18000 #>   first.dst first.abbreviation        second.begin          second.end #> 1     FALSE                EST 1970-04-26T07:00:00 1970-10-25T06:00:00 #>   second.offset second.dst second.abbreviation #> 1        -14400       TRUE                 EDT  # You can recreate various `nonexistent` strategies with this info as_zoned_time(x, zone, nonexistent = \"roll-forward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:00:00-04:00\" as_zoned_time(info$first$end, zone) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:00:00-04:00\"  as_zoned_time(x, zone, nonexistent = \"roll-backward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:59:59-05:00\" as_zoned_time(info$first$end - 1, zone) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:59:59-05:00\"  as_zoned_time(x, zone, nonexistent = \"shift-forward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:30:00-04:00\" as_zoned_time(as_sys_time(x) - info$first$offset, zone) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:30:00-04:00\"  as_zoned_time(x, zone, nonexistent = \"shift-backward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:00-05:00\" as_zoned_time(as_sys_time(x) - info$second$offset, zone) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T01:30:00-05:00\"  # --------------------------------------------------------------------------- # Normalizing to UTC  # Imagine you had the following printed times, and knowledge that they # are to be interpreted as in the corresponding time zones df <- data_frame(   x = c(\"2020-01-05 02:30:00\", \"2020-06-03 12:20:05\"),   zone = c(\"America/Los_Angeles\", \"Europe/London\") )  # The times are assumed to be naive-times, i.e. if you lived in the `zone` # at the moment the time was recorded, then you would have seen that time # printed on the clock. Currently, these are strings. To convert them to # a time based type, you'll have to acknowledge that R only lets you have # 1 time zone in a vector of date-times at a time. So you'll need to # normalize these naive-times. The easiest thing to normalize them to # is UTC. df$naive <- naive_time_parse(df$x) #> Warning: Failed to parse 2 strings, beginning at location 1. Returning `NA` at the locations where there were parse failures.  # Get info about the naive times using a vector of zones info <- naive_time_info(df$naive, df$zone) info #>   type first.begin first.end first.offset first.dst first.abbreviation #> 1 <NA>        <NA>      <NA>         <NA>        NA               <NA> #> 2 <NA>        <NA>      <NA>         <NA>        NA               <NA> #>   second.begin second.end second.offset second.dst second.abbreviation #> 1         <NA>       <NA>          <NA>         NA                <NA> #> 2         <NA>       <NA>          <NA>         NA                <NA>  # We'll assume that some system generated these naive-times with no # chance of them ever being nonexistent or ambiguous. So now all we have # to do is use the offset to convert the naive-time to a sys-time. The # relationship used is: # offset = naive_time - sys_time df$sys <- as_sys_time(df$naive) - info$first$offset df #>                     x                zone naive  sys #> 1 2020-01-05 02:30:00 America/Los_Angeles  <NA> <NA> #> 2 2020-06-03 12:20:05       Europe/London  <NA> <NA>  # At this point, both times are in UTC. From here, you can convert them # both to either America/Los_Angeles or Europe/London as required. as_zoned_time(df$sys, \"America/Los_Angeles\") #> <zoned_time<second><America/Los_Angeles>[2]> #> [1] NA NA as_zoned_time(df$sys, \"Europe/London\") #> <zoned_time<second><Europe/London>[2]> #> [1] NA NA"},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: naive-time — naive_time_parse","title":"Parsing: naive-time — naive_time_parse","text":"naive_time_parse() parser naive-time. naive_time_parse() useful date-time strings like \"2020-01-01T01:04:30\". attached UTC offset time zone name, parsing string naive-time best option. know string interpreted specific time zone, parse naive-time, use as_zoned_time(). default options assume x parsed second precision, using format string \"%Y-%m-%dT%H:%M:%S\". matches default result calling format() naive-time. naive_time_parse() ignores %z %Z commands. date-time strings contain full time zone name UTC offset, use zoned_time_parse_complete(). contain time zone abbreviation, use zoned_time_parse_abbrev(). date-time strings contain UTC offset, full time zone name, use sys_time_parse().","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: naive-time — naive_time_parse","text":"","code":"naive_time_parse(   x,   ...,   format = NULL,   precision = \"second\",   locale = clock_locale() )"},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: naive-time — naive_time_parse","text":"x [character] character vector parse. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. precision [character(1)] precision resulting time point. One : \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" Setting precision determines much information %S attempts parse. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: naive-time — naive_time_parse","text":"naive-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":"full-precision-parsing","dir":"Reference","previous_headings":"","what":"Full Precision Parsing","title":"Parsing: naive-time — naive_time_parse","text":"highly recommended parse information date-time string type least precise string. example, string fractional seconds, require seconds, specify sub-second precision, round seconds manually using whatever convention appropriate use case. Parsing string directly second precision result ambiguous undefined, unlikely work might expect.","code":""},{"path":"https://clock.r-lib.org/dev/reference/naive_time_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: naive-time — naive_time_parse","text":"","code":"naive_time_parse(\"2020-01-01T05:06:07\") #> <naive_time<second>[1]> #> [1] \"2020-01-01T05:06:07\"  # Day precision naive_time_parse(\"2020-01-01\", precision = \"day\") #> <naive_time<day>[1]> #> [1] \"2020-01-01\"  # Nanosecond precision, but using a day based format naive_time_parse(\"2020-01-01\", format = \"%Y-%m-%d\", precision = \"nanosecond\") #> <naive_time<nanosecond>[1]> #> [1] \"2020-01-01T00:00:00.000000000\"  # Remember that the `%z` and `%Z` commands are ignored entirely! naive_time_parse(   \"2020-01-01 -4000 America/New_York\",   format = \"%Y-%m-%d %z %Z\" ) #> <naive_time<second>[1]> #> [1] \"2020-01-01T00:00:00\"  # --------------------------------------------------------------------------- # Fractional seconds and POSIXct  # If you have a string with fractional seconds and want to convert it to # a POSIXct, remember that clock treats POSIXct as a second precision type. # Ideally, you'd use a clock type that can support fractional seconds, but # if you really want to parse it into a POSIXct, the correct way to do so # is to parse the full fractional time point with the correct `precision`, # then round to seconds using whatever convention you require, and finally # convert that to POSIXct. x <- c(\"2020-01-01T00:00:00.123\", \"2020-01-01T00:00:00.555\")  # First, parse string with full precision x <- naive_time_parse(x, precision = \"millisecond\") x #> <naive_time<millisecond>[2]> #> [1] \"2020-01-01T00:00:00.123\" \"2020-01-01T00:00:00.555\"  # Then round to second with a floor, ceiling, or round to nearest time_point_floor(x, \"second\") #> <naive_time<second>[2]> #> [1] \"2020-01-01T00:00:00\" \"2020-01-01T00:00:00\" time_point_round(x, \"second\") #> <naive_time<second>[2]> #> [1] \"2020-01-01T00:00:00\" \"2020-01-01T00:00:01\"  # Finally, convert to POSIXct as_date_time(time_point_round(x, \"second\"), zone = \"UTC\") #> [1] \"2020-01-01 00:00:00 UTC\" \"2020-01-01 00:00:01 UTC\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: date-time — posixt-arithmetic","title":"Arithmetic: date-time — posixt-arithmetic","text":"POSIXct/POSIXlt methods arithmetic generics. Calendrical based arithmetic: functions convert naive-time, year-month-day, perform arithmetic, convert back date-time. add_years() add_quarters() add_months() Naive-time based arithmetic: functions convert naive-time, perform arithmetic, convert back date-time. add_weeks() add_days() Sys-time based arithmetic: functions convert sys-time, perform arithmetic, convert back date-time. add_hours() add_minutes() add_seconds()","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: date-time — posixt-arithmetic","text":"","code":"# S3 method for class 'POSIXt' add_years(x, n, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' add_quarters(x, n, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' add_months(x, n, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' add_weeks(x, n, ..., nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' add_days(x, n, ..., nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' add_hours(x, n, ...)  # S3 method for class 'POSIXt' add_minutes(x, n, ...)  # S3 method for class 'POSIXt' add_seconds(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: date-time — posixt-arithmetic","text":"x [POSIXct / POSIXlt] date-time vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: date-time — posixt-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: date-time — posixt-arithmetic","text":"Adding single quarter add_quarters() equivalent adding 3 months. x n recycled using tidyverse recycling rules. Calendrical based arithmetic potential generate invalid dates (like 31st February), nonexistent times (due daylight saving time gaps), ambiguous times (due daylight saving time fallbacks). Naive-time based arithmetic never generate invalid date, may generate nonexistent ambiguous time (.e. added 1 day landed daylight saving time gap). Sys-time based arithmetic operates UTC time zone, means never generate invalid dates nonexistent / ambiguous times. conversion POSIXct/POSIXlt corresponding clock type uses \"best guess\" whether want arithmetic using naive-time sys-time. example, adding months, probably want retain printed time converting year-month-day perform arithmetic, conversion goes naive-time. However, adding smaller units like seconds, probably want \"2020-03-08 01:59:59\" + 1 second America/New_York time zone return \"2020-03-08 03:00:00\", taking account fact daylight saving time gap. requires arithmetic sys-time, clock converts . disagree heuristic reason, can take control perform conversions . example, convert previous example naive-time instead sys-time manually as_naive_time(), add 1 second giving \"2020-03-08 02:00:00\", convert back POSIXct/POSIXlt, dealing nonexistent time gets created using nonexistent argument .POSIXct().","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"relative-ordering","dir":"Reference","previous_headings":"","what":"Relative ordering","title":"Arithmetic: date-time — posixt-arithmetic","text":"part, adding time based units date-times retain relative ordering input. example, x[1] < x[2] add_*() call, generally also true result. Using invalid = \"previous\" / \"next\" nonexistent = \"roll-forward\" / \"roll-backward\" ensures holds invalid nonexistent issues encountered. said, date-times edge case related ambiguous times relative ordering change. Consider three date-times:   case, daylight saving time fallback 2012-04-01 clocks went 02:59:59 AEDT -> 02:00:00 AEST. times precisely 30 minutes apart, increasing order. add sys-time based units like hours, minutes, seconds, relative ordering date-times preserved. However, arithmetic goes naive-time, like adding days months, preserve ordering :   Note 1st 3rd values result , 1st value longer 2nd value. Adding larger units time naive-time generally make sense adding sys-time, come one edge case aware working date-times (affect dates). potential issue, consider adding sys-time based units (hours, minutes, seconds) issues.","code":"x <- c(   date_time_build(2012, 4, 1, 2, 30, zone = \"Australia/Melbourne\", ambiguous = \"earliest\"),   date_time_build(2012, 4, 1, 2, 00, zone = \"Australia/Melbourne\", ambiguous = \"latest\"),   date_time_build(2012, 4, 1, 2, 30, zone = \"Australia/Melbourne\", ambiguous = \"latest\") ) x #> [1] \"2012-04-01 02:30:00 AEDT\" \"2012-04-01 02:00:00 AEST\" #> [3] \"2012-04-01 02:30:00 AEST\" add_days(x, 1) #> [1] \"2012-04-02 02:30:00 AEST\" \"2012-04-02 02:00:00 AEST\" #> [3] \"2012-04-02 02:30:00 AEST\" add_months(x, 1) #> [1] \"2012-05-01 02:30:00 AEST\" \"2012-05-01 02:00:00 AEST\" #> [3] \"2012-05-01 02:30:00 AEST\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: date-time — posixt-arithmetic","text":"","code":"x <- as.POSIXct(\"2019-01-01\", tz = \"America/New_York\")  add_years(x, 1:5) #> [1] \"2020-01-01 EST\" \"2021-01-01 EST\" \"2022-01-01 EST\" \"2023-01-01 EST\" #> [5] \"2024-01-01 EST\"  y <- as.POSIXct(\"2019-01-31 00:30:00\", tz = \"America/New_York\")  # Adding 1 month to `y` generates an invalid date. Unlike year-month-day # types, R's native date-time types cannot handle invalid dates, so you must # resolve them immediately. If you don't you get an error: try(add_months(y, 1:2)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. add_months(as_year_month_day(y), 1:2) #> <year_month_day<second>[2]> #> [1] \"2019-02-31T00:30:00\" \"2019-03-31T00:30:00\"  # Resolve invalid dates by specifying an invalid date resolution strategy # with the `invalid` argument. Using `\"previous\"` here sets the date-time to # the previous valid moment in time - i.e. the end of the month. The # time is set to the last moment in the day to retain the relative ordering # within your input. If you are okay with potentially losing this, and # want to retain your time of day, you can use `\"previous-day\"` to set the # date-time to the previous valid day, while keeping the time of day. add_months(y, 1:2, invalid = \"previous\") #> [1] \"2019-02-28 23:59:59 EST\" \"2019-03-31 00:30:00 EDT\" add_months(y, 1:2, invalid = \"previous-day\") #> [1] \"2019-02-28 00:30:00 EST\" \"2019-03-31 00:30:00 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: date-time — posixt-boundary","title":"Boundaries: date-time — posixt-boundary","text":"POSIXct/POSIXlt method date_start() date_end() generics.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: date-time — posixt-boundary","text":"","code":"# S3 method for class 'POSIXt' date_start(   x,   precision,   ...,   invalid = NULL,   nonexistent = NULL,   ambiguous = x )  # S3 method for class 'POSIXt' date_end(x, precision, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)"},{"path":"https://clock.r-lib.org/dev/reference/posixt-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: date-time — posixt-boundary","text":"x [POSIXct / POSIXlt] date-time vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: date-time — posixt-boundary","text":"x components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: date-time — posixt-boundary","text":"","code":"x <- date_time_build(2019:2021, 2:4, 3:5, 4, 5, 6, zone = \"America/New_York\") x #> [1] \"2019-02-03 04:05:06 EST\" \"2020-03-04 04:05:06 EST\" #> [3] \"2021-04-05 04:05:06 EDT\"  # Last moment of the month date_end(x, \"month\") #> [1] \"2019-02-28 23:59:59 EST\" \"2020-03-31 23:59:59 EDT\" #> [3] \"2021-04-30 23:59:59 EDT\"  # Notice that this is different from just setting the day to `\"last\"` set_day(x, \"last\") #> [1] \"2019-02-28 04:05:06 EST\" \"2020-03-31 04:05:06 EDT\" #> [3] \"2021-04-30 04:05:06 EDT\"  # Last moment of the year date_end(x, \"year\") #> [1] \"2019-12-31 23:59:59 EST\" \"2020-12-31 23:59:59 EST\" #> [3] \"2021-12-31 23:59:59 EST\"  # First moment of the hour date_start(x, \"hour\") #> [1] \"2019-02-03 04:00:00 EST\" \"2020-03-04 04:00:00 EST\" #> [3] \"2021-04-05 04:00:00 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: date-times — posixt-count-between","title":"Counting: date-times — posixt-count-between","text":"POSIXct/POSIXlt method date_count_between() generic. date_count_between() counts number precision units start end (.e., number years months). count corresponds whole number units, never return fractional value. suitable , say, computing whole number years months two dates, accounting day month time day. Internally, date-time converted one following three clock types, counting done directly type. choice type based common interpretation precision, ultimately heuristic. See examples information. Calendrical based counting: precisions convert year-month-day calendar count type. \"year\" \"quarter\" \"month\" Naive-time based counting: precisions convert naive-time count type. \"week\" \"day\" Sys-time based counting: precisions convert sys-time count type. \"hour\" \"minute\" \"second\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: date-times — posixt-count-between","text":"","code":"# S3 method for class 'POSIXt' date_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: date-times — posixt-count-between","text":"start, end [POSIXct / POSIXlt] pair date-time vectors. recycled common size. precision [character(1)] One : \"year\" \"quarter\" \"month\" \"week\" \"day\" \"hour\" \"minute\" \"second\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: date-times — posixt-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting: date-times — posixt-count-between","text":"\"quarter\" equivalent \"month\" precision n set n * 3L.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"comparison-direction","dir":"Reference","previous_headings":"","what":"Comparison Direction","title":"Counting: date-times — posixt-count-between","text":"computed count property start <= end, start + <count> <= end. Similarly, start >= end, start + <count> >= end. words, comparison direction start end never change adding count start. makes function useful repeated count computations increasingly fine precisions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: date-times — posixt-count-between","text":"","code":"start <- date_time_parse(\"2000-05-05 02:00:00\", zone = \"America/New_York\") end <- date_time_parse(   c(\"2020-05-05 01:00:00\", \"2020-05-05 03:00:00\"),   zone = \"America/New_York\" )  # Age in years date_count_between(start, end, \"year\") #> [1] 19 20  # Number of \"whole\" months between these dates. i.e. # `2000-05-05 02:00:00 -> 2020-04-05 02:00:00` is 239 months # `2000-05-05 02:00:00 -> 2020-05-05 02:00:00` is 240 months # Since `2020-05-05 01:00:00` occurs before the 2nd hour, # it gets a count of 239 date_count_between(start, end, \"month\") #> [1] 239 240  # Number of seconds between date_count_between(start, end, \"second\") #> [1] 631148400 631155600  # --------------------------------------------------------------------------- # Naive-time VS Sys-time interpretation  # The difference between whether `start` and `end` are converted to a # naive-time vs a sys-time comes into play when dealing with daylight # savings.  # Here are two times around a 1 hour DST gap where clocks jumped from # 01:59:59 -> 03:00:00 x <- date_time_build(1970, 4, 26, 1, 50, 00, zone = \"America/New_York\") y <- date_time_build(1970, 4, 26, 3, 00, 00, zone = \"America/New_York\")  # When treated like sys-times, these are considered to be 10 minutes apart, # which is the amount of time that would have elapsed if you were watching # a clock as it changed between these two times. date_count_between(x, y, \"minute\") #> [1] 10  # Lets add a 3rd date that is ~1 day ahead of these z <- date_time_build(1970, 4, 27, 1, 55, 00, zone = \"America/New_York\")  # When treated like naive-times, `z` is considered to be at least 1 day ahead # of `x`, because `01:55:00` is after `01:50:00`. This is probably what you # expected. date_count_between(x, z, \"day\") #> [1] 1  # If these were interpreted like sys-times, then `z` would not be considered # to be 1 day ahead. That would look something like this: date_count_between(x, z, \"second\") #> [1] 83100 trunc(date_count_between(x, z, \"second\") / 86400) #> [1] 0  # This is because there have only been 83,100 elapsed seconds since `x`, # which isn't a full day's worth (86,400 seconds). But we'd generally # consider `z` to be 1 day ahead of `x` (and ignore the DST gap), so that is # how it is implemented.  # You can override this by converting directly to sys-time, then using # `time_point_count_between()` x_st <- as_sys_time(x) x_st #> <sys_time<second>[1]> #> [1] \"1970-04-26T06:50:00\"  z_st <- as_sys_time(z) z_st #> <sys_time<second>[1]> #> [1] \"1970-04-27T05:55:00\"  time_point_count_between(x_st, z_st, \"day\") #> [1] 0"},{"path":"https://clock.r-lib.org/dev/reference/posixt-formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting: date-time — posixt-formatting","title":"Formatting: date-time — posixt-formatting","text":"POSIXct method date_format() generic. date_format() formats date-time (POSIXct) using format string. format NULL, default format \"%Y-%m-%dT%H:%M:%S%Ez[%Z]\" used. matches default format date_time_parse_complete() parses. Additionally, format matches de-facto standard extension RFC 3339 creating completely unambiguous date-times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting: date-time — posixt-formatting","text":"","code":"# S3 method for class 'POSIXt' date_format(   x,   ...,   format = NULL,   locale = clock_locale(),   abbreviate_zone = FALSE )"},{"path":"https://clock.r-lib.org/dev/reference/posixt-formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting: date-time — posixt-formatting","text":"x [POSIXct / POSIXlt] date-time vector. ... dots future extensions must empty. format [character(1) / NULL] NULL, default format used, depends type input. Otherwise, format string combination : Year %C: year divided 100 using floored division. result single decimal digit, prefixed 0. %y: last two decimal digits year. result single digit prefixed 0. %Y: year decimal number. result less four digits left-padded 0 four digits. Month %b, %h: locale's abbreviated month name. %B: locale's full month name. %m: month decimal number. January 01. result single digit, prefixed 0. Day %d: day month decimal number. result single decimal digit, prefixed 0. Day week %: locale's abbreviated weekday name. %: locale's full weekday name. %w: weekday decimal number (0-6), Sunday 0. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. result single digit prefixed 0. %G: ISO week-based year decimal number. result less four digits left-padded 0 four digits. %V: ISO week-based week number decimal number. result single digit, prefixed 0. %u: ISO weekday decimal number (1-7), Monday 1. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. result single digit, prefixed 0. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. result single digit, prefixed 0. Day year %j: day year decimal number. January 1 001. result less three digits, left-padded 0 three digits. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. Time day %H: hour (24-hour clock) decimal number. result single digit, prefixed 0. %: hour (12-hour clock) decimal number. result single digit, prefixed 0. %M: minute decimal number. result single digit, prefixed 0. %S: Seconds decimal number. Fractional seconds printed precision input. character decimal point localized according locale. %p: locale's equivalent /PM designations associated 12-hour clock. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Nearly equivalent %:%M:%S %p, seconds always printed second precision. Time zone %z: offset UTC ISO 8601 format. example -0430 refers 4 hours 30 minutes behind UTC. offset zero, +0000 used. modified command %Ez inserts : hour minutes, like -04:30. %Z: full time zone name. abbreviate_zone TRUE, time zone abbreviation. Miscellaneous %c: date time representation. Similar , exactly , %%b %d %H:%M:%S %Y. %%: % character. %n: newline character. %t: horizontal-tab character. locale [clock_locale] locale object created clock_locale(). abbreviate_zone [logical(1)] TRUE, %Z returns abbreviated time zone name. FALSE, %Z returns full time zone name.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting: date-time — posixt-formatting","text":"character vector formatted input.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting: date-time — posixt-formatting","text":"","code":"x <- date_time_parse(   c(\"1970-04-26 01:30:00\", \"1970-04-26 03:30:00\"),   zone = \"America/New_York\" )  # Default date_format(x) #> [1] \"1970-04-26T01:30:00-05:00[America/New_York]\" #> [2] \"1970-04-26T03:30:00-04:00[America/New_York]\"  # Which is parseable by `date_time_parse_complete()` date_time_parse_complete(date_format(x)) #> [1] \"1970-04-26 01:30:00 EST\" \"1970-04-26 03:30:00 EDT\"  date_format(x, format = \"%B %d, %Y %H:%M:%S\") #> [1] \"April 26, 1970 01:30:00\" \"April 26, 1970 03:30:00\"  # By default, `%Z` uses the full zone name, but you can switch to the # abbreviated name date_format(x, format = \"%z %Z\") #> [1] \"-0500 America/New_York\" \"-0400 America/New_York\" date_format(x, format = \"%z %Z\", abbreviate_zone = TRUE) #> [1] \"-0500 EST\" \"-0400 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: date-time — posixt-getters","title":"Getters: date-time — posixt-getters","text":"POSIXct/POSIXlt methods getter generics. get_year() returns Gregorian year. get_month() returns month year. get_day() returns day month. sub-daily getters extracting precise components, precision seconds. advanced component extraction, convert calendar type interested .","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: date-time — posixt-getters","text":"","code":"# S3 method for class 'POSIXt' get_year(x)  # S3 method for class 'POSIXt' get_month(x)  # S3 method for class 'POSIXt' get_day(x)  # S3 method for class 'POSIXt' get_hour(x)  # S3 method for class 'POSIXt' get_minute(x)  # S3 method for class 'POSIXt' get_second(x)"},{"path":"https://clock.r-lib.org/dev/reference/posixt-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: date-time — posixt-getters","text":"x [POSIXct / POSIXlt] date-time type get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: date-time — posixt-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: date-time — posixt-getters","text":"","code":"x <- as.POSIXct(\"2019-01-01\", tz = \"America/New_York\")  x <- add_days(x, 0:5) x <- set_second(x, 10:15)  get_day(x) #> [1] 1 2 3 4 5 6 get_second(x) #> [1] 10 11 12 13 14 15"},{"path":"https://clock.r-lib.org/dev/reference/posixt-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group date-time components — posixt-group","title":"Group date-time components — posixt-group","text":"POSIXct/POSIXlt method date_group() generic. date_group() groups single component date-time, month year, day month, hour day. need group complex components, like ISO weeks, quarters, convert calendar type contains component interested grouping .","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group date-time components — posixt-group","text":"","code":"# S3 method for class 'POSIXt' date_group(   x,   precision,   ...,   n = 1L,   invalid = NULL,   nonexistent = NULL,   ambiguous = x )"},{"path":"https://clock.r-lib.org/dev/reference/posixt-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group date-time components — posixt-group","text":"x [POSIXct / POSIXlt] date-time vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group date-time components — posixt-group","text":"x, grouped precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group date-time components — posixt-group","text":"","code":"x <- as.POSIXct(\"2019-01-01\", \"America/New_York\") x <- add_days(x, -3:5)  # Group by 2 days of the current month. # Note that this resets at the beginning of the month, creating day groups # of [29, 30] [31] [01, 02] [03, 04]. date_group(x, \"day\", n = 2) #> [1] \"2018-12-29 EST\" \"2018-12-29 EST\" \"2018-12-31 EST\" \"2019-01-01 EST\" #> [5] \"2019-01-01 EST\" \"2019-01-03 EST\" \"2019-01-03 EST\" \"2019-01-05 EST\" #> [9] \"2019-01-05 EST\"  # Group by month date_group(x, \"month\") #> [1] \"2018-12-01 EST\" \"2018-12-01 EST\" \"2018-12-01 EST\" \"2019-01-01 EST\" #> [5] \"2019-01-01 EST\" \"2019-01-01 EST\" \"2019-01-01 EST\" \"2019-01-01 EST\" #> [9] \"2019-01-01 EST\"  # Group by hour of the day y <- as.POSIXct(\"2019-12-30\", \"America/New_York\") y <- add_hours(y, 0:12) y #>  [1] \"2019-12-30 00:00:00 EST\" \"2019-12-30 01:00:00 EST\" #>  [3] \"2019-12-30 02:00:00 EST\" \"2019-12-30 03:00:00 EST\" #>  [5] \"2019-12-30 04:00:00 EST\" \"2019-12-30 05:00:00 EST\" #>  [7] \"2019-12-30 06:00:00 EST\" \"2019-12-30 07:00:00 EST\" #>  [9] \"2019-12-30 08:00:00 EST\" \"2019-12-30 09:00:00 EST\" #> [11] \"2019-12-30 10:00:00 EST\" \"2019-12-30 11:00:00 EST\" #> [13] \"2019-12-30 12:00:00 EST\"  date_group(y, \"hour\", n = 3) #>  [1] \"2019-12-30 00:00:00 EST\" \"2019-12-30 00:00:00 EST\" #>  [3] \"2019-12-30 00:00:00 EST\" \"2019-12-30 03:00:00 EST\" #>  [5] \"2019-12-30 03:00:00 EST\" \"2019-12-30 03:00:00 EST\" #>  [7] \"2019-12-30 06:00:00 EST\" \"2019-12-30 06:00:00 EST\" #>  [9] \"2019-12-30 06:00:00 EST\" \"2019-12-30 09:00:00 EST\" #> [11] \"2019-12-30 09:00:00 EST\" \"2019-12-30 09:00:00 EST\" #> [13] \"2019-12-30 12:00:00 EST\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding: date-time — posixt-rounding","title":"Rounding: date-time — posixt-rounding","text":"POSIXct/POSIXlt methods rounding generics. date_floor() rounds date-time multiple specified precision. date_ceiling() rounds date-time multiple specified precision. date_round() rounds depending closer, rounding ties. can group irregular periods \"month\" \"year\" using date_group().","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding: date-time — posixt-rounding","text":"","code":"# S3 method for class 'POSIXt' date_floor(   x,   precision,   ...,   n = 1L,   origin = NULL,   nonexistent = NULL,   ambiguous = x )  # S3 method for class 'POSIXt' date_ceiling(   x,   precision,   ...,   n = 1L,   origin = NULL,   nonexistent = NULL,   ambiguous = x )  # S3 method for class 'POSIXt' date_round(   x,   precision,   ...,   n = 1L,   origin = NULL,   nonexistent = NULL,   ambiguous = x )"},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding: date-time — posixt-rounding","text":"x [POSIXct / POSIXlt] date-time vector. precision [character(1)] One : \"week\" \"day\" \"hour\" \"minute\" \"second\" \"week\" alias \"day\" n * 7. ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use. origin [POSIXct(1) / POSIXlt(1) / NULL] origin start counting . origin must exactly time zone x. origin floored precision. information lost flooring, warning thrown. NULL, defaults midnight 1970-01-01 time zone x. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding: date-time — posixt-rounding","text":"x rounded specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding: date-time — posixt-rounding","text":"rounding \"week\", remember origin determines \"week start\". default, 1970-01-01 implicit origin, Thursday. like round weeks different week start, just supply origin weekday interested .","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding: date-time — posixt-rounding","text":"","code":"x <- as.POSIXct(\"2019-03-31\", \"America/New_York\") x <- add_days(x, 0:5)  # Flooring by 2 days, note that this is not tied to the current month, # and instead counts from the specified `origin`, so groups can cross # the month boundary date_floor(x, \"day\", n = 2) #> [1] \"2019-03-31 EDT\" \"2019-03-31 EDT\" \"2019-04-02 EDT\" \"2019-04-02 EDT\" #> [5] \"2019-04-04 EDT\" \"2019-04-04 EDT\"  # Compare to `date_group()`, which groups by the day of the month date_group(x, \"day\", n = 2) #> [1] \"2019-03-31 EDT\" \"2019-04-01 EDT\" \"2019-04-01 EDT\" \"2019-04-03 EDT\" #> [5] \"2019-04-03 EDT\" \"2019-04-05 EDT\"  # Note that daylight saving time gaps can throw off rounding x <- as.POSIXct(\"1970-04-26 01:59:59\", \"America/New_York\") + c(0, 1) x #> [1] \"1970-04-26 01:59:59 EST\" \"1970-04-26 03:00:00 EDT\"  # Rounding is done in naive-time, which means that rounding by 2 hours # will attempt to generate a time of 1970-04-26 02:00:00, which doesn't # exist in this time zone try(date_floor(x, \"hour\", n = 2)) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 2. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # You can handle this by specifying a nonexistent time resolution strategy date_floor(x, \"hour\", n = 2, nonexistent = \"roll-forward\") #> [1] \"1970-04-26 00:00:00 EST\" \"1970-04-26 03:00:00 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: date-time — posixt-sequence","title":"Sequences: date-time — posixt-sequence","text":"POSIXct method date_seq() generic. date_seq() generates date-time (POSIXct) sequence. calling date_seq(), exactly two following must specified: total_size","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: date-time — posixt-sequence","text":"","code":"# S3 method for class 'POSIXt' date_seq(   from,   ...,   to = NULL,   by = NULL,   total_size = NULL,   invalid = NULL,   nonexistent = NULL,   ambiguous = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: date-time — posixt-sequence","text":"[POSIXct(1) / POSIXlt(1)] date-time start sequence . ... dots future extensions must empty. [POSIXct(1) / POSIXlt(1) / NULL] date-time stop sequence . included result resulting sequence divides distance exactly. supplied along , components precise precision must match exactly. example, = duration_months(1), day, hour, minute, second components must match corresponding components . ensures generated sequence , minimum, weakly monotonic sequence date-times. time zone must match time zone exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, equivalent duration_seconds(). duration, allowed precision : year quarter month week day hour minute second total_size [positive integer(1) / NULL] size resulting sequence. specified alongside , must generate non-fractional sequence . invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: date-time — posixt-sequence","text":"date-time vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"sequence-generation","dir":"Reference","previous_headings":"","what":"Sequence Generation","title":"Sequences: date-time — posixt-sequence","text":"Different methods used generate sequences, depending precision implied . intended generate intuitive sequences, especially around daylight saving time gaps fallbacks. See examples details.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"calendrical-based-sequences-","dir":"Reference","previous_headings":"","what":"Calendrical based sequences:","title":"Sequences: date-time — posixt-sequence","text":"convert naive-time, year-month-day, generate sequence, convert back date-time. = duration_years() = duration_quarters() = duration_months()","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"naive-time-based-sequences-","dir":"Reference","previous_headings":"","what":"Naive-time based sequences:","title":"Sequences: date-time — posixt-sequence","text":"convert naive-time, generate sequence, convert back date-time. = duration_weeks() = duration_days()","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"sys-time-based-sequences-","dir":"Reference","previous_headings":"","what":"Sys-time based sequences:","title":"Sequences: date-time — posixt-sequence","text":"convert sys-time, generate sequence, convert back date-time. = duration_hours() = duration_minutes() = duration_seconds()","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: date-time — posixt-sequence","text":"","code":"zone <- \"America/New_York\"  from <- date_time_build(2019, 1, zone = zone) to <- date_time_build(2019, 1, second = 50, zone = zone)  # Defaults to second precision sequence date_seq(from, to = to, by = 7) #> [1] \"2019-01-01 00:00:00 EST\" \"2019-01-01 00:00:07 EST\" #> [3] \"2019-01-01 00:00:14 EST\" \"2019-01-01 00:00:21 EST\" #> [5] \"2019-01-01 00:00:28 EST\" \"2019-01-01 00:00:35 EST\" #> [7] \"2019-01-01 00:00:42 EST\" \"2019-01-01 00:00:49 EST\"  to <- date_time_build(2019, 1, 5, zone = zone)  # Use durations to change to alternative precisions date_seq(from, to = to, by = duration_days(1)) #> [1] \"2019-01-01 EST\" \"2019-01-02 EST\" \"2019-01-03 EST\" \"2019-01-04 EST\" #> [5] \"2019-01-05 EST\" date_seq(from, to = to, by = duration_hours(10)) #>  [1] \"2019-01-01 00:00:00 EST\" \"2019-01-01 10:00:00 EST\" #>  [3] \"2019-01-01 20:00:00 EST\" \"2019-01-02 06:00:00 EST\" #>  [5] \"2019-01-02 16:00:00 EST\" \"2019-01-03 02:00:00 EST\" #>  [7] \"2019-01-03 12:00:00 EST\" \"2019-01-03 22:00:00 EST\" #>  [9] \"2019-01-04 08:00:00 EST\" \"2019-01-04 18:00:00 EST\" date_seq(from, by = duration_minutes(-2), total_size = 3) #> [1] \"2019-01-01 00:00:00 EST\" \"2018-12-31 23:58:00 EST\" #> [3] \"2018-12-31 23:56:00 EST\"  # Note that components of `to` more precise than the precision of `by` # must match `from` exactly. For example, this is not well defined: from <- date_time_build(2019, 1, 1, 0, 1, 30, zone = zone) to <- date_time_build(2019, 1, 1, 5, 2, 20, zone = zone) try(date_seq(from, to = to, by = duration_hours(1))) #> Error in date_seq(from, to = to, by = duration_hours(1)) :  #>   All components of `from` and `to` more precise than \"hour\" must #> match. #> ℹ `from` is \"2019-01-01T05:01:30\". #> ℹ `to` is \"2019-01-01T10:02:20\".  # The minute and second components of `to` must match `from` to <- date_time_build(2019, 1, 1, 5, 1, 30, zone = zone) date_seq(from, to = to, by = duration_hours(1)) #> [1] \"2019-01-01 00:01:30 EST\" \"2019-01-01 01:01:30 EST\" #> [3] \"2019-01-01 02:01:30 EST\" \"2019-01-01 03:01:30 EST\" #> [5] \"2019-01-01 04:01:30 EST\" \"2019-01-01 05:01:30 EST\"  # ---------------------------------------------------------------------------  # Invalid dates must be resolved with the `invalid` argument from <- date_time_build(2019, 1, 31, zone = zone) to <- date_time_build(2019, 12, 31, zone = zone)  try(date_seq(from, to = to, by = duration_months(1))) #> Error in invalid_resolve(out, invalid = invalid) :  #>   Invalid date found at location 2. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. date_seq(from, to = to, by = duration_months(1), invalid = \"previous-day\") #>  [1] \"2019-01-31 EST\" \"2019-02-28 EST\" \"2019-03-31 EDT\" #>  [4] \"2019-04-30 EDT\" \"2019-05-31 EDT\" \"2019-06-30 EDT\" #>  [7] \"2019-07-31 EDT\" \"2019-08-31 EDT\" \"2019-09-30 EDT\" #> [10] \"2019-10-31 EDT\" \"2019-11-30 EST\" \"2019-12-31 EST\"  # Compare this to the base R result, which is often a source of confusion seq(from, to = to, by = \"1 month\") #>  [1] \"2019-01-31 EST\" \"2019-03-03 EST\" \"2019-03-31 EDT\" #>  [4] \"2019-05-01 EDT\" \"2019-05-31 EDT\" \"2019-07-01 EDT\" #>  [7] \"2019-07-31 EDT\" \"2019-08-31 EDT\" \"2019-10-01 EDT\" #> [10] \"2019-10-31 EDT\" \"2019-12-01 EST\" \"2019-12-31 EST\"  # This is equivalent to the overflow invalid resolution strategy date_seq(from, to = to, by = duration_months(1), invalid = \"overflow\") #>  [1] \"2019-01-31 EST\" \"2019-03-03 EST\" \"2019-03-31 EDT\" #>  [4] \"2019-05-01 EDT\" \"2019-05-31 EDT\" \"2019-07-01 EDT\" #>  [7] \"2019-07-31 EDT\" \"2019-08-31 EDT\" \"2019-10-01 EDT\" #> [10] \"2019-10-31 EDT\" \"2019-12-01 EST\" \"2019-12-31 EST\"  # ---------------------------------------------------------------------------  # This date-time is 2 days before a daylight saving time gap that occurred # on 2021-03-14 between 01:59:59 -> 03:00:00 from <- as.POSIXct(\"2021-03-12 02:30:00\", \"America/New_York\")  # So creating a daily sequence lands us in that daylight saving time gap, # creating a nonexistent time try(date_seq(from, by = duration_days(1), total_size = 5)) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 3. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # Resolve the nonexistent time with `nonexistent`. Note that this importantly # allows times after the gap to retain the `02:30:00` time. date_seq(from, by = duration_days(1), total_size = 5, nonexistent = \"roll-forward\") #> [1] \"2021-03-12 02:30:00 EST\" \"2021-03-13 02:30:00 EST\" #> [3] \"2021-03-14 03:00:00 EDT\" \"2021-03-15 02:30:00 EDT\" #> [5] \"2021-03-16 02:30:00 EDT\"  # Compare this to the base R behavior, where the hour is adjusted from 2->3 # as you cross the daylight saving time gap, and is never restored. This is # equivalent to always using sys-time (rather than naive-time, like clock # uses for daily sequences). seq(from, by = \"1 day\", length.out = 5) #> [1] \"2021-03-12 02:30:00 EST\" \"2021-03-13 02:30:00 EST\" #> [3] \"2021-03-14 03:30:00 EDT\" \"2021-03-15 03:30:00 EDT\" #> [5] \"2021-03-16 03:30:00 EDT\"  # You can replicate this behavior by generating a second precision sequence # of 86,400 seconds. Seconds always add in sys-time. date_seq(from, by = duration_seconds(86400), total_size = 5) #> [1] \"2021-03-12 02:30:00 EST\" \"2021-03-13 02:30:00 EST\" #> [3] \"2021-03-14 03:30:00 EDT\" \"2021-03-15 03:30:00 EDT\" #> [5] \"2021-03-16 03:30:00 EDT\"  # ---------------------------------------------------------------------------  # Usage of `to` and `total_size` must generate a non-fractional sequence # between `from` and `to` from <- date_time_build(2019, 1, 1, 0, 0, 0, zone = \"America/New_York\") to <- date_time_build(2019, 1, 1, 0, 0, 3, zone = \"America/New_York\")  # These are fine date_seq(from, to = to, total_size = 2) #> [1] \"2019-01-01 00:00:00 EST\" \"2019-01-01 00:00:03 EST\" date_seq(from, to = to, total_size = 4) #> [1] \"2019-01-01 00:00:00 EST\" \"2019-01-01 00:00:01 EST\" #> [3] \"2019-01-01 00:00:02 EST\" \"2019-01-01 00:00:03 EST\"  # But this is not! try(date_seq(from, to = to, total_size = 3)) #> Error : The supplied output size does not result in a non-fractional sequence between `from` and `to`."},{"path":"https://clock.r-lib.org/dev/reference/posixt-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: date-time — posixt-setters","title":"Setters: date-time — posixt-setters","text":"POSIXct/POSIXlt methods setter generics. set_year() sets year. set_month() sets month year. Valid values range [1, 12]. set_day() sets day month. Valid values range [1, 31]. sub-daily setters setting precise components, precision seconds.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: date-time — posixt-setters","text":"","code":"# S3 method for class 'POSIXt' set_year(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' set_month(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' set_day(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' set_hour(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' set_minute(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)  # S3 method for class 'POSIXt' set_second(x, value, ..., invalid = NULL, nonexistent = NULL, ambiguous = x)"},{"path":"https://clock.r-lib.org/dev/reference/posixt-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: date-time — posixt-setters","text":"x [POSIXct / POSIXlt] date-time vector. value [integer / \"last\"] value set component . set_day(), can also \"last\" set day last day month. ... dots future extensions must empty. invalid [character(1) / NULL] One following invalid date resolution strategies: \"previous\": previous valid instant time. \"previous-day\": previous valid day time, keeping time day. \"next\": next valid instant time. \"next-day\": next valid day time, keeping time day. \"overflow\": Overflow number days input invalid . Time day dropped. \"overflow-day\": Overflow number days input invalid . Time day kept. \"NA\": Replace invalid dates NA. \"error\": Error invalid dates. Using either \"previous\" \"next\" generally recommended, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, invalid must supplied NULL. convenient way make production code robust invalid dates. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: date-time — posixt-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: date-time — posixt-setters","text":"","code":"x <- as.POSIXct(\"2019-02-01\", tz = \"America/New_York\")  # Set the day set_day(x, 12:14) #> [1] \"2019-02-12 EST\" \"2019-02-13 EST\" \"2019-02-14 EST\"  # Set to the \"last\" day of the month set_day(x, \"last\") #> [1] \"2019-02-28 EST\"  # You cannot set a date-time to an invalid date like you can with # a year-month-day. Instead, the default strategy is to error. try(set_day(x, 31)) #> Error in invalid_resolve(x, invalid = invalid) :  #>   Invalid date found at location 1. #> ℹ Resolve invalid date issues by specifying the `invalid` argument. set_day(as_year_month_day(x), 31) #> <year_month_day<second>[1]> #> [1] \"2019-02-31T00:00:00\"  # You can resolve these issues while setting the day by specifying # an invalid date resolution strategy with `invalid` set_day(x, 31, invalid = \"previous\") #> [1] \"2019-02-28 23:59:59 EST\"  y <- as.POSIXct(\"2020-03-08 01:30:00\", tz = \"America/New_York\")  # Nonexistent and ambiguous times must be resolved immediately when # working with R's native date-time types. An error is thrown by default. try(set_hour(y, 2)) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument. set_hour(y, 2, nonexistent = \"roll-forward\") #> [1] \"2020-03-08 03:00:00 EDT\" set_hour(y, 2, nonexistent = \"roll-backward\") #> [1] \"2020-03-08 01:59:59 EST\""},{"path":"https://clock.r-lib.org/dev/reference/posixt-shifting.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifting: date and date-time — posixt-shifting","title":"Shifting: date and date-time — posixt-shifting","text":"date_shift() shifts x target weekday. can shift next previous weekday. x currently target weekday, can choose leave alone advance next instance target. Shifting date-times retains time day possible. aware can run daylight saving time issues shift daylight saving time gap fallback period.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-shifting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifting: date and date-time — posixt-shifting","text":"","code":"# S3 method for class 'POSIXt' date_shift(   x,   target,   ...,   which = \"next\",   boundary = \"keep\",   nonexistent = NULL,   ambiguous = x )"},{"path":"https://clock.r-lib.org/dev/reference/posixt-shifting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifting: date and date-time — posixt-shifting","text":"x [POSIXct / POSIXlt] date-time vector. target [weekday] weekday created weekday() target. Generally length 1, can also length x. ... dots future extensions must empty. [character(1)] One : \"next\": Shift next instance target weekday. \"previous: Shift previous instance target weekday. boundary [character(1)] One : \"keep\": x currently target weekday, return . \"advance\": x currently target weekday, advance anyways. nonexistent [character / NULL] One following nonexistent time resolution strategies, allowed either length 1, length input: \"roll-forward\": next valid instant time. \"roll-backward\": previous valid instant time. \"shift-forward\": Shift nonexistent time forward size daylight saving time gap. \"shift-backward: Shift nonexistent time backward size daylight saving time gap. \"NA\": Replace nonexistent times NA. \"error\": Error nonexistent times. Using either \"roll-forward\" \"roll-backward\" generally recommended shifting, two strategies maintain relative ordering elements input. NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, nonexistent must supplied NULL. convenient way make production code robust nonexistent times. ambiguous [character / zoned_time / POSIXct / list(2) / NULL] One following ambiguous time resolution strategies, allowed either length 1, length input: \"earliest\": two possible times, choose earliest one. \"latest\": two possible times, choose latest one. \"NA\": Replace ambiguous times NA. \"error\": Error ambiguous times. Alternatively, ambiguous allowed zoned_time (POSIXct) either length 1, length input. ambiguous time encountered, zoned_time consulted. zoned_time corresponds naive_time also ambiguous uses daylight saving time transition point original ambiguous time, offset zoned_time used resolve ambiguity. ambiguity resolved consulting zoned_time, method falls back NULL. Finally, ambiguous allowed list size 2, first element list zoned_time (described ), second element list ambiguous time resolution strategy use ambiguous time resolved consulting zoned_time. Specifying zoned_time identical list(<zoned_time>, NULL). NULL, defaults \"error\". getOption(\"clock.strict\") TRUE, ambiguous must supplied NULL. Additionally, ambiguous specified zoned_time , implies NULL ambiguous times zoned_time resolve. Instead, must specified list alongside ambiguous time resolution strategy described . convenient way make production code robust ambiguous times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-shifting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifting: date and date-time — posixt-shifting","text":"x shifted target weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/posixt-shifting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shifting: date and date-time — posixt-shifting","text":"","code":"tuesday <- weekday(clock_weekdays$tuesday)  x <- as.POSIXct(\"1970-04-22 02:30:00\", \"America/New_York\")  # Shift to the next Tuesday date_shift(x, tuesday) #> [1] \"1970-04-28 02:30:00 EDT\"  # Be aware that you can run into daylight saving time issues! # Here we shift directly into a daylight saving time gap # from 01:59:59 -> 03:00:00 sunday <- weekday(clock_weekdays$sunday) try(date_shift(x, sunday)) #> Error in as_zoned_time(x, zone = tz, nonexistent = nonexistent, ambiguous = ambiguous) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # You can resolve this with the `nonexistent` argument date_shift(x, sunday, nonexistent = \"roll-forward\") #> [1] \"1970-04-26 03:00:00 EDT\""},{"path":"https://clock.r-lib.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tzdb tzdb_names, tzdb_version","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: duration — seq.clock_duration","title":"Sequences: duration — seq.clock_duration","text":"duration method seq() generic. Using seq() duration objects always retains type . calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: duration — seq.clock_duration","text":"","code":"# S3 method for class 'clock_duration' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: duration — seq.clock_duration","text":"[clock_duration(1)] duration start sequence . [clock_duration(1) / NULL] duration stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: duration — seq.clock_duration","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequences: duration — seq.clock_duration","text":"> > 0, result length 0. matches behavior rlang::seq2(), results nicer theoretical properties compared throwing error. Similarly, < < 0, result also length 0.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: duration — seq.clock_duration","text":"","code":"seq(duration_days(0), duration_days(100), by = 5) #> <duration<day>[21]> #>  [1] 0   5   10  15  20  25  30  35  40  45  50  55  60  65  70  75  #> [17] 80  85  90  95  100  # Using a duration `by`. Note that `by` is cast to the type of `from`. seq(duration_days(0), duration_days(100), by = duration_weeks(1)) #> <duration<day>[15]> #>  [1] 0  7  14 21 28 35 42 49 56 63 70 77 84 91 98  # `to` is cast from 5 years to 60 months # `by` is cast from 1 quarter to 4 months seq(duration_months(0), duration_years(5), by = duration_quarters(1)) #> <duration<month>[21]> #>  [1] 0  3  6  9  12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60  seq(duration_days(20), by = 2, length.out = 5) #> <duration<day>[5]> #> [1] 20 22 24 26 28"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_iso_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","title":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","text":"iso-year-week-day method seq() generic. Sequences can generated \"year\" precision iso-year-week-day vectors. need generate week-based sequences, convert time point first. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_iso_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","text":"","code":"# S3 method for class 'clock_iso_year_week_day' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_iso_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","text":"[clock_iso_year_week_day(1)] \"year\" precision iso-year-week-day start sequence . always included result. [clock_iso_year_week_day(1) / NULL] \"year\" precision iso-year-week-day stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_iso_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_iso_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: iso-year-week-day — seq.clock_iso_year_week_day","text":"","code":"# Yearly sequence x <- seq(iso_year_week_day(2020), iso_year_week_day(2026), by = 2) x #> <iso_year_week_day<year>[4]> #> [1] \"2020\" \"2022\" \"2024\" \"2026\"  # Which we can then set the week of. # Some years have 53 ISO weeks, some have 52. set_week(x, \"last\") #> <iso_year_week_day<week>[4]> #> [1] \"2020-W53\" \"2022-W52\" \"2024-W52\" \"2026-W53\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_time_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: time points — seq.clock_time_point","title":"Sequences: time points — seq.clock_time_point","text":"time point method seq() generic. works sys-time naive-time vectors. Sequences can generated valid time point precisions (daily nanosecond). calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_time_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: time points — seq.clock_time_point","text":"","code":"# S3 method for class 'clock_time_point' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_time_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: time points — seq.clock_time_point","text":"[clock_sys_time(1) / clock_naive_time(1)] time point start sequence . always included result. [clock_sys_time(1) / clock_naive_time(1) / NULL] time point stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_time_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: time points — seq.clock_time_point","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_time_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: time points — seq.clock_time_point","text":"","code":"# Daily sequence seq(   as_naive_time(year_month_day(2019, 1, 1)),   as_naive_time(year_month_day(2019, 2, 4)),   by = 5 ) #> <naive_time<day>[7]> #> [1] \"2019-01-01\" \"2019-01-06\" \"2019-01-11\" \"2019-01-16\" \"2019-01-21\" #> [6] \"2019-01-26\" \"2019-01-31\"  # Minutely sequence using minute precision naive-time x <- as_naive_time(year_month_day(2019, 1, 2, 3, 3)) x #> <naive_time<minute>[1]> #> [1] \"2019-01-02T03:03\"  seq(x, by = 4, length.out = 10) #> <naive_time<minute>[10]> #>  [1] \"2019-01-02T03:03\" \"2019-01-02T03:07\" \"2019-01-02T03:11\" #>  [4] \"2019-01-02T03:15\" \"2019-01-02T03:19\" \"2019-01-02T03:23\" #>  [7] \"2019-01-02T03:27\" \"2019-01-02T03:31\" \"2019-01-02T03:35\" #> [10] \"2019-01-02T03:39\"  # You can use larger step sizes by using a duration-based `by` seq(x, by = duration_days(1), length.out = 5) #> <naive_time<minute>[5]> #> [1] \"2019-01-02T03:03\" \"2019-01-03T03:03\" \"2019-01-04T03:03\" #> [4] \"2019-01-05T03:03\" \"2019-01-06T03:03\"  # Nanosecond sequence from <- as_naive_time(year_month_day(2019, 1, 1)) from <- time_point_cast(from, \"nanosecond\") to <- from + 100 seq(from, to, by = 10) #> <naive_time<nanosecond>[11]> #>  [1] \"2019-01-01T00:00:00.000000000\" \"2019-01-01T00:00:00.000000010\" #>  [3] \"2019-01-01T00:00:00.000000020\" \"2019-01-01T00:00:00.000000030\" #>  [5] \"2019-01-01T00:00:00.000000040\" \"2019-01-01T00:00:00.000000050\" #>  [7] \"2019-01-01T00:00:00.000000060\" \"2019-01-01T00:00:00.000000070\" #>  [9] \"2019-01-01T00:00:00.000000080\" \"2019-01-01T00:00:00.000000090\" #> [11] \"2019-01-01T00:00:00.000000100\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: year-day — seq.clock_year_day","title":"Sequences: year-day — seq.clock_year_day","text":"year-day method seq() generic. Sequences can generated \"year\" precision year-day vectors. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: year-day — seq.clock_year_day","text":"","code":"# S3 method for class 'clock_year_day' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: year-day — seq.clock_year_day","text":"[clock_year_day(1)] \"year\" precision year-day start sequence . always included result. [clock_year_day(1) / NULL] \"year\" precision year-day stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: year-day — seq.clock_year_day","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: year-day — seq.clock_year_day","text":"","code":"# Yearly sequence x <- seq(year_day(2020), year_day(2040), by = 2) x #> <year_day<year>[11]> #>  [1] \"2020\" \"2022\" \"2024\" \"2026\" \"2028\" \"2030\" \"2032\" \"2034\" \"2036\" #> [10] \"2038\" \"2040\"  # Which we can then set the day of to get a sequence of end-of-year values set_day(x, \"last\") #> <year_day<day>[11]> #>  [1] \"2020-366\" \"2022-365\" \"2024-366\" \"2026-365\" \"2028-366\" \"2030-365\" #>  [7] \"2032-366\" \"2034-365\" \"2036-366\" \"2038-365\" \"2040-366\"  # Daily sequences are not allowed. Use a naive-time for this instead. try(seq(year_day(2019, 1), by = 2, length.out = 2)) #> Error in seq(year_day(2019, 1), by = 2, length.out = 2) :  #>   `from` must be 'year' precision. as_year_day(seq(as_naive_time(year_day(2019, 1)), by = 2, length.out = 2)) #> <year_day<day>[2]> #> [1] \"2019-001\" \"2019-003\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: year-month-day — seq.clock_year_month_day","title":"Sequences: year-month-day — seq.clock_year_month_day","text":"year-month-day method seq() generic. Sequences can generated \"year\" \"month\" precision year-month-day vectors. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: year-month-day — seq.clock_year_month_day","text":"","code":"# S3 method for class 'clock_year_month_day' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: year-month-day — seq.clock_year_month_day","text":"[clock_year_month_day(1)] \"year\" \"month\" precision year-month-day start sequence . always included result. [clock_year_month_day(1) / NULL] \"year\" \"month\" precision year-month-day stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: year-month-day — seq.clock_year_month_day","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: year-month-day — seq.clock_year_month_day","text":"","code":"# Monthly sequence x <- seq(year_month_day(2019, 1), year_month_day(2020, 12), by = 1) x #> <year_month_day<month>[24]> #>  [1] \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\" \"2019-06\" #>  [7] \"2019-07\" \"2019-08\" \"2019-09\" \"2019-10\" \"2019-11\" \"2019-12\" #> [13] \"2020-01\" \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" #> [19] \"2020-07\" \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\"  # Which we can then set the day of to get a sequence of end-of-month values set_day(x, \"last\") #> <year_month_day<day>[24]> #>  [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\" \"2019-04-30\" \"2019-05-31\" #>  [6] \"2019-06-30\" \"2019-07-31\" \"2019-08-31\" \"2019-09-30\" \"2019-10-31\" #> [11] \"2019-11-30\" \"2019-12-31\" \"2020-01-31\" \"2020-02-29\" \"2020-03-31\" #> [16] \"2020-04-30\" \"2020-05-31\" \"2020-06-30\" \"2020-07-31\" \"2020-08-31\" #> [21] \"2020-09-30\" \"2020-10-31\" \"2020-11-30\" \"2020-12-31\"  # Daily sequences are not allowed. Use a naive-time for this instead. try(seq(year_month_day(2019, 1, 1), by = 2, length.out = 2)) #> Error in seq(year_month_day(2019, 1, 1), by = 2, length.out = 2) :  #>   `from` must be 'year' or 'month' precision. seq(as_naive_time(year_month_day(2019, 1, 1)), by = 2, length.out = 2) #> <naive_time<day>[2]> #> [1] \"2019-01-01\" \"2019-01-03\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: year-month-weekday — seq.clock_year_month_weekday","title":"Sequences: year-month-weekday — seq.clock_year_month_weekday","text":"year-month-weekday method seq() generic. Sequences can generated \"year\" \"month\" precision year-month-weekday vectors. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: year-month-weekday — seq.clock_year_month_weekday","text":"","code":"# S3 method for class 'clock_year_month_weekday' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: year-month-weekday — seq.clock_year_month_weekday","text":"[clock_year_month_weekday(1)] \"year\" \"month\" precision year-month-weekday start sequence . always included result. [clock_year_month_weekday(1) / NULL] \"year\" \"month\" precision year-month-weekday stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: year-month-weekday — seq.clock_year_month_weekday","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_month_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: year-month-weekday — seq.clock_year_month_weekday","text":"","code":"# Monthly sequence x <- seq(year_month_weekday(2019, 1), year_month_weekday(2020, 12), by = 1) x #> <year_month_weekday<month>[24]> #>  [1] \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\" \"2019-06\" #>  [7] \"2019-07\" \"2019-08\" \"2019-09\" \"2019-10\" \"2019-11\" \"2019-12\" #> [13] \"2020-01\" \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" #> [19] \"2020-07\" \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\"  # Which we can then set the indexed weekday of set_day(x, clock_weekdays$sunday, index = \"last\") #> <year_month_weekday<day>[24]> #>  [1] \"2019-01-Sun[4]\" \"2019-02-Sun[4]\" \"2019-03-Sun[5]\" #>  [4] \"2019-04-Sun[4]\" \"2019-05-Sun[4]\" \"2019-06-Sun[5]\" #>  [7] \"2019-07-Sun[4]\" \"2019-08-Sun[4]\" \"2019-09-Sun[5]\" #> [10] \"2019-10-Sun[4]\" \"2019-11-Sun[4]\" \"2019-12-Sun[5]\" #> [13] \"2020-01-Sun[4]\" \"2020-02-Sun[4]\" \"2020-03-Sun[5]\" #> [16] \"2020-04-Sun[4]\" \"2020-05-Sun[5]\" \"2020-06-Sun[4]\" #> [19] \"2020-07-Sun[4]\" \"2020-08-Sun[5]\" \"2020-09-Sun[4]\" #> [22] \"2020-10-Sun[4]\" \"2020-11-Sun[5]\" \"2020-12-Sun[4]\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_quarter_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: year-quarter-day — seq.clock_year_quarter_day","title":"Sequences: year-quarter-day — seq.clock_year_quarter_day","text":"year-quarter-day method seq() generic. Sequences can generated \"year\" \"quarter\" precision year-quarter-day vectors. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_quarter_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: year-quarter-day — seq.clock_year_quarter_day","text":"","code":"# S3 method for class 'clock_year_quarter_day' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_quarter_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: year-quarter-day — seq.clock_year_quarter_day","text":"[clock_year_quarter_day(1)] \"year\" \"quarter\" precision year-quarter-day start sequence . always included result. [clock_year_quarter_day(1) / NULL] \"year\" \"quarter\" precision year-quarter-day stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_quarter_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: year-quarter-day — seq.clock_year_quarter_day","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_quarter_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: year-quarter-day — seq.clock_year_quarter_day","text":"","code":"# Quarterly sequence x <- seq(year_quarter_day(2020, 1), year_quarter_day(2026, 3), by = 2) x #> <year_quarter_day<January><quarter>[14]> #>  [1] \"2020-Q1\" \"2020-Q3\" \"2021-Q1\" \"2021-Q3\" \"2022-Q1\" \"2022-Q3\" #>  [7] \"2023-Q1\" \"2023-Q3\" \"2024-Q1\" \"2024-Q3\" \"2025-Q1\" \"2025-Q3\" #> [13] \"2026-Q1\" \"2026-Q3\"  # Which we can then set the day of the quarter of set_day(x, \"last\") #> <year_quarter_day<January><day>[14]> #>  [1] \"2020-Q1-91\" \"2020-Q3-92\" \"2021-Q1-90\" \"2021-Q3-92\" \"2022-Q1-90\" #>  [6] \"2022-Q3-92\" \"2023-Q1-90\" \"2023-Q3-92\" \"2024-Q1-91\" \"2024-Q3-92\" #> [11] \"2025-Q1-90\" \"2025-Q3-92\" \"2026-Q1-90\" \"2026-Q3-92\""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences: year-week-day — seq.clock_year_week_day","title":"Sequences: year-week-day — seq.clock_year_week_day","text":"year-week-day method seq() generic. Sequences can generated \"year\" precision year-week-day vectors. need generate week-based sequences, convert time point first. calling seq(), exactly two following must specified: Either length.along.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences: year-week-day — seq.clock_year_week_day","text":"","code":"# S3 method for class 'clock_year_week_day' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)"},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequences: year-week-day — seq.clock_year_week_day","text":"[clock_year_week_day(1)] \"year\" precision year-week-day start sequence . always included result. [clock_year_week_day(1) / NULL] \"year\" precision year-week-day stop sequence . cast type . included result resulting sequence divides distance exactly. [integer(1) / clock_duration(1) / NULL] unit increment sequence . integer, transformed duration precision . duration, cast type . length.[positive integer(1) / NULL] length resulting sequence. specified, along.must NULL. along.[vector / NULL] vector length determines length resulting sequence. Equivalent length.= vec_size(along.). specified, length.must NULL. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequences: year-week-day — seq.clock_year_week_day","text":"sequence type .","code":""},{"path":"https://clock.r-lib.org/dev/reference/seq.clock_year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences: year-week-day — seq.clock_year_week_day","text":"","code":"# Yearly sequence x <- seq(year_week_day(2020), year_week_day(2026), by = 2) x #> <year_week_day<Sunday><year>[4]> #> [1] \"2020\" \"2022\" \"2024\" \"2026\"  # Which we can then set the week of. # Some years have 53 weeks, some have 52. set_week(x, \"last\") #> <year_week_day<Sunday><week>[4]> #> [1] \"2020-W53\" \"2022-W52\" \"2024-W52\" \"2026-W52\""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: sys-time — sys-parsing","title":"Parsing: sys-time — sys-parsing","text":"two parsers sys-time, sys_time_parse() sys_time_parse_RFC_3339().","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"sys-time-parse-","dir":"Reference","previous_headings":"","what":"sys_time_parse()","title":"Parsing: sys-time — sys-parsing","text":"sys_time_parse() useful date-time strings like \"2020-01-01T01:04:30\" know interpreted UTC, like \"2020-01-01T01:04:30-04:00\" UTC offset zone name. find latter situation, parsing string sys-time using %Ez command capture offset probably best option. know string interpreted specific time zone, parse sys-time get UTC equivalent, use as_zoned_time(). default options assume x parsed second precision, using format string \"%Y-%m-%dT%H:%M:%S\". matches default result calling format() sys-time. sys_time_parse() nearly equivalent naive_time_parse(), except fact %z command actually used. Using %z assumes rest date-time string interpreted naive-time, shifted UTC offset found %z. returned time can validly interpreted UTC. sys_time_parse() ignores %Z command.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"sys-time-parse-rfc-","dir":"Reference","previous_headings":"","what":"sys_time_parse_RFC_3339()","title":"Parsing: sys-time — sys-parsing","text":"sys_time_parse_RFC_3339() wrapper around sys_time_parse() intended parse extremely common date-time format outlined RFC 3339. document outlines profile ISO 8601 format even restrictive. particular, function intended parse following three formats:   function defaults parsing first formats using format string \"%Y-%m-%dT%H:%M:%SZ\". date-time strings use offsets UTC rather \"Z\", set offset one following: \"%z\" offset form \"+0430\". \"%Ez\" offset form \"+04:30\". RFC 3339 standard allows replacing \"T\" \"t\" space (\" \"). Set separator adjust needed. function, precision must least \"second\".","code":"2019-01-01T00:00:00Z 2019-01-01T00:00:00+0430 2019-01-01T00:00:00+04:30"},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: sys-time — sys-parsing","text":"","code":"sys_time_parse(   x,   ...,   format = NULL,   precision = \"second\",   locale = clock_locale() )  sys_time_parse_RFC_3339(   x,   ...,   separator = \"T\",   offset = \"Z\",   precision = \"second\" )"},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: sys-time — sys-parsing","text":"x [character] character vector parse. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. precision [character(1)] precision resulting time point. One : \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" Setting precision determines much information %S attempts parse. locale [clock_locale] locale object created clock_locale(). separator [character(1)] separator date time components string. One : \"T\" \"t\" \" \" offset [character(1)] format offset UTC contained string. One : \"Z\" \"z\" \"%z\" parse numeric offset form \"+0430\" \"%Ez\" parse numeric offset form \"+04:30\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: sys-time — sys-parsing","text":"sys-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing: sys-time — sys-parsing","text":"date-time strings contain full time zone name UTC offset, use zoned_time_parse_complete(). contain time zone abbreviation, use zoned_time_parse_abbrev(). date-time strings contain offset UTC sure treated UTC , might consider using naive_time_parse(), since resulting naive-time come assumption UTC time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"full-precision-parsing","dir":"Reference","previous_headings":"","what":"Full Precision Parsing","title":"Parsing: sys-time — sys-parsing","text":"highly recommended parse information date-time string type least precise string. example, string fractional seconds, require seconds, specify sub-second precision, round seconds manually using whatever convention appropriate use case. Parsing string directly second precision result ambiguous undefined, unlikely work might expect.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys-parsing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: sys-time — sys-parsing","text":"","code":"sys_time_parse(\"2020-01-01T05:06:07\") #> <sys_time<second>[1]> #> [1] \"2020-01-01T05:06:07\"  # Day precision sys_time_parse(\"2020-01-01\", precision = \"day\") #> <sys_time<day>[1]> #> [1] \"2020-01-01\"  # Nanosecond precision, but using a day based format sys_time_parse(\"2020-01-01\", format = \"%Y-%m-%d\", precision = \"nanosecond\") #> <sys_time<nanosecond>[1]> #> [1] \"2020-01-01T00:00:00.000000000\"  # Multiple format strings are allowed for heterogeneous times sys_time_parse(   c(\"2019-01-01\", \"2019/1/1\"),   format = c(\"%Y/%m/%d\", \"%Y-%m-%d\"),   precision = \"day\" ) #> <sys_time<day>[2]> #> [1] \"2019-01-01\" \"2019-01-01\"  # The `%z` command shifts the date-time by subtracting the UTC offset so # that the returned sys-time can be interpreted as UTC sys_time_parse(   \"2020-01-01 02:00:00 -0400\",   format = \"%Y-%m-%d %H:%M:%S %z\" ) #> <sys_time<second>[1]> #> [1] \"2020-01-01T06:00:00\"  # Remember that the `%Z` command is ignored entirely! sys_time_parse(\"2020-01-01 America/New_York\", format = \"%Y-%m-%d %Z\") #> <sys_time<second>[1]> #> [1] \"2020-01-01T00:00:00\"  # --------------------------------------------------------------------------- # RFC 3339  # Typical UTC format x <- \"2019-01-01T00:01:02Z\" sys_time_parse_RFC_3339(x) #> <sys_time<second>[1]> #> [1] \"2019-01-01T00:01:02\"  # With a UTC offset containing a `:` x <- \"2019-01-01T00:01:02+02:30\" sys_time_parse_RFC_3339(x, offset = \"%Ez\") #> <sys_time<second>[1]> #> [1] \"2018-12-31T21:31:02\"  # With a space between the date and time and no `:` in the offset x <- \"2019-01-01 00:01:02+0230\" sys_time_parse_RFC_3339(x, separator = \" \", offset = \"%z\") #> <sys_time<second>[1]> #> [1] \"2018-12-31T21:31:02\""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Info: sys-time — sys_time_info","title":"Info: sys-time — sys_time_info","text":"sys_time_info() retrieves set low-level information generally required date-time manipulations. returns data frame following columns: begin, end: Second precision sys-times specifying range current daylight saving time rule. range half-open interval [begin, end). offset: second precision duration specifying offset UTC. dst: logical vector specifying daylight saving time currently active. abbreviation: time zone abbreviation use throughout begin end range.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info: sys-time — sys_time_info","text":"","code":"sys_time_info(x, zone)"},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info: sys-time — sys_time_info","text":"x [clock_sys_time] sys-time. zone [character] valid time zone name. Unlike functions clock, sys_time_info() zone vectorized recycled x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info: sys-time — sys_time_info","text":"data frame low level information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Info: sys-time — sys_time_info","text":"never daylight saving time transitions, minimum supported year value returned begin (typically, year value -32767). daylight saving time longer used time zone, maximum supported year value returned end (typically, year value 32767). offset bridge sys-time naive-time zone used. relationship three values :","code":"offset = naive_time - sys_time"},{"path":"https://clock.r-lib.org/dev/reference/sys_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Info: sys-time — sys_time_info","text":"","code":"library(vctrs)  x <- year_month_day(2021, 03, 14, c(01, 03), c(59, 00), c(59, 00)) x <- as_naive_time(x) x <- as_zoned_time(x, \"America/New_York\")  # x[1] is in EST, x[2] is in EDT x #> <zoned_time<second><America/New_York>[2]> #> [1] \"2021-03-14T01:59:59-05:00\" \"2021-03-14T03:00:00-04:00\"  x_sys <- as_sys_time(x)  info <- sys_time_info(x_sys, zoned_time_zone(x)) info #>                 begin                 end offset   dst abbreviation #> 1 2020-11-01T06:00:00 2021-03-14T07:00:00 -18000 FALSE          EST #> 2 2021-03-14T07:00:00 2021-11-07T06:00:00 -14400  TRUE          EDT  # Convert `begin` and `end` to zoned-times to see the previous and # next daylight saving time transitions data_frame(   x = x,   begin = as_zoned_time(info$begin, zoned_time_zone(x)),   end = as_zoned_time(info$end, zoned_time_zone(x)) ) #>                                             x #> 1 2021-03-14T01:59:59-05:00[America/New_York] #> 2 2021-03-14T03:00:00-04:00[America/New_York] #>                                         begin #> 1 2020-11-01T01:00:00-05:00[America/New_York] #> 2 2021-03-14T03:00:00-04:00[America/New_York] #>                                           end #> 1 2021-03-14T03:00:00-04:00[America/New_York] #> 2 2021-11-07T01:00:00-05:00[America/New_York]  # `end` can be used to iterate through daylight saving time transitions # by repeatedly calling `sys_time_info()` sys_time_info(info$end, zoned_time_zone(x)) #>                 begin                 end offset   dst abbreviation #> 1 2021-03-14T07:00:00 2021-11-07T06:00:00 -14400  TRUE          EDT #> 2 2021-11-07T06:00:00 2022-03-13T07:00:00 -18000 FALSE          EST  # Multiple `zone`s can be supplied to look up daylight saving time # information in different time zones zones <- c(\"America/New_York\", \"America/Los_Angeles\")  info2 <- sys_time_info(x_sys[1], zones) info2 #>                 begin                 end offset   dst abbreviation #> 1 2020-11-01T06:00:00 2021-03-14T07:00:00 -18000 FALSE          EST #> 2 2020-11-01T09:00:00 2021-03-14T10:00:00 -28800 FALSE          PST  # The offset can be used to display the naive-time (i.e. the printed time) # in both of those time zones data_frame(   zone = zones,   naive_time = x_sys[1] + info2$offset ) #>                  zone          naive_time #> 1    America/New_York 2021-03-14T01:59:59 #> 2 America/Los_Angeles 2021-03-13T22:59:59"},{"path":"https://clock.r-lib.org/dev/reference/sys_time_now.html","id":null,"dir":"Reference","previous_headings":"","what":"What is the current sys-time? — sys_time_now","title":"What is the current sys-time? — sys_time_now","text":"sys_time_now() returns current time UTC.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What is the current sys-time? — sys_time_now","text":"","code":"sys_time_now()"},{"path":"https://clock.r-lib.org/dev/reference/sys_time_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What is the current sys-time? — sys_time_now","text":"sys-time current time UTC.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_now.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"What is the current sys-time? — sys_time_now","text":"time returned nanosecond precision, actual amount data returned OS dependent. Usually, information least microsecond level returned, platforms returning nanosecond information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/sys_time_now.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What is the current sys-time? — sys_time_now","text":"","code":"x <- sys_time_now()"},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: Time points — time-point-arithmetic","title":"Arithmetic: Time points — time-point-arithmetic","text":"naive-time sys-time methods arithmetic generics. add_weeks() add_days() add_hours() add_minutes() add_seconds() add_milliseconds() add_microseconds() add_nanoseconds() working zoned times, generally convert either sys-time naive-time, add duration, convert back zoned time. Typically, weeks days added naive-time, hours, minutes, seconds, subseconds added sys-time. using zoned times, arithmetic sys-times naive-time equivalent. need add larger irregular units time, months, quarters, years, convert calendar type converter like as_year_month_day().","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: Time points — time-point-arithmetic","text":"","code":"# S3 method for class 'clock_time_point' add_weeks(x, n, ...)  # S3 method for class 'clock_time_point' add_days(x, n, ...)  # S3 method for class 'clock_time_point' add_hours(x, n, ...)  # S3 method for class 'clock_time_point' add_minutes(x, n, ...)  # S3 method for class 'clock_time_point' add_seconds(x, n, ...)  # S3 method for class 'clock_time_point' add_milliseconds(x, n, ...)  # S3 method for class 'clock_time_point' add_microseconds(x, n, ...)  # S3 method for class 'clock_time_point' add_nanoseconds(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: Time points — time-point-arithmetic","text":"x [clock_sys_time / clock_naive_time] time point vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: Time points — time-point-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: Time points — time-point-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: Time points — time-point-arithmetic","text":"","code":"library(magrittr)  # Say you started with this zoned time, and you want to add 1 day to it x <- as_naive_time(year_month_day(1970, 04, 25, 02, 30, 00)) x <- as_zoned_time(x, \"America/New_York\") x #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-25T02:30:00-05:00\"  # Note that there was a daylight saving time gap on 1970-04-26 where # we jumped from 01:59:59 -> 03:00:00.  # You can choose to add 1 day in \"system time\", by first converting to # sys-time (the equivalent UTC time), adding the day, then converting back to # zoned time. If you sat still for exactly 86,400 seconds, this is the # time that you would see after daylight saving time adjusted the clock # (note that the hour field is shifted forward by the size of the gap) as_sys_time(x) #> <sys_time<second>[1]> #> [1] \"1970-04-25T07:30:00\"  x %>%   as_sys_time() %>%   add_days(1) %>%   as_zoned_time(zoned_time_zone(x)) #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:30:00-04:00\"  # Alternatively, you can add 1 day in \"naive time\". Naive time represents # a clock time with a yet-to-be-specified time zone. It tries to maintain # smaller units where possible, so adding 1 day would attempt to return # \"1970-04-26T02:30:00\" in the America/New_York time zone, but... as_naive_time(x) #> <naive_time<second>[1]> #> [1] \"1970-04-25T02:30:00\"  try({ x %>%   as_naive_time() %>%   add_days(1) %>%   as_zoned_time(zoned_time_zone(x)) }) #> Error in as_zoned_time(., zoned_time_zone(x)) :  #>   Nonexistent time due to daylight saving time at location 1. #> ℹ Resolve nonexistent time issues by specifying the `nonexistent` argument.  # ...this time doesn't exist in that time zone! It is \"nonexistent\". # You can resolve nonexistent times by setting the `nonexistent` argument # when converting to zoned time. Let's roll forward to the next available # moment in time. x %>%   as_naive_time() %>%   add_days(1) %>%   as_zoned_time(zoned_time_zone(x), nonexistent = \"roll-forward\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"1970-04-26T03:00:00-04:00\""},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Time point rounding — time-point-rounding","title":"Time point rounding — time-point-rounding","text":"time_point_floor() rounds sys-time naive-time multiple specified precision. time_point_ceiling() rounds sys-time naive-time multiple specified precision. time_point_round() rounds depending closer, rounding ties. Rounding time points mainly useful rounding sub-daily time points daily time points. can also useful flooring set number days (like 20) respect origin. default, origin 1970-01-01 00:00:00. want group components, \"day month\", rather \"n days\", see calendar_group().","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time point rounding — time-point-rounding","text":"","code":"time_point_floor(x, precision, ..., n = 1L, origin = NULL)  time_point_ceiling(x, precision, ..., n = 1L, origin = NULL)  time_point_round(x, precision, ..., n = 1L, origin = NULL)"},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time point rounding — time-point-rounding","text":"x [clock_sys_time / clock_naive_time] sys-time naive-time. precision [character(1)] time point precision. One : \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] positive integer specifying multiple precision use. origin [clock_sys_time(1) / clock_naive_time(1) / NULL] origin begin counting . Mostly useful n > 1 want control rounding groups created. x sys-time, origin must sys-time. x naive-time, origin must naive-time. precision origin must equally precise less precise precision. NULL, default origin midnight 1970-01-01 used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time point rounding — time-point-rounding","text":"x rounded new precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":"boundary-handling","dir":"Reference","previous_headings":"","what":"Boundary Handling","title":"Time point rounding — time-point-rounding","text":"understand flooring ceiling work, need know create intervals rounding. time_point_floor() constructs intervals [lower, upper) bound element x, always chooses left-hand side. time_point_ceiling() constructs intervals (lower, upper] bound element x, always chooses right-hand side. easy example, consider 2020-01-02 00:00:05. floor nearest day, following interval constructed, left-hand side returned day precision: [2020-01-02 00:00:00, 2020-01-03 00:00:00) ceiling nearest day, following interval constructed, right-hand side returned day precision: (2020-01-02 00:00:00, 2020-01-03 00:00:00] another example, time time point boundary, 2020-01-02 00:00:00. floor nearest day, following interval constructed, left-hand side returned day precision: [2020-01-02 00:00:00, 2020-01-03 00:00:00) ceiling nearest day, following interval constructed, right-hand side returned day precision: (2020-01-01 00:00:00, 2020-01-02 00:00:00] Notice , regardless whether floor ceiling, input falls boundary returned .","code":""},{"path":"https://clock.r-lib.org/dev/reference/time-point-rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time point rounding — time-point-rounding","text":"","code":"library(magrittr)  x <- as_naive_time(year_month_day(2019, 01, 01)) x <- add_days(x, 0:40) head(x) #> <naive_time<day>[6]> #> [1] \"2019-01-01\" \"2019-01-02\" \"2019-01-03\" \"2019-01-04\" \"2019-01-05\" #> [6] \"2019-01-06\"  # Floor by sets of 20 days # The implicit origin to start the 20 day counter is 1970-01-01 time_point_floor(x, \"day\", n = 20) #> <naive_time<day>[41]> #>  [1] \"2018-12-15\" \"2018-12-15\" \"2018-12-15\" \"2019-01-04\" \"2019-01-04\" #>  [6] \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" #> [11] \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" #> [16] \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" #> [21] \"2019-01-04\" \"2019-01-04\" \"2019-01-04\" \"2019-01-24\" \"2019-01-24\" #> [26] \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" #> [31] \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" #> [36] \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" \"2019-01-24\" #> [41] \"2019-01-24\"  # You can easily customize the origin by supplying a new one # as the `origin` argument origin <- year_month_day(2019, 01, 01) %>%   as_naive_time()  time_point_floor(x, \"day\", n = 20, origin = origin) #> <naive_time<day>[41]> #>  [1] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #>  [6] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #> [11] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #> [16] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" #> [21] \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" #> [26] \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" #> [31] \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" #> [36] \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" \"2019-01-21\" #> [41] \"2019-02-10\"  # For times on the boundary, floor and ceiling both return the input # at the new precision. Notice how the first element is on the boundary, # and the second is 1 second after the boundary. y <- as_naive_time(year_month_day(2020, 01, 02, 00, 00, c(00, 01))) time_point_floor(y, \"day\") #> <naive_time<day>[2]> #> [1] \"2020-01-02\" \"2020-01-02\" time_point_ceiling(y, \"day\") #> <naive_time<day>[2]> #> [1] \"2020-01-02\" \"2020-01-03\""},{"path":"https://clock.r-lib.org/dev/reference/time_point_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast a time point between precisions — time_point_cast","title":"Cast a time point between precisions — time_point_cast","text":"Casting one way change time point's precision. Casting less precise precision completely drop information precise precision casting . way makes round towards zero. converting time points less precise precision, often want time_point_floor() instead time_point_cast(), handles pre-1970 dates (stored negative durations) intuitive manner. Casting precise precision done multiplication conversion factor current precision new precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast a time point between precisions — time_point_cast","text":"","code":"time_point_cast(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/time_point_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast a time point between precisions — time_point_cast","text":"x [clock_sys_time / clock_naive_time] sys-time naive-time. precision [character(1)] time point precision. One : \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast a time point between precisions — time_point_cast","text":"x cast new precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast a time point between precisions — time_point_cast","text":"","code":"# Hour precision time points # One is pre-1970, one is post-1970 x <- duration_hours(c(25, -25)) x <- as_naive_time(x) x #> <naive_time<hour>[2]> #> [1] \"1970-01-02T01\" \"1969-12-30T23\"  # Casting rounds the underlying duration towards 0 cast <- time_point_cast(x, \"day\") cast #> <naive_time<day>[2]> #> [1] \"1970-01-02\" \"1969-12-31\"  # Flooring rounds the underlying duration towards negative infinity, # which is often more intuitive for time points. # Note that the cast ends up rounding the pre-1970 date up to the next # day, while the post-1970 date is rounded down. floor <- time_point_floor(x, \"day\") floor #> <naive_time<day>[2]> #> [1] \"1970-01-02\" \"1969-12-30\"  # Casting to a more precise precision, hour->millisecond time_point_cast(x, \"millisecond\") #> <naive_time<millisecond>[2]> #> [1] \"1970-01-02T01:00:00.000\" \"1969-12-30T23:00:00.000\""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: time point — time_point_count_between","title":"Counting: time point — time_point_count_between","text":"time_point_count_between() counts number precision units start end (.e., number days hours). count corresponds whole number units, never return fractional value. suitable , say, computing whole number days two time points, accounting time day.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: time point — time_point_count_between","text":"","code":"time_point_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: time point — time_point_count_between","text":"start, end [clock_time_point] pair time points. recycled common size. precision [character(1)] One : \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: time point — time_point_count_between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting: time point — time_point_count_between","text":"Remember time_point_count_between() returns integer vector. extremely fine precisions, nanoseconds, count can quickly exceed maximum value allowed integer. case, NA returned warning.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"comparison-direction","dir":"Reference","previous_headings":"","what":"Comparison Direction","title":"Counting: time point — time_point_count_between","text":"computed count property start <= end, start + <count> <= end. Similarly, start >= end, start + <count> >= end. words, comparison direction start end never change adding count start. makes function useful repeated count computations increasingly fine precisions.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_count_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: time point — time_point_count_between","text":"","code":"x <- as_naive_time(year_month_day(2019, 2, 3)) y <- as_naive_time(year_month_day(2019, 2, 10))  # Whole number of days or hours between two time points time_point_count_between(x, y, \"day\") #> [1] 7 time_point_count_between(x, y, \"hour\") #> [1] 168  # Whole number of 2-day units time_point_count_between(x, y, \"day\", n = 2) #> [1] 3  # Leap years are taken into account x <- as_naive_time(year_month_day(c(2020, 2021), 2, 28)) y <- as_naive_time(year_month_day(c(2020, 2021), 3, 01)) time_point_count_between(x, y, \"day\") #> [1] 2 1  # Time of day is taken into account. # `2020-02-02T04 -> 2020-02-03T03` is not a whole day (because of the hour) # `2020-02-02T04 -> 2020-02-03T05` is a whole day x <- as_naive_time(year_month_day(2020, 2, 2, 4)) y <- as_naive_time(year_month_day(2020, 2, 3, c(3, 5))) time_point_count_between(x, y, \"day\") #> [1] 0 1 time_point_count_between(x, y, \"hour\") #> [1] 23 25  # Can compute negative counts (using the same example from above) time_point_count_between(y, x, \"day\") #> [1]  0 -1 time_point_count_between(y, x, \"hour\") #> [1] -23 -25  # Repeated computation at increasingly fine precisions x <- as_naive_time(year_month_day(   2020, 2, 2, 4, 5, 6, 200,   subsecond_precision = \"microsecond\" )) y <- as_naive_time(year_month_day(   2020, 3, 1, 8, 9, 10, 100,   subsecond_precision = \"microsecond\" ))  days <- time_point_count_between(x, y, \"day\") x <- x + duration_days(days)  hours <- time_point_count_between(x, y, \"hour\") x <- x + duration_hours(hours)  minutes <- time_point_count_between(x, y, \"minute\") x <- x + duration_minutes(minutes)  seconds <- time_point_count_between(x, y, \"second\") x <- x + duration_seconds(seconds)  microseconds <- time_point_count_between(x, y, \"microsecond\") x <- x + duration_microseconds(microseconds)  data.frame(   days = days,   hours = hours,   minutes = minutes,   seconds = seconds,   microseconds = microseconds ) #>   days hours minutes seconds microseconds #> 1   28     4       4       3       999900"},{"path":"https://clock.r-lib.org/dev/reference/time_point_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision: time point — time_point_precision","title":"Precision: time point — time_point_precision","text":"time_point_precision() extracts precision time point, sys-time naive-time. returns precision single string.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision: time point — time_point_precision","text":"","code":"time_point_precision(x)"},{"path":"https://clock.r-lib.org/dev/reference/time_point_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision: time point — time_point_precision","text":"x [clock_time_point] time point.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision: time point — time_point_precision","text":"single string holding precision time point.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision: time point — time_point_precision","text":"","code":"time_point_precision(sys_time_now()) #> [1] \"nanosecond\" time_point_precision(as_naive_time(duration_days(1))) #> [1] \"day\""},{"path":"https://clock.r-lib.org/dev/reference/time_point_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifting: time point — time_point_shift","title":"Shifting: time point — time_point_shift","text":"time_point_shift() shifts x target weekday. can shift next previous weekday. x currently target weekday, can choose leave alone advance next instance target. Weekday shifting one easiest ways floor week controlling considered first day week. can also accomplish origin argument time_point_floor(), slightly easier.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifting: time point — time_point_shift","text":"","code":"time_point_shift(x, target, ..., which = \"next\", boundary = \"keep\")"},{"path":"https://clock.r-lib.org/dev/reference/time_point_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifting: time point — time_point_shift","text":"x [clock_time_point] time point. target [weekday] weekday created weekday() target. Generally length 1, can also length x. ... dots future extensions must empty. [character(1)] One : \"next\": Shift next instance target weekday. \"previous: Shift previous instance target weekday. boundary [character(1)] One : \"keep\": x currently target weekday, return . \"advance\": x currently target weekday, advance anyways.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifting: time point — time_point_shift","text":"x shifted target weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shifting: time point — time_point_shift","text":"","code":"x <- as_naive_time(year_month_day(2019, 1, 1:2))  # A Tuesday and Wednesday as_weekday(x) #> <weekday[2]> #> [1] Tue Wed  monday <- weekday(clock_weekdays$monday)  # Shift to the next Monday time_point_shift(x, monday) #> <naive_time<day>[2]> #> [1] \"2019-01-07\" \"2019-01-07\"  # Shift to the previous Monday # This is an easy way to \"floor by week\" with a target weekday in mind time_point_shift(x, monday, which = \"previous\") #> <naive_time<day>[2]> #> [1] \"2018-12-31\" \"2018-12-31\"  # What about Tuesday? tuesday <- weekday(clock_weekdays$tuesday)  # Notice that the day that was currently on a Tuesday was not shifted time_point_shift(x, tuesday) #> <naive_time<day>[2]> #> [1] \"2019-01-01\" \"2019-01-08\"  # You can force it to `\"advance\"` time_point_shift(x, tuesday, boundary = \"advance\") #> <naive_time<day>[2]> #> [1] \"2019-01-08\" \"2019-01-08\""},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Spanning sequence: time points — time_point_spanning_seq","title":"Spanning sequence: time points — time_point_spanning_seq","text":"time_point_spanning_seq() generates regular sequence along span x, .e. along [min(x), max(x)]. sequence generated precision x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spanning sequence: time points — time_point_spanning_seq","text":"","code":"time_point_spanning_seq(x)"},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spanning sequence: time points — time_point_spanning_seq","text":"x [clock_sys_time / clock_naive_time] time point vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spanning sequence: time points — time_point_spanning_seq","text":"sequence along [min(x), max(x)].","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spanning sequence: time points — time_point_spanning_seq","text":"Missing values automatically removed sequence generated. need precise sequence generation, call range() seq() directly.","code":""},{"path":"https://clock.r-lib.org/dev/reference/time_point_spanning_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spanning sequence: time points — time_point_spanning_seq","text":"","code":"x <- as_naive_time(year_month_day(2019, c(1, 2, 1, 2), c(15, 4, 12, 2))) x #> <naive_time<day>[4]> #> [1] \"2019-01-15\" \"2019-02-04\" \"2019-01-12\" \"2019-02-02\"  time_point_spanning_seq(x) #> <naive_time<day>[24]> #>  [1] \"2019-01-12\" \"2019-01-13\" \"2019-01-14\" \"2019-01-15\" \"2019-01-16\" #>  [6] \"2019-01-17\" \"2019-01-18\" \"2019-01-19\" \"2019-01-20\" \"2019-01-21\" #> [11] \"2019-01-22\" \"2019-01-23\" \"2019-01-24\" \"2019-01-25\" \"2019-01-26\" #> [16] \"2019-01-27\" \"2019-01-28\" \"2019-01-29\" \"2019-01-30\" \"2019-01-31\" #> [21] \"2019-02-01\" \"2019-02-02\" \"2019-02-03\" \"2019-02-04\"  # The sequence is generated at the precision of `x` x <- as_naive_time(c(   year_month_day(2019, 1, 1, 5),   year_month_day(2019, 1, 2, 10),   year_month_day(2019, 1, 1, 3) )) time_point_spanning_seq(x) #> <naive_time<hour>[32]> #>  [1] \"2019-01-01T03\" \"2019-01-01T04\" \"2019-01-01T05\" \"2019-01-01T06\" #>  [5] \"2019-01-01T07\" \"2019-01-01T08\" \"2019-01-01T09\" \"2019-01-01T10\" #>  [9] \"2019-01-01T11\" \"2019-01-01T12\" \"2019-01-01T13\" \"2019-01-01T14\" #> [13] \"2019-01-01T15\" \"2019-01-01T16\" \"2019-01-01T17\" \"2019-01-01T18\" #> [17] \"2019-01-01T19\" \"2019-01-01T20\" \"2019-01-01T21\" \"2019-01-01T22\" #> [21] \"2019-01-01T23\" \"2019-01-02T00\" \"2019-01-02T01\" \"2019-01-02T02\" #> [25] \"2019-01-02T03\" \"2019-01-02T04\" \"2019-01-02T05\" \"2019-01-02T06\" #> [29] \"2019-01-02T07\" \"2019-01-02T08\" \"2019-01-02T09\" \"2019-01-02T10\""},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: weekday — weekday-arithmetic","title":"Arithmetic: weekday — weekday-arithmetic","text":"weekday methods arithmetic generics. add_days() Also check examples weekday() page advanced usage.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: weekday — weekday-arithmetic","text":"","code":"# S3 method for class 'clock_weekday' add_days(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: weekday — weekday-arithmetic","text":"x [clock_weekday] weekday vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: weekday — weekday-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: weekday — weekday-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: weekday — weekday-arithmetic","text":"","code":"saturday <- weekday(clock_weekdays$saturday) saturday #> <weekday[1]> #> [1] Sat  add_days(saturday, 1) #> <weekday[1]> #> [1] Sun add_days(saturday, 2) #> <weekday[1]> #> [1] Mon"},{"path":"https://clock.r-lib.org/dev/reference/weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a weekday vector — weekday","title":"Construct a weekday vector — weekday","text":"weekday simple type represents day week. interesting thing weekday type implements circular arithmetic, makes determining \"next Monday\" \"previous Tuesday\" sys-time naive-time easy compute. See examples.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a weekday vector — weekday","text":"","code":"weekday(code = integer(), ..., encoding = \"western\")"},{"path":"https://clock.r-lib.org/dev/reference/weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a weekday vector — weekday","text":"code [integer] Integer codes [1, 7] representing days week. interpretation values depends encoding. ... dots future extensions must empty. encoding [character(1)] One : \"western\": Encode weekdays assuming 1 == Sunday 7 == Saturday. \"iso\": Encode weekdays assuming 1 == Monday 7 == Sunday. line ISO standard.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a weekday vector — weekday","text":"weekday vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a weekday vector — weekday","text":"","code":"x <- as_naive_time(year_month_day(2019, 01, 05))  # This is a Saturday! as_weekday(x) #> <weekday[1]> #> [1] Sat  # Adjust to the next Wednesday wednesday <- weekday(clock_weekdays$wednesday)  # This returns the number of days until the next Wednesday using # circular arithmetic # \"Wednesday - Saturday = 4 days until next Wednesday\" wednesday - as_weekday(x) #> <duration<day>[1]> #> [1] 4  # Advance to the next Wednesday x_next_wednesday <- x + (wednesday - as_weekday(x))  as_weekday(x_next_wednesday) #> <weekday[1]> #> [1] Wed  # What about the previous Tuesday? tuesday <- weekday(clock_weekdays$tuesday) x - (as_weekday(x) - tuesday) #> <naive_time<day>[1]> #> [1] \"2019-01-01\"  # What about the next Saturday? # With an additional condition that if today is a Saturday, # then advance to the next one. saturday <- weekday(clock_weekdays$saturday) x + 1L + (saturday - as_weekday(x + 1L)) #> <naive_time<day>[1]> #> [1] \"2019-01-12\"  # You can supply an ISO coding for `code` as well, where 1 == Monday. weekday(1:7, encoding = \"western\") #> <weekday[7]> #> [1] Sun Mon Tue Wed Thu Fri Sat weekday(1:7, encoding = \"iso\") #> <weekday[7]> #> [1] Mon Tue Wed Thu Fri Sat Sun"},{"path":"https://clock.r-lib.org/dev/reference/weekday_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract underlying weekday codes — weekday_code","title":"Extract underlying weekday codes — weekday_code","text":"weekday_code() extracts integer code weekday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract underlying weekday codes — weekday_code","text":"","code":"weekday_code(x, ..., encoding = \"western\")"},{"path":"https://clock.r-lib.org/dev/reference/weekday_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract underlying weekday codes — weekday_code","text":"x [weekday] weekday vector. ... dots future extensions must empty. encoding [character(1)] One : \"western\": Encode weekdays assuming 1 == Sunday 7 == Saturday. \"iso\": Encode weekdays assuming 1 == Monday 7 == Sunday. line ISO standard.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract underlying weekday codes — weekday_code","text":"integer vector codes.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract underlying weekday codes — weekday_code","text":"","code":"# Here we supply a western encoding to `weekday()` x <- weekday(1:7) x #> <weekday[7]> #> [1] Sun Mon Tue Wed Thu Fri Sat  # We can extract out the codes using different encodings weekday_code(x, encoding = \"western\") #> [1] 1 2 3 4 5 6 7 weekday_code(x, encoding = \"iso\") #> [1] 7 1 2 3 4 5 6"},{"path":"https://clock.r-lib.org/dev/reference/weekday_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a weekday to an ordered factor — weekday_factor","title":"Convert a weekday to an ordered factor — weekday_factor","text":"weekday_factor() converts weekday object ordered factor. can useful combination ggplot2, modeling.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a weekday to an ordered factor — weekday_factor","text":"","code":"weekday_factor(x, ..., labels = \"en\", abbreviate = TRUE, encoding = \"western\")"},{"path":"https://clock.r-lib.org/dev/reference/weekday_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a weekday to an ordered factor — weekday_factor","text":"x [weekday] weekday vector. ... dots future extensions must empty. labels [clock_labels / character(1)] Character representations localized weekday names, month names, /PM names. Either language code string (passed clock_labels_lookup()), object created clock_labels(). abbreviate [logical(1)] TRUE, abbreviated weekday names labels used. FALSE, full weekday names labels used. encoding [character(1)] One : \"western\": Encode weekdays ordered factor levels Sunday -> Saturday. \"iso\": Encode weekdays ordered factor levels Monday -> Sunday.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a weekday to an ordered factor — weekday_factor","text":"ordered factor representing weekdays.","code":""},{"path":"https://clock.r-lib.org/dev/reference/weekday_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a weekday to an ordered factor — weekday_factor","text":"","code":"x <- weekday(1:7)  # Default to Sunday -> Saturday weekday_factor(x) #> [1] Sun Mon Tue Wed Thu Fri Sat #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat  # ISO encoding is Monday -> Sunday weekday_factor(x, encoding = \"iso\") #> [1] Sun Mon Tue Wed Thu Fri Sat #> Levels: Mon < Tue < Wed < Thu < Fri < Sat < Sun  # With full names weekday_factor(x, abbreviate = FALSE) #> [1] Sunday    Monday    Tuesday   Wednesday Thursday  Friday    #> [7] Saturday  #> 7 Levels: Sunday < Monday < Tuesday < Wednesday < ... < Saturday  # Or a different language weekday_factor(x, labels = \"fr\") #> [1] dim. lun. mar. mer. jeu. ven. sam. #> Levels: dim. < lun. < mar. < mer. < jeu. < ven. < sam."},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: year-day — year-day-arithmetic","title":"Arithmetic: year-day — year-day-arithmetic","text":"year-day methods arithmetic generics. add_years() Notably, add days year-day. day-based arithmetic, first convert time point as_naive_time() as_sys_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: year-day — year-day-arithmetic","text":"","code":"# S3 method for class 'clock_year_day' add_years(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: year-day — year-day-arithmetic","text":"x [clock_year_day] year-day vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: year-day — year-day-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: year-day — year-day-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: year-day — year-day-arithmetic","text":"","code":"x <- year_day(2019, 10)  add_years(x, 1:5) #> <year_day<day>[5]> #> [1] \"2020-010\" \"2021-010\" \"2022-010\" \"2023-010\" \"2024-010\"  # A valid day in a leap year y <- year_day(2020, 366) y #> <year_day<day>[1]> #> [1] \"2020-366\"  # Adding 1 year to `y` generates an invalid date y_plus <- add_years(y, 1) y_plus #> <year_day<day>[1]> #> [1] \"2021-366\"  # Invalid dates are fine, as long as they are eventually resolved # by either manually resolving, or by calling `invalid_resolve()`  # Resolve by returning the previous / next valid moment in time invalid_resolve(y_plus, invalid = \"previous\") #> <year_day<day>[1]> #> [1] \"2021-365\" invalid_resolve(y_plus, invalid = \"next\") #> <year_day<day>[1]> #> [1] \"2022-001\"  # Manually resolve by setting to the last day of the year invalid <- invalid_detect(y_plus) y_plus[invalid] <- set_day(y_plus[invalid], \"last\") y_plus #> <year_day<day>[1]> #> [1] \"2021-365\""},{"path":"https://clock.r-lib.org/dev/reference/year-day-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: year-day — year-day-boundary","title":"Boundaries: year-day — year-day-boundary","text":"year-day method calendar_start() calendar_end() generics. adjust components calendar start end specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: year-day — year-day-boundary","text":"","code":"# S3 method for class 'clock_year_day' calendar_start(x, precision)  # S3 method for class 'clock_year_day' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: year-day — year-day-boundary","text":"x [clock_year_day] year-day vector. precision [character(1)] One : \"year\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: year-day — year-day-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: year-day — year-day-boundary","text":"","code":"# Day precision x <- year_day(2019:2020, 5) x #> <year_day<day>[2]> #> [1] \"2019-005\" \"2020-005\"  # Compute the last day of the year calendar_end(x, \"year\") #> <year_day<day>[2]> #> [1] \"2019-365\" \"2020-366\""},{"path":"https://clock.r-lib.org/dev/reference/year-day-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: year-day — year-day-count-between","title":"Counting: year-day — year-day-count-between","text":"year-day method calendar_count_between() generic. counts number precision units start end (.e., number years).","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: year-day — year-day-count-between","text":"","code":"# S3 method for class 'clock_year_day' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: year-day — year-day-count-between","text":"start, end [clock_year_day] pair year-day vectors. recycled common size. precision [character(1)] One : \"year\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: year-day — year-day-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: year-day — year-day-count-between","text":"","code":"# Compute an individual's age in years x <- year_day(2001, 100) y <- year_day(2021, c(99, 101))  calendar_count_between(x, y, \"year\") #> [1] 19 20  # Or in a whole number multiple of years calendar_count_between(x, y, \"year\", n = 3) #> [1] 6 6"},{"path":"https://clock.r-lib.org/dev/reference/year-day-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: year-day — year-day-getters","title":"Getters: year-day — year-day-getters","text":"year-day methods getter generics. get_year() returns Gregorian year. get_day() returns day year. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: year-day — year-day-getters","text":"","code":"# S3 method for class 'clock_year_day' get_year(x)  # S3 method for class 'clock_year_day' get_day(x)  # S3 method for class 'clock_year_day' get_hour(x)  # S3 method for class 'clock_year_day' get_minute(x)  # S3 method for class 'clock_year_day' get_second(x)  # S3 method for class 'clock_year_day' get_millisecond(x)  # S3 method for class 'clock_year_day' get_microsecond(x)  # S3 method for class 'clock_year_day' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: year-day — year-day-getters","text":"x [clock_year_day] year-day get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: year-day — year-day-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: year-day — year-day-getters","text":"","code":"x <- year_day(2019, 101:105, 1, 20, 30)  get_day(x) #> [1] 101 102 103 104 105 get_second(x) #> [1] 30 30 30 30 30  # Cannot extract more precise components y <- year_day(2019, 1) try(get_hour(y)) #> Error in get_hour(y) :  #>   Can't perform this operation because of the precision of `x`. #> ℹ The precision of `x` must be at least \"hour\". #> ℹ `x` has a precision of \"day\".  # Cannot extract components that don't exist for this calendar try(get_quarter(x)) #> Error in get_quarter(x) :  #>   Can't perform this operation on a <clock_year_day>."},{"path":"https://clock.r-lib.org/dev/reference/year-day-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: year-day — year-day-group","title":"Grouping: year-day — year-day-group","text":"year-day method calendar_group() generic. Grouping year-day object can done precision, long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: year-day — year-day-group","text":"","code":"# S3 method for class 'clock_year_day' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: year-day — year-day-group","text":"x [clock_year_day] year-day vector. precision [character(1)] One : \"year\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: year-day — year-day-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: year-day — year-day-group","text":"","code":"x <- seq(as_naive_time(year_month_day(2019, 1, 1)), by = 5, length.out = 20) x <- as_year_day(x) x #> <year_day<day>[20]> #>  [1] \"2019-001\" \"2019-006\" \"2019-011\" \"2019-016\" \"2019-021\" \"2019-026\" #>  [7] \"2019-031\" \"2019-036\" \"2019-041\" \"2019-046\" \"2019-051\" \"2019-056\" #> [13] \"2019-061\" \"2019-066\" \"2019-071\" \"2019-076\" \"2019-081\" \"2019-086\" #> [19] \"2019-091\" \"2019-096\"  # Group by day of the current year calendar_group(x, \"day\", n = 20) #> <year_day<day>[20]> #>  [1] \"2019-001\" \"2019-001\" \"2019-001\" \"2019-001\" \"2019-021\" \"2019-021\" #>  [7] \"2019-021\" \"2019-021\" \"2019-041\" \"2019-041\" \"2019-041\" \"2019-041\" #> [13] \"2019-061\" \"2019-061\" \"2019-061\" \"2019-061\" \"2019-081\" \"2019-081\" #> [19] \"2019-081\" \"2019-081\""},{"path":"https://clock.r-lib.org/dev/reference/year-day-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: year-day — year-day-narrow","title":"Narrow: year-day — year-day-narrow","text":"year-day method calendar_narrow() generic. narrows year-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: year-day — year-day-narrow","text":"","code":"# S3 method for class 'clock_year_day' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: year-day — year-day-narrow","text":"x [clock_year_day] year-day vector. precision [character(1)] One : \"year\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: year-day — year-day-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: year-day — year-day-narrow","text":"","code":"# Hour precision x <- year_day(2019, 3, 4) x #> <year_day<hour>[1]> #> [1] \"2019-003T04\"  # Narrowed to day precision calendar_narrow(x, \"day\") #> <year_day<day>[1]> #> [1] \"2019-003\"  # Or year precision calendar_narrow(x, \"year\") #> <year_day<year>[1]> #> [1] \"2019\"  # Subsecond precision can be narrowed to second precision milli <- calendar_widen(x, \"millisecond\") micro <- calendar_widen(x, \"microsecond\") milli #> <year_day<millisecond>[1]> #> [1] \"2019-003T04:00:00.000\" micro #> <year_day<microsecond>[1]> #> [1] \"2019-003T04:00:00.000000\"  calendar_narrow(milli, \"second\") #> <year_day<second>[1]> #> [1] \"2019-003T04:00:00\" calendar_narrow(micro, \"second\") #> <year_day<second>[1]> #> [1] \"2019-003T04:00:00\"  # But once you have \"locked in\" a subsecond precision, it can't be # narrowed to another subsecond precision try(calendar_narrow(micro, \"millisecond\")) #> Error in calendar_narrow(micro, \"millisecond\") :  #>   Can't narrow a subsecond precision `x` (\"microsecond\") to #> another subsecond precision (\"millisecond\")."},{"path":"https://clock.r-lib.org/dev/reference/year-day-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: year-day — year-day-setters","title":"Setters: year-day — year-day-setters","text":"year-day methods setter generics. set_year() sets Gregorian year. set_day() sets day year. Valid values range [1, 366]. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: year-day — year-day-setters","text":"","code":"# S3 method for class 'clock_year_day' set_year(x, value, ...)  # S3 method for class 'clock_year_day' set_day(x, value, ...)  # S3 method for class 'clock_year_day' set_hour(x, value, ...)  # S3 method for class 'clock_year_day' set_minute(x, value, ...)  # S3 method for class 'clock_year_day' set_second(x, value, ...)  # S3 method for class 'clock_year_day' set_millisecond(x, value, ...)  # S3 method for class 'clock_year_day' set_microsecond(x, value, ...)  # S3 method for class 'clock_year_day' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: year-day — year-day-setters","text":"x [clock_year_day] year-day vector. value [integer / \"last\"] value set component . set_day(), can also \"last\" set day last day year. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: year-day — year-day-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: year-day — year-day-setters","text":"","code":"x <- year_day(2019)  # Set the day set_day(x, 12:14) #> <year_day<day>[3]> #> [1] \"2019-012\" \"2019-013\" \"2019-014\"  # Set to the \"last\" day of the year set_day(x, \"last\") #> <year_day<day>[1]> #> [1] \"2019-365\"  # Set to an invalid day of the year invalid <- set_day(x, 366) invalid #> <year_day<day>[1]> #> [1] \"2019-366\"  # Then resolve the invalid day by choosing the next valid day invalid_resolve(invalid, invalid = \"next\") #> <year_day<day>[1]> #> [1] \"2020-001\"  # Cannot set a component two levels more precise than where you currently are try(set_hour(x, 5)) #> Error in set_hour(x, 5) :  #>   Can't perform this operation because of the precision of `x`. #> ℹ The precision of `x` must be at least \"day\". #> ℹ `x` has a precision of \"year\"."},{"path":"https://clock.r-lib.org/dev/reference/year-day-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: year-day — year-day-widen","title":"Widen: year-day — year-day-widen","text":"year-day method calendar_widen() generic. widens year-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: year-day — year-day-widen","text":"","code":"# S3 method for class 'clock_year_day' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-day-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: year-day — year-day-widen","text":"x [clock_year_day] year-day vector. precision [character(1)] One : \"year\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: year-day — year-day-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-day-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: year-day — year-day-widen","text":"","code":"# Year precision x <- year_day(2019) x #> <year_day<year>[1]> #> [1] \"2019\"  # Widen to day precision calendar_widen(x, \"day\") #> <year_day<day>[1]> #> [1] \"2019-001\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <year_day<second>[1]> #> [1] \"2019-001T00:00:00\"  # Second precision can be widened to subsecond precision milli <- calendar_widen(sec, \"millisecond\") micro <- calendar_widen(sec, \"microsecond\") milli #> <year_day<millisecond>[1]> #> [1] \"2019-001T00:00:00.000\" micro #> <year_day<microsecond>[1]> #> [1] \"2019-001T00:00:00.000000\"  # But once you have \"locked in\" a subsecond precision, it can't # be widened again try(calendar_widen(milli, \"microsecond\")) #> Error in calendar_widen(milli, \"microsecond\") :  #>   Can't widen a subsecond precision `x` (\"millisecond\") to #> another subsecond precision (\"microsecond\")."},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: year-month-day — year-month-day-arithmetic","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"year-month-day methods arithmetic generics. add_years() add_quarters() add_months() Notably, add days year-month-day. day-based arithmetic, first convert time point as_naive_time() as_sys_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"","code":"# S3 method for class 'clock_year_month_day' add_years(x, n, ...)  # S3 method for class 'clock_year_month_day' add_quarters(x, n, ...)  # S3 method for class 'clock_year_month_day' add_months(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"x [clock_year_month_day] year-month-day vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"Adding single quarter add_quarters() equivalent adding 3 months. x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: year-month-day — year-month-day-arithmetic","text":"","code":"x <- year_month_day(2019, 1, 1)  add_years(x, 1:5) #> <year_month_day<day>[5]> #> [1] \"2020-01-01\" \"2021-01-01\" \"2022-01-01\" \"2023-01-01\" \"2024-01-01\"  y <- year_month_day(2019, 1, 31)  # Adding 1 month to `y` generates an invalid date y_plus <- add_months(y, 1:2) y_plus #> <year_month_day<day>[2]> #> [1] \"2019-02-31\" \"2019-03-31\"  # Invalid dates are fine, as long as they are eventually resolved # by either manually resolving, or by calling `invalid_resolve()`  # Resolve by returning the previous / next valid moment in time invalid_resolve(y_plus, invalid = \"previous\") #> <year_month_day<day>[2]> #> [1] \"2019-02-28\" \"2019-03-31\" invalid_resolve(y_plus, invalid = \"next\") #> <year_month_day<day>[2]> #> [1] \"2019-03-01\" \"2019-03-31\"  # Manually resolve by setting to the last day of the month invalid <- invalid_detect(y_plus) y_plus[invalid] <- set_day(y_plus[invalid], \"last\") y_plus #> <year_month_day<day>[2]> #> [1] \"2019-02-28\" \"2019-03-31\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: year-month-day — year-month-day-boundary","title":"Boundaries: year-month-day — year-month-day-boundary","text":"year-month-day method calendar_start() calendar_end() generics. adjust components calendar start end specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: year-month-day — year-month-day-boundary","text":"","code":"# S3 method for class 'clock_year_month_day' calendar_start(x, precision)  # S3 method for class 'clock_year_month_day' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: year-month-day — year-month-day-boundary","text":"x [clock_year_month_day] year-month-day vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: year-month-day — year-month-day-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: year-month-day — year-month-day-boundary","text":"","code":"# Hour precision x <- year_month_day(2019, 2:4, 5, 6) x #> <year_month_day<hour>[3]> #> [1] \"2019-02-05T06\" \"2019-03-05T06\" \"2019-04-05T06\"  # Compute the start of the month calendar_start(x, \"month\") #> <year_month_day<hour>[3]> #> [1] \"2019-02-01T00\" \"2019-03-01T00\" \"2019-04-01T00\"  # Or the end of the month, notice that the hour value is adjusted as well calendar_end(x, \"month\") #> <year_month_day<hour>[3]> #> [1] \"2019-02-28T23\" \"2019-03-31T23\" \"2019-04-30T23\"  # Compare that with just setting the day of the month to `\"last\"`, which # doesn't adjust any other components set_day(x, \"last\") #> <year_month_day<hour>[3]> #> [1] \"2019-02-28T06\" \"2019-03-31T06\" \"2019-04-30T06\"  # You can't compute the start / end at a more precise precision than # the input is at try(calendar_start(x, \"second\")) #> Error in calendar_start_end_checks(x, x_precision, precision, \"start\") :  #>   Can't compute the start of `x` (\"hour\") at a more precise #> precision (\"second\")."},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: year-month-day — year-month-day-count-between","title":"Counting: year-month-day — year-month-day-count-between","text":"year-month-day method calendar_count_between() generic. counts number precision units start end (.e., number years months).","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: year-month-day — year-month-day-count-between","text":"","code":"# S3 method for class 'clock_year_month_day' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: year-month-day — year-month-day-count-between","text":"start, end [clock_year_month_day] pair year-month-day vectors. recycled common size. precision [character(1)] One : \"year\" \"quarter\" \"month\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: year-month-day — year-month-day-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting: year-month-day — year-month-day-count-between","text":"\"quarter\" equivalent \"month\" precision n set n * 3L.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: year-month-day — year-month-day-count-between","text":"","code":"# Compute an individual's age in years x <- year_month_day(2001, 2, 4) today <- year_month_day(2021, 11, 30) calendar_count_between(x, today, \"year\") #> [1] 20  # Compute the number of months between two dates, taking # into account the day of the month and time of day x <- year_month_day(2000, 4, 2, 5) y <- year_month_day(2000, 7, c(1, 2, 2), c(3, 4, 6)) calendar_count_between(x, y, \"month\") #> [1] 2 2 3"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: year-month-day — year-month-day-getters","title":"Getters: year-month-day — year-month-day-getters","text":"year-month-day methods getter generics. get_year() returns Gregorian year. get_month() returns month year. get_day() returns day month. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: year-month-day — year-month-day-getters","text":"","code":"# S3 method for class 'clock_year_month_day' get_year(x)  # S3 method for class 'clock_year_month_day' get_month(x)  # S3 method for class 'clock_year_month_day' get_day(x)  # S3 method for class 'clock_year_month_day' get_hour(x)  # S3 method for class 'clock_year_month_day' get_minute(x)  # S3 method for class 'clock_year_month_day' get_second(x)  # S3 method for class 'clock_year_month_day' get_millisecond(x)  # S3 method for class 'clock_year_month_day' get_microsecond(x)  # S3 method for class 'clock_year_month_day' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: year-month-day — year-month-day-getters","text":"x [clock_year_month_day] year-month-day get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: year-month-day — year-month-day-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: year-month-day — year-month-day-getters","text":"","code":"x <- year_month_day(2019, 1:3, 5:7, 1, 20, 30)  get_month(x) #> [1] 1 2 3 get_day(x) #> [1] 5 6 7 get_second(x) #> [1] 30 30 30  # Cannot extract more precise components y <- year_month_day(2019, 1) try(get_day(y)) #> Error in get_day(y) :  #>   Can't perform this operation because of the precision of `x`. #> ℹ The precision of `x` must be at least \"day\". #> ℹ `x` has a precision of \"month\".  # Cannot extract components that don't exist for this calendar try(get_quarter(x)) #> Error in get_quarter(x) :  #>   Can't perform this operation on a <clock_year_month_day>."},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: year-month-day — year-month-day-group","title":"Grouping: year-month-day — year-month-day-group","text":"year-month-day method calendar_group() generic. Grouping year-month-day object can done precision, long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: year-month-day — year-month-day-group","text":"","code":"# S3 method for class 'clock_year_month_day' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: year-month-day — year-month-day-group","text":"x [clock_year_month_day] year-month-day vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: year-month-day — year-month-day-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: year-month-day — year-month-day-group","text":"","code":"steps <- duration_days(seq(0, 100, by = 5)) x <- year_month_day(2019, 1, 1) x <- as_naive_time(x) + steps x <- as_year_month_day(x) x #> <year_month_day<day>[21]> #>  [1] \"2019-01-01\" \"2019-01-06\" \"2019-01-11\" \"2019-01-16\" \"2019-01-21\" #>  [6] \"2019-01-26\" \"2019-01-31\" \"2019-02-05\" \"2019-02-10\" \"2019-02-15\" #> [11] \"2019-02-20\" \"2019-02-25\" \"2019-03-02\" \"2019-03-07\" \"2019-03-12\" #> [16] \"2019-03-17\" \"2019-03-22\" \"2019-03-27\" \"2019-04-01\" \"2019-04-06\" #> [21] \"2019-04-11\"  # Group by a single month calendar_group(x, \"month\") #> <year_month_day<month>[21]> #>  [1] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" #>  [7] \"2019-01\" \"2019-02\" \"2019-02\" \"2019-02\" \"2019-02\" \"2019-02\" #> [13] \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" #> [19] \"2019-04\" \"2019-04\" \"2019-04\"  # Or multiple months calendar_group(x, \"month\", n = 2) #> <year_month_day<month>[21]> #>  [1] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" #>  [7] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" \"2019-01\" #> [13] \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" \"2019-03\" #> [19] \"2019-03\" \"2019-03\" \"2019-03\"  # Group 3 days of the month together y <- year_month_day(2019, 1, 1:12) calendar_group(y, \"day\", n = 3) #> <year_month_day<day>[12]> #>  [1] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" \"2019-01-04\" \"2019-01-04\" #>  [6] \"2019-01-04\" \"2019-01-07\" \"2019-01-07\" \"2019-01-07\" \"2019-01-10\" #> [11] \"2019-01-10\" \"2019-01-10\"  # Group by 5 nanosecond of the current second z <- year_month_day(   2019, 1, 2, 1, 5, 20, 1:20,   subsecond_precision = \"nanosecond\" ) calendar_group(z, \"nanosecond\", n = 5) #> <year_month_day<nanosecond>[20]> #>  [1] \"2019-01-02T01:05:20.000000000\" \"2019-01-02T01:05:20.000000000\" #>  [3] \"2019-01-02T01:05:20.000000000\" \"2019-01-02T01:05:20.000000000\" #>  [5] \"2019-01-02T01:05:20.000000005\" \"2019-01-02T01:05:20.000000005\" #>  [7] \"2019-01-02T01:05:20.000000005\" \"2019-01-02T01:05:20.000000005\" #>  [9] \"2019-01-02T01:05:20.000000005\" \"2019-01-02T01:05:20.000000010\" #> [11] \"2019-01-02T01:05:20.000000010\" \"2019-01-02T01:05:20.000000010\" #> [13] \"2019-01-02T01:05:20.000000010\" \"2019-01-02T01:05:20.000000010\" #> [15] \"2019-01-02T01:05:20.000000015\" \"2019-01-02T01:05:20.000000015\" #> [17] \"2019-01-02T01:05:20.000000015\" \"2019-01-02T01:05:20.000000015\" #> [19] \"2019-01-02T01:05:20.000000015\" \"2019-01-02T01:05:20.000000020\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: year-month-day — year-month-day-narrow","title":"Narrow: year-month-day — year-month-day-narrow","text":"year-month-day method calendar_narrow() generic. narrows year-month-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: year-month-day — year-month-day-narrow","text":"","code":"# S3 method for class 'clock_year_month_day' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: year-month-day — year-month-day-narrow","text":"x [clock_year_month_day] year-month-day vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: year-month-day — year-month-day-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: year-month-day — year-month-day-narrow","text":"","code":"# Hour precision x <- year_month_day(2019, 1, 3, 4) x #> <year_month_day<hour>[1]> #> [1] \"2019-01-03T04\"  # Narrowed to day precision calendar_narrow(x, \"day\") #> <year_month_day<day>[1]> #> [1] \"2019-01-03\"  # Or month precision calendar_narrow(x, \"month\") #> <year_month_day<month>[1]> #> [1] \"2019-01\"  # Subsecond precision can be narrowed to second precision milli <- calendar_widen(x, \"millisecond\") micro <- calendar_widen(x, \"microsecond\") milli #> <year_month_day<millisecond>[1]> #> [1] \"2019-01-03T04:00:00.000\" micro #> <year_month_day<microsecond>[1]> #> [1] \"2019-01-03T04:00:00.000000\"  calendar_narrow(milli, \"second\") #> <year_month_day<second>[1]> #> [1] \"2019-01-03T04:00:00\" calendar_narrow(micro, \"second\") #> <year_month_day<second>[1]> #> [1] \"2019-01-03T04:00:00\"  # But once you have \"locked in\" a subsecond precision, it can't be # narrowed to another subsecond precision try(calendar_narrow(micro, \"millisecond\")) #> Error in calendar_narrow(micro, \"millisecond\") :  #>   Can't narrow a subsecond precision `x` (\"microsecond\") to #> another subsecond precision (\"millisecond\")."},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: year-month-day — year-month-day-setters","title":"Setters: year-month-day — year-month-day-setters","text":"year-month-day methods setter generics. set_year() sets Gregorian year. set_month() sets month year. Valid values range [1, 12]. set_day() sets day month. Valid values range [1, 31]. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: year-month-day — year-month-day-setters","text":"","code":"# S3 method for class 'clock_year_month_day' set_year(x, value, ...)  # S3 method for class 'clock_year_month_day' set_month(x, value, ...)  # S3 method for class 'clock_year_month_day' set_day(x, value, ...)  # S3 method for class 'clock_year_month_day' set_hour(x, value, ...)  # S3 method for class 'clock_year_month_day' set_minute(x, value, ...)  # S3 method for class 'clock_year_month_day' set_second(x, value, ...)  # S3 method for class 'clock_year_month_day' set_millisecond(x, value, ...)  # S3 method for class 'clock_year_month_day' set_microsecond(x, value, ...)  # S3 method for class 'clock_year_month_day' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: year-month-day — year-month-day-setters","text":"x [clock_year_month_day] year-month-day vector. value [integer / \"last\"] value set component . set_day(), can also \"last\" set day last day month. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: year-month-day — year-month-day-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: year-month-day — year-month-day-setters","text":"","code":"x <- year_month_day(2019, 1:3)  # Set the day set_day(x, 12:14) #> <year_month_day<day>[3]> #> [1] \"2019-01-12\" \"2019-02-13\" \"2019-03-14\"  # Set to the \"last\" day of the month set_day(x, \"last\") #> <year_month_day<day>[3]> #> [1] \"2019-01-31\" \"2019-02-28\" \"2019-03-31\"  # Set to an invalid day of the month invalid <- set_day(x, 31) invalid #> <year_month_day<day>[3]> #> [1] \"2019-01-31\" \"2019-02-31\" \"2019-03-31\"  # Then resolve the invalid day by choosing the next valid day invalid_resolve(invalid, invalid = \"next\") #> <year_month_day<day>[3]> #> [1] \"2019-01-31\" \"2019-03-01\" \"2019-03-31\"  # Cannot set a component two levels more precise than where you currently are try(set_hour(x, 5)) #> Error in set_hour(x, 5) :  #>   Can't perform this operation because of the precision of `x`. #> ℹ The precision of `x` must be at least \"day\". #> ℹ `x` has a precision of \"month\"."},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: year-month-day — year-month-day-widen","title":"Widen: year-month-day — year-month-day-widen","text":"year-month-day method calendar_widen() generic. widens year-month-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: year-month-day — year-month-day-widen","text":"","code":"# S3 method for class 'clock_year_month_day' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: year-month-day — year-month-day-widen","text":"x [clock_year_month_day] year-month-day vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: year-month-day — year-month-day-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-day-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: year-month-day — year-month-day-widen","text":"","code":"# Month precision x <- year_month_day(2019, 1) x #> <year_month_day<month>[1]> #> [1] \"2019-01\"  # Widen to day precision calendar_widen(x, \"day\") #> <year_month_day<day>[1]> #> [1] \"2019-01-01\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <year_month_day<second>[1]> #> [1] \"2019-01-01T00:00:00\"  # Second precision can be widened to subsecond precision milli <- calendar_widen(sec, \"millisecond\") micro <- calendar_widen(sec, \"microsecond\") milli #> <year_month_day<millisecond>[1]> #> [1] \"2019-01-01T00:00:00.000\" micro #> <year_month_day<microsecond>[1]> #> [1] \"2019-01-01T00:00:00.000000\"  # But once you have \"locked in\" a subsecond precision, it can't # be widened again try(calendar_widen(milli, \"microsecond\")) #> Error in calendar_widen(milli, \"microsecond\") :  #>   Can't widen a subsecond precision `x` (\"millisecond\") to #> another subsecond precision (\"microsecond\")."},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"year-month-weekday methods arithmetic generics. add_years() add_quarters() add_months() Notably, add days year-month-weekday. day-based arithmetic, first convert time point as_naive_time() as_sys_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"","code":"# S3 method for class 'clock_year_month_weekday' add_years(x, n, ...)  # S3 method for class 'clock_year_month_weekday' add_quarters(x, n, ...)  # S3 method for class 'clock_year_month_weekday' add_months(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"x [clock_year_month_weekday] year-month-weekday vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"Adding single quarter add_quarters() equivalent adding 3 months. x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: year-month-weekday — year-month-weekday-arithmetic","text":"","code":"# 2nd Friday in January, 2019 x <- year_month_weekday(2019, 1, clock_weekdays$friday, 2) x #> <year_month_weekday<day>[1]> #> [1] \"2019-01-Fri[2]\"  add_months(x, 1:5) #> <year_month_weekday<day>[5]> #> [1] \"2019-02-Fri[2]\" \"2019-03-Fri[2]\" \"2019-04-Fri[2]\" \"2019-05-Fri[2]\" #> [5] \"2019-06-Fri[2]\"  # These don't necessarily correspond to the same day of the month as_year_month_day(add_months(x, 1:5)) #> <year_month_day<day>[5]> #> [1] \"2019-02-08\" \"2019-03-08\" \"2019-04-12\" \"2019-05-10\" \"2019-06-14\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: year-month-weekday — year-month-weekday-boundary","title":"Boundaries: year-month-weekday — year-month-weekday-boundary","text":"year-month-weekday method calendar_start() calendar_end() generics. adjust components calendar start end specified precision. method restricted \"year\" \"month\" precisions, x precise month precision. Computing \"start\" day precision year-month-weekday object defined year-month-weekday day = 1, index = 1 necessarily occur earlier (chronologically) day = 2, index = 1. restrictions, method particularly useful, included completeness.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: year-month-weekday — year-month-weekday-boundary","text":"","code":"# S3 method for class 'clock_year_month_weekday' calendar_start(x, precision)  # S3 method for class 'clock_year_month_weekday' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: year-month-weekday — year-month-weekday-boundary","text":"x [clock_year_month_weekday] year-month-weekday vector. precision [character(1)] One : \"year\" \"month\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: year-month-weekday — year-month-weekday-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: year-month-weekday — year-month-weekday-boundary","text":"","code":"# Month precision x <- year_month_weekday(2019, 1:5) x #> <year_month_weekday<month>[5]> #> [1] \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\"  # Compute the last month of the year calendar_end(x, \"year\") #> <year_month_weekday<month>[5]> #> [1] \"2019-12\" \"2019-12\" \"2019-12\" \"2019-12\" \"2019-12\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: year-month-weekday — year-month-weekday-count-between","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"year-month-weekday method calendar_count_between() generic. counts number precision units start end (.e., number years months).","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"","code":"# S3 method for class 'clock_year_month_weekday' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"start, end [clock_year_month_weekday] pair year-month-weekday vectors. recycled common size. precision [character(1)] One : \"year\" \"quarter\" \"month\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"Remember year-month-weekday comparable \"day\" precision finer, method defined \"year\" \"month\" precision year-month-weekday objects. \"quarter\" equivalent \"month\" precision n set n * 3L.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: year-month-weekday — year-month-weekday-count-between","text":"","code":"# Compute the number of months between two dates x <- year_month_weekday(2001, 2) y <- year_month_weekday(2021, c(1, 3))  calendar_count_between(x, y, \"month\") #> [1] 239 241  # Remember that day precision or finer year-month-weekday objects # are not comparable, so this won't work x <- year_month_weekday(2001, 2, 1, 1) try(calendar_count_between(x, x, \"month\")) #> Error in vec_proxy_compare(x = x) :  #>   'year_month_weekday' types with a precision of >= 'day' cannot be trivially compared or ordered. Convert to 'year_month_day' to compare using day-of-month values."},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: year-month-weekday — year-month-weekday-getters","title":"Getters: year-month-weekday — year-month-weekday-getters","text":"year-month-weekday methods getter generics. get_year() returns Gregorian year. get_month() returns month year. get_day() returns day week encoded 1-7, 1 = Sunday 7 = Saturday. get_index() returns value 1-5 indicating corresponding weekday n-th instance weekday current month. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: year-month-weekday — year-month-weekday-getters","text":"","code":"# S3 method for class 'clock_year_month_weekday' get_year(x)  # S3 method for class 'clock_year_month_weekday' get_month(x)  # S3 method for class 'clock_year_month_weekday' get_day(x)  # S3 method for class 'clock_year_month_weekday' get_index(x)  # S3 method for class 'clock_year_month_weekday' get_hour(x)  # S3 method for class 'clock_year_month_weekday' get_minute(x)  # S3 method for class 'clock_year_month_weekday' get_second(x)  # S3 method for class 'clock_year_month_weekday' get_millisecond(x)  # S3 method for class 'clock_year_month_weekday' get_microsecond(x)  # S3 method for class 'clock_year_month_weekday' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: year-month-weekday — year-month-weekday-getters","text":"x [clock_year_month_weekday] year-month-weekday get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: year-month-weekday — year-month-weekday-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: year-month-weekday — year-month-weekday-getters","text":"","code":"monday <- clock_weekdays$monday thursday <- clock_weekdays$thursday  x <- year_month_weekday(2019, 1, monday:thursday, 1:4) x #> <year_month_weekday<day>[4]> #> [1] \"2019-01-Mon[1]\" \"2019-01-Tue[2]\" \"2019-01-Wed[3]\" \"2019-01-Thu[4]\"  # Gets the weekday, 1 = Sunday, 7 = Saturday get_day(x) #> [1] 2 3 4 5  # Gets the index indicating which instance of that particular weekday # it is in the current month (i.e. the \"1st Monday of January, 2019\") get_index(x) #> [1] 1 2 3 4"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: year-month-weekday — year-month-weekday-group","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"year-month-weekday method calendar_group() generic. Grouping year-month-weekday object can done precision except \"day\", long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"","code":"# S3 method for class 'clock_year_month_weekday' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"x [clock_year_month_weekday] year-month-weekday vector. precision [character(1)] One : \"year\" \"month\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"Grouping \"day\" undefined year-month-weekday two day fields, weekday index, clear way define group .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: year-month-weekday — year-month-weekday-group","text":"","code":"x <- year_month_weekday(2019, 1:12, clock_weekdays$sunday, 1, 00, 05, 05) x #> <year_month_weekday<second>[12]> #>  [1] \"2019-01-Sun[1]T00:05:05\" \"2019-02-Sun[1]T00:05:05\" #>  [3] \"2019-03-Sun[1]T00:05:05\" \"2019-04-Sun[1]T00:05:05\" #>  [5] \"2019-05-Sun[1]T00:05:05\" \"2019-06-Sun[1]T00:05:05\" #>  [7] \"2019-07-Sun[1]T00:05:05\" \"2019-08-Sun[1]T00:05:05\" #>  [9] \"2019-09-Sun[1]T00:05:05\" \"2019-10-Sun[1]T00:05:05\" #> [11] \"2019-11-Sun[1]T00:05:05\" \"2019-12-Sun[1]T00:05:05\"  # Group by 3 months - drops more precise components! calendar_group(x, \"month\", n = 3) #> <year_month_weekday<month>[12]> #>  [1] \"2019-01\" \"2019-01\" \"2019-01\" \"2019-04\" \"2019-04\" \"2019-04\" #>  [7] \"2019-07\" \"2019-07\" \"2019-07\" \"2019-10\" \"2019-10\" \"2019-10\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: year-month-weekday — year-month-weekday-narrow","title":"Narrow: year-month-weekday — year-month-weekday-narrow","text":"year-month-weekday method calendar_narrow() generic. narrows year-month-weekday vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: year-month-weekday — year-month-weekday-narrow","text":"","code":"# S3 method for class 'clock_year_month_weekday' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: year-month-weekday — year-month-weekday-narrow","text":"x [clock_year_month_weekday] year-month-weekday vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: year-month-weekday — year-month-weekday-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: year-month-weekday — year-month-weekday-narrow","text":"","code":"# Day precision x <- year_month_weekday(2019, 1, 1, 2) x #> <year_month_weekday<day>[1]> #> [1] \"2019-01-Sun[2]\"  # Narrowed to month precision calendar_narrow(x, \"month\") #> <year_month_weekday<month>[1]> #> [1] \"2019-01\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: year-month-weekday — year-month-weekday-setters","title":"Setters: year-month-weekday — year-month-weekday-setters","text":"year-month-weekday methods setter generics. set_year() sets Gregorian year. set_month() sets month year. Valid values range [1, 12]. set_day() sets day week. Valid values range [1, 7], 1 = Sunday, 7 = Saturday. set_index() sets index indicating corresponding weekday n-th instance weekday current month. Valid values range [1, 5]. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: year-month-weekday — year-month-weekday-setters","text":"","code":"# S3 method for class 'clock_year_month_weekday' set_year(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_month(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_day(x, value, ..., index = NULL)  # S3 method for class 'clock_year_month_weekday' set_index(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_hour(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_minute(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_second(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_millisecond(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_microsecond(x, value, ...)  # S3 method for class 'clock_year_month_weekday' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: year-month-weekday — year-month-weekday-setters","text":"x [clock_year_month_weekday] year-month-weekday vector. value [integer / \"last\"] value set component . set_index(), can also \"last\" adjust last instance corresponding weekday month. ... dots future extensions must empty. index [NULL / integer / \"last\"] argument used set_day(), allows set index also setting weekday. x month precision year-month-weekday, index required set, must specify weekday index simultaneously promote month day precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: year-month-weekday — year-month-weekday-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: year-month-weekday — year-month-weekday-setters","text":"","code":"x <- year_month_weekday(2019, 1:3)  set_year(x, 2020:2022) #> <year_month_weekday<month>[3]> #> [1] \"2020-01\" \"2021-02\" \"2022-03\"  # Setting the weekday on a month precision year-month-weekday requires # also setting the `index` to fully specify the day information x <- set_day(x, clock_weekdays$sunday, index = 1) x #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Sun[1]\" \"2019-02-Sun[1]\" \"2019-03-Sun[1]\"  # Once you have at least day precision, you can set the weekday and # the index separately set_day(x, clock_weekdays$monday) #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Mon[1]\" \"2019-02-Mon[1]\" \"2019-03-Mon[1]\" set_index(x, 3) #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Sun[3]\" \"2019-02-Sun[3]\" \"2019-03-Sun[3]\"  # Set to the \"last\" instance of the corresponding weekday in this month # (Note that some months have 4 Sundays, and others have 5) set_index(x, \"last\") #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Sun[4]\" \"2019-02-Sun[4]\" \"2019-03-Sun[5]\"  # Set to an invalid index # January and February of 2019 don't have 5 Sundays! invalid <- set_index(x, 5) invalid #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Sun[5]\" \"2019-02-Sun[5]\" \"2019-03-Sun[5]\"  # Resolve the invalid dates by choosing the previous/next valid moment invalid_resolve(invalid, invalid = \"previous\") #> <year_month_weekday<day>[3]> #> [1] \"2019-01-Thu[5]\" \"2019-02-Thu[4]\" \"2019-03-Sun[5]\" invalid_resolve(invalid, invalid = \"next\") #> <year_month_weekday<day>[3]> #> [1] \"2019-02-Fri[1]\" \"2019-03-Fri[1]\" \"2019-03-Sun[5]\"  # You can also \"overflow\" the index. This keeps the weekday, but resets # the index to 1 and increments the month value by 1. invalid_resolve(invalid, invalid = \"overflow\") #> <year_month_weekday<day>[3]> #> [1] \"2019-02-Sun[1]\" \"2019-03-Sun[1]\" \"2019-03-Sun[5]\""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: year-month-weekday — year-month-weekday-widen","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"year-month-weekday method calendar_widen() generic. widens year-month-weekday vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"","code":"# S3 method for class 'clock_year_month_weekday' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"x [clock_year_month_weekday] year-month-weekday vector. precision [character(1)] One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"Widening month precision year-month-weekday day precision set day index 1. sets weekday components first Sunday month.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-month-weekday-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: year-month-weekday — year-month-weekday-widen","text":"","code":"# Month precision x <- year_month_weekday(2019, 1) x #> <year_month_weekday<month>[1]> #> [1] \"2019-01\"  # Widen to day precision # Note that this sets both the day and index to 1, # i.e. the first Sunday of the month. calendar_widen(x, \"day\") #> <year_month_weekday<day>[1]> #> [1] \"2019-01-Sun[1]\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <year_month_weekday<second>[1]> #> [1] \"2019-01-Sun[1]T00:00:00\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"year-quarter-day methods arithmetic generics. add_years() add_quarters() Notably, add days year-quarter-day. day-based arithmetic, first convert time point as_naive_time() as_sys_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"","code":"# S3 method for class 'clock_year_quarter_day' add_years(x, n, ...)  # S3 method for class 'clock_year_quarter_day' add_quarters(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"x [clock_year_quarter_day] year-quarter-day vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: year-quarter-day — year-quarter-day-arithmetic","text":"","code":"x <- year_quarter_day(2019, 1:3) x #> <year_quarter_day<January><quarter>[3]> #> [1] \"2019-Q1\" \"2019-Q2\" \"2019-Q3\"  add_quarters(x, 2) #> <year_quarter_day<January><quarter>[3]> #> [1] \"2019-Q3\" \"2019-Q4\" \"2020-Q1\"  # Make the fiscal year start in March y <- year_quarter_day(2019, 1:2, 1, start = 3) y #> <year_quarter_day<March><day>[2]> #> [1] \"2019-Q1-01\" \"2019-Q2-01\"  add_quarters(y, 1) #> <year_quarter_day<March><day>[2]> #> [1] \"2019-Q2-01\" \"2019-Q3-01\"  # What year-month-day does this correspond to? # Note that the fiscal year doesn't necessarily align with the Gregorian # year! as_year_month_day(add_quarters(y, 1)) #> <year_month_day<day>[2]> #> [1] \"2018-06-01\" \"2018-09-01\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: year-quarter-day — year-quarter-day-boundary","title":"Boundaries: year-quarter-day — year-quarter-day-boundary","text":"year-quarter-day method calendar_start() calendar_end() generics. adjust components calendar start end specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: year-quarter-day — year-quarter-day-boundary","text":"","code":"# S3 method for class 'clock_year_quarter_day' calendar_start(x, precision)  # S3 method for class 'clock_year_quarter_day' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: year-quarter-day — year-quarter-day-boundary","text":"x [clock_year_quarter_day] year-quarter-day vector. precision [character(1)] One : \"year\" \"quarter\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: year-quarter-day — year-quarter-day-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: year-quarter-day — year-quarter-day-boundary","text":"","code":"x <- year_quarter_day(2019:2020, 2:3, 5, 6, 7, 8, start = clock_months$march) x #> <year_quarter_day<March><second>[2]> #> [1] \"2019-Q2-05T06:07:08\" \"2020-Q3-05T06:07:08\"  # Compute the last moment of the fiscal quarter calendar_end(x, \"quarter\") #> <year_quarter_day<March><second>[2]> #> [1] \"2019-Q2-92T23:59:59\" \"2020-Q3-91T23:59:59\"  # Compare that to just setting the day to `\"last\"`, # which doesn't affect the other components set_day(x, \"last\") #> <year_quarter_day<March><second>[2]> #> [1] \"2019-Q2-92T06:07:08\" \"2020-Q3-91T06:07:08\"  # Compute the start of the fiscal year calendar_start(x, \"year\") #> <year_quarter_day<March><second>[2]> #> [1] \"2019-Q1-01T00:00:00\" \"2020-Q1-01T00:00:00\"  as_date(calendar_start(x, \"year\")) #> [1] \"2018-03-01\" \"2019-03-01\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: year-quarter-day — year-quarter-day-count-between","title":"Counting: year-quarter-day — year-quarter-day-count-between","text":"year-quarter-day method calendar_count_between() generic. counts number precision units start end (.e., number years quarters).","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: year-quarter-day — year-quarter-day-count-between","text":"","code":"# S3 method for class 'clock_year_quarter_day' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: year-quarter-day — year-quarter-day-count-between","text":"start, end [clock_year_quarter_day] pair year-quarter-day vectors. recycled common size. precision [character(1)] One : \"year\" \"quarter\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: year-quarter-day — year-quarter-day-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: year-quarter-day — year-quarter-day-count-between","text":"","code":"# Compute the number of whole quarters between two dates x <- year_quarter_day(2020, 3, 91) y <- year_quarter_day(2025, 4, c(90, 92)) calendar_count_between(x, y, \"quarter\") #> [1] 20 21  # Note that this is not always the same as the number of whole 3 month # periods between two dates x <- as_year_month_day(x) y <- as_year_month_day(y) calendar_count_between(x, y, \"month\", n = 3) #> [1] 21 21"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: year-quarter-day — year-quarter-day-getters","title":"Getters: year-quarter-day — year-quarter-day-getters","text":"year-quarter-day methods getter generics. get_year() returns fiscal year. Note can differ Gregorian year start != 1L. get_quarter() returns fiscal quarter value 1-4. get_day() returns day fiscal quarter value 1-92. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: year-quarter-day — year-quarter-day-getters","text":"","code":"# S3 method for class 'clock_year_quarter_day' get_year(x)  # S3 method for class 'clock_year_quarter_day' get_quarter(x)  # S3 method for class 'clock_year_quarter_day' get_day(x)  # S3 method for class 'clock_year_quarter_day' get_hour(x)  # S3 method for class 'clock_year_quarter_day' get_minute(x)  # S3 method for class 'clock_year_quarter_day' get_second(x)  # S3 method for class 'clock_year_quarter_day' get_millisecond(x)  # S3 method for class 'clock_year_quarter_day' get_microsecond(x)  # S3 method for class 'clock_year_quarter_day' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: year-quarter-day — year-quarter-day-getters","text":"x [clock_year_quarter_day] year-quarter-day get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: year-quarter-day — year-quarter-day-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: year-quarter-day — year-quarter-day-getters","text":"","code":"x <- year_quarter_day(2020, 1:4)  get_quarter(x) #> [1] 1 2 3 4  # Set and then get the last day of the quarter x <- set_day(x, \"last\") get_day(x) #> [1] 91 91 92 92  # Start the fiscal year in November and choose the 50th day in # each quarter of 2020 november <- 11 y <- year_quarter_day(2020, 1:4, 50, start = 11) y #> <year_quarter_day<November><day>[4]> #> [1] \"2020-Q1-50\" \"2020-Q2-50\" \"2020-Q3-50\" \"2020-Q4-50\"  get_day(y) #> [1] 50 50 50 50  # What does that map to in year-month-day? as_year_month_day(y) #> <year_month_day<day>[4]> #> [1] \"2019-12-20\" \"2020-03-21\" \"2020-06-19\" \"2020-09-19\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: year-quarter-day — year-quarter-day-group","title":"Grouping: year-quarter-day — year-quarter-day-group","text":"year-quarter-day method calendar_group() generic. Grouping year-quarter-day object can done precision, long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: year-quarter-day — year-quarter-day-group","text":"","code":"# S3 method for class 'clock_year_quarter_day' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: year-quarter-day — year-quarter-day-group","text":"x [clock_year_quarter_day] year-quarter-day vector. precision [character(1)] One : \"year\" \"quarter\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: year-quarter-day — year-quarter-day-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: year-quarter-day — year-quarter-day-group","text":"","code":"x <- year_quarter_day(2019, 1:4) x <- c(x, set_year(x, 2020))  # Group by 3 quarters # Note that this is a grouping of 3 quarters of the current year # (i.e. the count resets at the beginning of the next year) calendar_group(x, \"quarter\", n = 3) #> <year_quarter_day<January><quarter>[8]> #> [1] \"2019-Q1\" \"2019-Q1\" \"2019-Q1\" \"2019-Q4\" \"2020-Q1\" \"2020-Q1\" #> [7] \"2020-Q1\" \"2020-Q4\"  # Group by 5 days of the current quarter y <- year_quarter_day(2019, 1, 1:90) calendar_group(y, \"day\", n = 5) #> <year_quarter_day<January><day>[90]> #>  [1] \"2019-Q1-01\" \"2019-Q1-01\" \"2019-Q1-01\" \"2019-Q1-01\" \"2019-Q1-01\" #>  [6] \"2019-Q1-06\" \"2019-Q1-06\" \"2019-Q1-06\" \"2019-Q1-06\" \"2019-Q1-06\" #> [11] \"2019-Q1-11\" \"2019-Q1-11\" \"2019-Q1-11\" \"2019-Q1-11\" \"2019-Q1-11\" #> [16] \"2019-Q1-16\" \"2019-Q1-16\" \"2019-Q1-16\" \"2019-Q1-16\" \"2019-Q1-16\" #> [21] \"2019-Q1-21\" \"2019-Q1-21\" \"2019-Q1-21\" \"2019-Q1-21\" \"2019-Q1-21\" #> [26] \"2019-Q1-26\" \"2019-Q1-26\" \"2019-Q1-26\" \"2019-Q1-26\" \"2019-Q1-26\" #> [31] \"2019-Q1-31\" \"2019-Q1-31\" \"2019-Q1-31\" \"2019-Q1-31\" \"2019-Q1-31\" #> [36] \"2019-Q1-36\" \"2019-Q1-36\" \"2019-Q1-36\" \"2019-Q1-36\" \"2019-Q1-36\" #> [41] \"2019-Q1-41\" \"2019-Q1-41\" \"2019-Q1-41\" \"2019-Q1-41\" \"2019-Q1-41\" #> [46] \"2019-Q1-46\" \"2019-Q1-46\" \"2019-Q1-46\" \"2019-Q1-46\" \"2019-Q1-46\" #> [51] \"2019-Q1-51\" \"2019-Q1-51\" \"2019-Q1-51\" \"2019-Q1-51\" \"2019-Q1-51\" #> [56] \"2019-Q1-56\" \"2019-Q1-56\" \"2019-Q1-56\" \"2019-Q1-56\" \"2019-Q1-56\" #> [61] \"2019-Q1-61\" \"2019-Q1-61\" \"2019-Q1-61\" \"2019-Q1-61\" \"2019-Q1-61\" #> [66] \"2019-Q1-66\" \"2019-Q1-66\" \"2019-Q1-66\" \"2019-Q1-66\" \"2019-Q1-66\" #> [71] \"2019-Q1-71\" \"2019-Q1-71\" \"2019-Q1-71\" \"2019-Q1-71\" \"2019-Q1-71\" #> [76] \"2019-Q1-76\" \"2019-Q1-76\" \"2019-Q1-76\" \"2019-Q1-76\" \"2019-Q1-76\" #> [81] \"2019-Q1-81\" \"2019-Q1-81\" \"2019-Q1-81\" \"2019-Q1-81\" \"2019-Q1-81\" #> [86] \"2019-Q1-86\" \"2019-Q1-86\" \"2019-Q1-86\" \"2019-Q1-86\" \"2019-Q1-86\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: year-quarter-day — year-quarter-day-narrow","title":"Narrow: year-quarter-day — year-quarter-day-narrow","text":"year-quarter-day method calendar_narrow() generic. narrows year-quarter-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: year-quarter-day — year-quarter-day-narrow","text":"","code":"# S3 method for class 'clock_year_quarter_day' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: year-quarter-day — year-quarter-day-narrow","text":"x [clock_year_quarter_day] year-quarter-day vector. precision [character(1)] One : \"year\" \"quarter\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: year-quarter-day — year-quarter-day-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: year-quarter-day — year-quarter-day-narrow","text":"","code":"# Day precision x <- year_quarter_day(2019, 1, 5) x #> <year_quarter_day<January><day>[1]> #> [1] \"2019-Q1-05\"  # Narrow to quarter precision calendar_narrow(x, \"quarter\") #> <year_quarter_day<January><quarter>[1]> #> [1] \"2019-Q1\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: year-quarter-day — year-quarter-day-setters","title":"Setters: year-quarter-day — year-quarter-day-setters","text":"year-quarter-day methods setter generics. set_year() sets fiscal year. set_quarter() sets fiscal quarter year. Valid values range [1, 4]. set_day() sets day fiscal quarter. Valid values range [1, 92]. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: year-quarter-day — year-quarter-day-setters","text":"","code":"# S3 method for class 'clock_year_quarter_day' set_year(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_quarter(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_day(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_hour(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_minute(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_second(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_millisecond(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_microsecond(x, value, ...)  # S3 method for class 'clock_year_quarter_day' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: year-quarter-day — year-quarter-day-setters","text":"x [clock_year_quarter_day] year-quarter-day vector. value [integer / \"last\"] value set component . set_day(), can also \"last\" adjust last day current fiscal quarter. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: year-quarter-day — year-quarter-day-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: year-quarter-day — year-quarter-day-setters","text":"","code":"library(magrittr)  # Quarter precision vector x <- year_quarter_day(2019, 1:4) x #> <year_quarter_day<January><quarter>[4]> #> [1] \"2019-Q1\" \"2019-Q2\" \"2019-Q3\" \"2019-Q4\"  # Promote to day precision by setting the day x <- set_day(x, 1) x #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q1-01\" \"2019-Q2-01\" \"2019-Q3-01\" \"2019-Q4-01\"  # Or set to the last day of the quarter x <- set_day(x, \"last\") x #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q1-90\" \"2019-Q2-91\" \"2019-Q3-92\" \"2019-Q4-92\"  # What year-month-day is this? as_year_month_day(x) #> <year_month_day<day>[4]> #> [1] \"2019-03-31\" \"2019-06-30\" \"2019-09-30\" \"2019-12-31\"  # Set to an invalid day of the quarter # (not all quarters have 92 days) invalid <- set_day(x, 92) invalid #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q1-92\" \"2019-Q2-92\" \"2019-Q3-92\" \"2019-Q4-92\"  # Here are the invalid ones invalid[invalid_detect(invalid)] #> <year_quarter_day<January><day>[2]> #> [1] \"2019-Q1-92\" \"2019-Q2-92\"  # Resolve the invalid dates by choosing the previous/next valid moment invalid_resolve(invalid, invalid = \"previous\") #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q1-90\" \"2019-Q2-91\" \"2019-Q3-92\" \"2019-Q4-92\" invalid_resolve(invalid, invalid = \"next\") #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q2-01\" \"2019-Q3-01\" \"2019-Q3-92\" \"2019-Q4-92\"  # Or resolve by \"overflowing\" by the number of days that you have # gone past the last valid day invalid_resolve(invalid, invalid = \"overflow\") #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q2-02\" \"2019-Q3-01\" \"2019-Q3-92\" \"2019-Q4-92\"  # This is similar to days <- get_day(invalid) - 1L invalid %>%   set_day(1) %>%   as_naive_time() %>%   add_days(days) %>%   as_year_quarter_day() #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q2-02\" \"2019-Q3-01\" \"2019-Q3-92\" \"2019-Q4-92\""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: year-quarter-day — year-quarter-day-widen","title":"Widen: year-quarter-day — year-quarter-day-widen","text":"year-quarter-day method calendar_widen() generic. widens year-quarter-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: year-quarter-day — year-quarter-day-widen","text":"","code":"# S3 method for class 'clock_year_quarter_day' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: year-quarter-day — year-quarter-day-widen","text":"x [clock_year_quarter_day] year-quarter-day vector. precision [character(1)] One : \"year\" \"quarter\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: year-quarter-day — year-quarter-day-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-quarter-day-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: year-quarter-day — year-quarter-day-widen","text":"","code":"# Quarter precision x <- year_quarter_day(2019, 1) x #> <year_quarter_day<January><quarter>[1]> #> [1] \"2019-Q1\"  # Widen to day precision calendar_widen(x, \"day\") #> <year_quarter_day<January><day>[1]> #> [1] \"2019-Q1-01\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <year_quarter_day<January><second>[1]> #> [1] \"2019-Q1-01T00:00:00\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic: year-week-day — year-week-day-arithmetic","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"year-week-day methods arithmetic generics. add_years() add weeks days year-week-day calendar. Adding days much efficiently done converting time point first using as_naive_time() as_sys_time(). Adding weeks equally efficient adding 7 days. Additionally, adding weeks invalid year-week object (.e. one set 53rd week, exist) undefined.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"","code":"# S3 method for class 'clock_year_week_day' add_years(x, n, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"x [clock_year_week_day] year-week-day vector. n [integer / clock_duration] integer vector converted duration, duration corresponding arithmetic function used. corresponds number duration units add. n may negative subtract units duration. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"x performing arithmetic.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"x n recycled using tidyverse recycling rules.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic: year-week-day — year-week-day-arithmetic","text":"","code":"x <- year_week_day(2019, 1, 1) add_years(x, 1:2) #> <year_week_day<Sunday><day>[2]> #> [1] \"2020-W01-1\" \"2021-W01-1\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundaries: year-week-day — year-week-day-boundary","title":"Boundaries: year-week-day — year-week-day-boundary","text":"year-week-day method calendar_start() calendar_end() generics. adjust components calendar start end specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundaries: year-week-day — year-week-day-boundary","text":"","code":"# S3 method for class 'clock_year_week_day' calendar_start(x, precision)  # S3 method for class 'clock_year_week_day' calendar_end(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundaries: year-week-day — year-week-day-boundary","text":"x [clock_year_week_day] year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundaries: year-week-day — year-week-day-boundary","text":"x precision, components altered boundary value.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boundaries: year-week-day — year-week-day-boundary","text":"","code":"x <- year_week_day(2019:2020, 5, 6, 10) x #> <year_week_day<Sunday><hour>[2]> #> [1] \"2019-W05-6T10\" \"2020-W05-6T10\"  # Compute the last moment of the last week of the year calendar_end(x, \"year\") #> <year_week_day<Sunday><hour>[2]> #> [1] \"2019-W52-7T23\" \"2020-W53-7T23\"  # Compare that to just setting the week to `\"last\"`, # which doesn't affect the other components set_week(x, \"last\") #> <year_week_day<Sunday><hour>[2]> #> [1] \"2019-W52-6T10\" \"2020-W53-6T10\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-count-between.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting: year-week-day — year-week-day-count-between","title":"Counting: year-week-day — year-week-day-count-between","text":"year-week-day method calendar_count_between() generic. counts number precision units start end (.e., number years).","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-count-between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting: year-week-day — year-week-day-count-between","text":"","code":"# S3 method for class 'clock_year_week_day' calendar_count_between(start, end, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-count-between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting: year-week-day — year-week-day-count-between","text":"start, end [clock_year_week_day] pair year-week-day vectors. recycled common size. precision [character(1)] One : \"year\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-count-between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting: year-week-day — year-week-day-count-between","text":"integer representing number precision units start end.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-count-between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting: year-week-day — year-week-day-count-between","text":"","code":"# Compute the number of whole years between two dates x <- year_week_day(2001, 1, 2) y <- year_week_day(2021, 1, c(1, 3)) calendar_count_between(x, y, \"year\") #> [1] 19 20"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters: year-week-day — year-week-day-getters","title":"Getters: year-week-day — year-week-day-getters","text":"year-week-day methods getter generics. get_year() returns year. Note can differ Gregorian year. get_week() returns week current year. get_day() returns value 1-7 indicating weekday current week, 1 = start week 7 = end week, line chosen start. sub-daily getters extracting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters: year-week-day — year-week-day-getters","text":"","code":"# S3 method for class 'clock_year_week_day' get_year(x)  # S3 method for class 'clock_year_week_day' get_week(x)  # S3 method for class 'clock_year_week_day' get_day(x)  # S3 method for class 'clock_year_week_day' get_hour(x)  # S3 method for class 'clock_year_week_day' get_minute(x)  # S3 method for class 'clock_year_week_day' get_second(x)  # S3 method for class 'clock_year_week_day' get_millisecond(x)  # S3 method for class 'clock_year_week_day' get_microsecond(x)  # S3 method for class 'clock_year_week_day' get_nanosecond(x)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters: year-week-day — year-week-day-getters","text":"x [clock_year_week_day] year-week-day get component .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getters: year-week-day — year-week-day-getters","text":"component.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getters: year-week-day — year-week-day-getters","text":"","code":"x <- year_week_day(2019, 50:52, 1:3) x #> <year_week_day<Sunday><day>[3]> #> [1] \"2019-W50-1\" \"2019-W51-2\" \"2019-W52-3\"  # Get the week get_week(x) #> [1] 50 51 52  # Gets the weekday get_day(x) #> [1] 1 2 3  # Note that the year can differ from the Gregorian year iso <- year_week_day(2019, 1, 1, start = clock_weekdays$monday) ymd <- as_year_month_day(iso)  get_year(iso) #> [1] 2019 get_year(ymd) #> [1] 2018"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping: year-week-day — year-week-day-group","title":"Grouping: year-week-day — year-week-day-group","text":"year-week-day method calendar_group() generic. Grouping year-week-day object can done precision, long x least precise precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping: year-week-day — year-week-day-group","text":"","code":"# S3 method for class 'clock_year_week_day' calendar_group(x, precision, ..., n = 1L)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping: year-week-day — year-week-day-group","text":"x [clock_year_week_day] year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" ... dots future extensions must empty. n [positive integer(1)] single positive integer specifying multiple precision use.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping: year-week-day — year-week-day-group","text":"x grouped specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping: year-week-day — year-week-day-group","text":"","code":"x <- year_week_day(2019, 1:52)  # Group by 3 weeks calendar_group(x, \"week\", n = 3) #> <year_week_day<Sunday><week>[52]> #>  [1] \"2019-W01\" \"2019-W01\" \"2019-W01\" \"2019-W04\" \"2019-W04\" \"2019-W04\" #>  [7] \"2019-W07\" \"2019-W07\" \"2019-W07\" \"2019-W10\" \"2019-W10\" \"2019-W10\" #> [13] \"2019-W13\" \"2019-W13\" \"2019-W13\" \"2019-W16\" \"2019-W16\" \"2019-W16\" #> [19] \"2019-W19\" \"2019-W19\" \"2019-W19\" \"2019-W22\" \"2019-W22\" \"2019-W22\" #> [25] \"2019-W25\" \"2019-W25\" \"2019-W25\" \"2019-W28\" \"2019-W28\" \"2019-W28\" #> [31] \"2019-W31\" \"2019-W31\" \"2019-W31\" \"2019-W34\" \"2019-W34\" \"2019-W34\" #> [37] \"2019-W37\" \"2019-W37\" \"2019-W37\" \"2019-W40\" \"2019-W40\" \"2019-W40\" #> [43] \"2019-W43\" \"2019-W43\" \"2019-W43\" \"2019-W46\" \"2019-W46\" \"2019-W46\" #> [49] \"2019-W49\" \"2019-W49\" \"2019-W49\" \"2019-W52\"  y <- year_week_day(2000:2020, 1, 1)  # Group by 2 years calendar_group(y, \"year\", n = 2) #> <year_week_day<Sunday><year>[21]> #>  [1] \"2000\" \"2000\" \"2002\" \"2002\" \"2004\" \"2004\" \"2006\" \"2006\" \"2008\" #> [10] \"2008\" \"2010\" \"2010\" \"2012\" \"2012\" \"2014\" \"2014\" \"2016\" \"2016\" #> [19] \"2018\" \"2018\" \"2020\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-narrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow: year-week-day — year-week-day-narrow","title":"Narrow: year-week-day — year-week-day-narrow","text":"year-week-day method calendar_narrow() generic. narrows year-week-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-narrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow: year-week-day — year-week-day-narrow","text":"","code":"# S3 method for class 'clock_year_week_day' calendar_narrow(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-narrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow: year-week-day — year-week-day-narrow","text":"x [clock_year_week_day] year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-narrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow: year-week-day — year-week-day-narrow","text":"x narrowed supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-narrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow: year-week-day — year-week-day-narrow","text":"","code":"# Day precision x <- year_week_day(2019, 1, 5) x #> <year_week_day<Sunday><day>[1]> #> [1] \"2019-W01-5\"  # Narrowed to week precision calendar_narrow(x, \"week\") #> <year_week_day<Sunday><week>[1]> #> [1] \"2019-W01\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters: year-week-day — year-week-day-setters","title":"Setters: year-week-day — year-week-day-setters","text":"year-week-day methods setter generics. set_year() sets year. set_week() sets week year. Valid values range [1, 53]. set_day() sets day week. Valid values range [1, 7]. sub-daily setters setting precise components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setters: year-week-day — year-week-day-setters","text":"","code":"# S3 method for class 'clock_year_week_day' set_year(x, value, ...)  # S3 method for class 'clock_year_week_day' set_week(x, value, ...)  # S3 method for class 'clock_year_week_day' set_day(x, value, ...)  # S3 method for class 'clock_year_week_day' set_hour(x, value, ...)  # S3 method for class 'clock_year_week_day' set_minute(x, value, ...)  # S3 method for class 'clock_year_week_day' set_second(x, value, ...)  # S3 method for class 'clock_year_week_day' set_millisecond(x, value, ...)  # S3 method for class 'clock_year_week_day' set_microsecond(x, value, ...)  # S3 method for class 'clock_year_week_day' set_nanosecond(x, value, ...)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters: year-week-day — year-week-day-setters","text":"x [clock_year_week_day] year-week-day vector. value [integer / \"last\"] value set component . set_week(), can also \"last\" adjust last week current year. ... dots future extensions must empty.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setters: year-week-day — year-week-day-setters","text":"x component set.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setters: year-week-day — year-week-day-setters","text":"","code":"# Year precision vector x <- year_week_day(2019:2023)  # Promote to week precision by setting the week # (Note that some weeks have 52 weeks, and others have 53) x <- set_week(x, \"last\") x #> <year_week_day<Sunday><week>[5]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\"  # Set to an invalid week invalid <- set_week(x, 53) invalid #> <year_week_day<Sunday><week>[5]> #> [1] \"2019-W53\" \"2020-W53\" \"2021-W53\" \"2022-W53\" \"2023-W53\"  # Here are the invalid ones (they only have 52 weeks) invalid[invalid_detect(invalid)] #> <year_week_day<Sunday><week>[4]> #> [1] \"2019-W53\" \"2021-W53\" \"2022-W53\" \"2023-W53\"  # Resolve the invalid dates by choosing the previous/next valid moment invalid_resolve(invalid, invalid = \"previous\") #> <year_week_day<Sunday><week>[5]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\" invalid_resolve(invalid, invalid = \"next\") #> <year_week_day<Sunday><week>[5]> #> [1] \"2020-W01\" \"2020-W53\" \"2022-W01\" \"2023-W01\" \"2024-W01\""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen: year-week-day — year-week-day-widen","title":"Widen: year-week-day — year-week-day-widen","text":"year-week-day method calendar_widen() generic. widens year-week-day vector specified precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen: year-week-day — year-week-day-widen","text":"","code":"# S3 method for class 'clock_year_week_day' calendar_widen(x, precision)"},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen: year-week-day — year-week-day-widen","text":"x [clock_year_week_day] year-week-day vector. precision [character(1)] One : \"year\" \"week\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\"","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-widen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Widen: year-week-day — year-week-day-widen","text":"x widened supplied precision.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year-week-day-widen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widen: year-week-day — year-week-day-widen","text":"","code":"# Week precision x <- year_week_day(2019, 1, start = clock_weekdays$monday) x #> <year_week_day<Monday><week>[1]> #> [1] \"2019-W01\"  # Widen to day precision # In this calendar, the first day of the week is a Monday calendar_widen(x, \"day\") #> <year_week_day<Monday><day>[1]> #> [1] \"2019-W01-1\"  # Or second precision sec <- calendar_widen(x, \"second\") sec #> <year_week_day<Monday><second>[1]> #> [1] \"2019-W01-1T00:00:00\""},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: year-day — year_day","title":"Calendar: year-day — year_day","text":"year_day() constructs calendar vector Gregorian year day year.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: year-day — year_day","text":"","code":"year_day(   year,   day = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: year-day — year_day","text":"year [integer] year. Values [-32767, 32767] generally allowed. day [integer / NULL] day year. Values [1, 366] allowed. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: year-day — year_day","text":"year-day calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: year-day — year_day","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: year-day — year_day","text":"","code":"# Just the year x <- year_day(2019:2025) x #> <year_day<year>[7]> #> [1] \"2019\" \"2020\" \"2021\" \"2022\" \"2023\" \"2024\" \"2025\"  year_day(2020, 1:10) #> <year_day<day>[10]> #>  [1] \"2020-001\" \"2020-002\" \"2020-003\" \"2020-004\" \"2020-005\" \"2020-006\" #>  [7] \"2020-007\" \"2020-008\" \"2020-009\" \"2020-010\"  # Last day of the year, accounting for leap years year_day(2019:2021, \"last\") #> <year_day<day>[3]> #> [1] \"2019-365\" \"2020-366\" \"2021-365\"  # Precision can go all the way out to nanosecond year_day(2019, 100, 2, 40, 45, 200, subsecond_precision = \"nanosecond\") #> <year_day<nanosecond>[1]> #> [1] \"2019-100T02:40:45.000000200\""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: year-month-day — year_month_day","title":"Calendar: year-month-day — year_month_day","text":"year_month_day() constructs common calendar type using Gregorian year, month, day, time day components.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: year-month-day — year_month_day","text":"","code":"year_month_day(   year,   month = NULL,   day = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: year-month-day — year_month_day","text":"year [integer] year. Values [-32767, 32767] generally allowed. month [integer / NULL] month. Values [1, 12] allowed. day [integer / \"last\" / NULL] day month. Values [1, 31] allowed. \"last\", last day month returned. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: year-month-day — year_month_day","text":"year-month-day calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: year-month-day — year_month_day","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: year-month-day — year_month_day","text":"","code":"# Just the year x <- year_month_day(2019:2025)  # Year-month type year_month_day(2020, 1:12) #> <year_month_day<month>[12]> #>  [1] \"2020-01\" \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" #>  [7] \"2020-07\" \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\"  # The most common use case involves year, month, and day fields x <- year_month_day(2020, clock_months$january, 1:5) x #> <year_month_day<day>[5]> #> [1] \"2020-01-01\" \"2020-01-02\" \"2020-01-03\" \"2020-01-04\" \"2020-01-05\"  # Precision can go all the way out to nanosecond year_month_day(2019, 1, 2, 2, 40, 45, 200, subsecond_precision = \"nanosecond\") #> <year_month_day<nanosecond>[1]> #> [1] \"2019-01-02T02:40:45.000000200\""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: year-month-day — year_month_day_parse","title":"Parsing: year-month-day — year_month_day_parse","text":"year_month_day_parse() parses strings year-month-day. default options assume x parsed day precision, using format string \"%Y-%m-%d\". precise precision day used, time components also parsed. default format separates date time components \"T\" time components \":\". example, setting precision \"second\" use default format \"%Y-%m-%dT%H:%M:%S\". aligned format() method year-month-day, RFC 3339 standard.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: year-month-day — year_month_day_parse","text":"","code":"year_month_day_parse(   x,   ...,   format = NULL,   precision = \"day\",   locale = clock_locale() )"},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: year-month-day — year_month_day_parse","text":"x [character] character vector parse. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. precision [character(1)] precision resulting year-month-day. One : \"year\" \"month\" \"day\" \"hour\" \"minute\" \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" Setting precision determines much information %S attempts parse. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: year-month-day — year_month_day_parse","text":"year-month-day calendar vector. parsing fails, NA returned.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing: year-month-day — year_month_day_parse","text":"year_month_day_parse() completely ignores %z %Z commands.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"full-precision-parsing","dir":"Reference","previous_headings":"","what":"Full Precision Parsing","title":"Parsing: year-month-day — year_month_day_parse","text":"highly recommended parse information date-time string type least precise string. example, string fractional seconds, require seconds, specify sub-second precision, round seconds manually using whatever convention appropriate use case. Parsing string directly second precision result ambiguous undefined, unlikely work might expect.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_day_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: year-month-day — year_month_day_parse","text":"","code":"x <- \"2019-01-01\"  # Default parses at day precision year_month_day_parse(x) #> <year_month_day<day>[1]> #> [1] \"2019-01-01\"  # Can parse at less precise precisions too year_month_day_parse(x, precision = \"month\") #> <year_month_day<month>[1]> #> [1] \"2019-01\" year_month_day_parse(x, precision = \"year\") #> <year_month_day<year>[1]> #> [1] \"2019\"  # Even invalid dates can be round-tripped through format<->parse calls invalid <- year_month_day(2019, 2, 30) year_month_day_parse(format(invalid)) #> <year_month_day<day>[1]> #> [1] \"2019-02-30\"  # Can parse with time of day year_month_day_parse(   \"2019-01-30T02:30:00.123456789\",   precision = \"nanosecond\" ) #> <year_month_day<nanosecond>[1]> #> [1] \"2019-01-30T02:30:00.123456789\"  # Can parse using multiple format strings, which will be tried # in the order they are provided x <- c(\"2019-01-01\", \"2020-01-01\", \"2021/2/3\") formats <- c(\"%Y-%m-%d\", \"%Y/%m/%d\") year_month_day_parse(x, format = formats) #> <year_month_day<day>[3]> #> [1] \"2019-01-01\" \"2020-01-01\" \"2021-02-03\"  # Can parse using other format tokens as well year_month_day_parse(   \"January, 2019\",   format = \"%B, %Y\",   precision = \"month\" ) #> <year_month_day<month>[1]> #> [1] \"2019-01\"  # Parsing a French year-month-day year_month_day_parse(   \"octobre 1, 2000\",   format = \"%B %d, %Y\",   locale = clock_locale(\"fr\") ) #> <year_month_day<day>[1]> #> [1] \"2000-10-01\""},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: year-month-weekday — year_month_weekday","title":"Calendar: year-month-weekday — year_month_weekday","text":"year_month_weekday() constructs calendar vector Gregorian year, month, weekday, index specifying n-th weekday month.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: year-month-weekday — year_month_weekday","text":"","code":"year_month_weekday(   year,   month = NULL,   day = NULL,   index = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: year-month-weekday — year_month_weekday","text":"year [integer] year. Values [-32767, 32767] generally allowed. month [integer / NULL] month. Values [1, 12] allowed. day [integer / NULL] weekday month. Values [1, 7] allowed, 1 Sunday 7 Saturday. index [integer / \"last\" / NULL] index specifying day n-th weekday month. Values [1, 5] allowed. \"last\", last instance day current month returned. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: year-month-weekday — year_month_weekday","text":"year-month-weekday calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: year-month-weekday — year_month_weekday","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_month_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: year-month-weekday — year_month_weekday","text":"","code":"# All Fridays in January, 2019 # Note that there was no 5th Friday in January x <- year_month_weekday(   2019,   clock_months$january,   clock_weekdays$friday,   1:5 ) x #> <year_month_weekday<day>[5]> #> [1] \"2019-01-Fri[1]\" \"2019-01-Fri[2]\" \"2019-01-Fri[3]\" \"2019-01-Fri[4]\" #> [5] \"2019-01-Fri[5]\"  invalid_detect(x) #> [1] FALSE FALSE FALSE FALSE  TRUE  # Resolve this invalid date by using the previous valid date invalid_resolve(x, invalid = \"previous\") #> <year_month_weekday<day>[5]> #> [1] \"2019-01-Fri[1]\" \"2019-01-Fri[2]\" \"2019-01-Fri[3]\" \"2019-01-Fri[4]\" #> [5] \"2019-01-Thu[5]\""},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: year-quarter-day — year_quarter_day","title":"Calendar: year-quarter-day — year_quarter_day","text":"year_quarter_day() constructs calendar fiscal year, fiscal quarter, day quarter, along value determining month fiscal year starts .","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: year-quarter-day — year_quarter_day","text":"","code":"year_quarter_day(   year,   quarter = NULL,   day = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   start = NULL,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: year-quarter-day — year_quarter_day","text":"year [integer] fiscal year. Values [-32767, 32767] generally allowed. quarter [integer / NULL] fiscal quarter. Values [1, 4] allowed. day [integer / \"last\" / NULL] day quarter. Values [1, 92] allowed. \"last\", last day quarter returned. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. start [integer(1) / NULL] month start fiscal year . 1 = January 12 = December. NULL, start January used. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: year-quarter-day — year_quarter_day","text":"year-quarter-day calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: year-quarter-day — year_quarter_day","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_quarter_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: year-quarter-day — year_quarter_day","text":"","code":"# Year-quarter type x <- year_quarter_day(2019, 1:4) x #> <year_quarter_day<January><quarter>[4]> #> [1] \"2019-Q1\" \"2019-Q2\" \"2019-Q3\" \"2019-Q4\"  add_quarters(x, 2) #> <year_quarter_day<January><quarter>[4]> #> [1] \"2019-Q3\" \"2019-Q4\" \"2020-Q1\" \"2020-Q2\"  # Set the day to the last day of the quarter x <- set_day(x, \"last\") x #> <year_quarter_day<January><day>[4]> #> [1] \"2019-Q1-90\" \"2019-Q2-91\" \"2019-Q3-92\" \"2019-Q4-92\"  # Start the fiscal year in June june <- 6L y <- year_quarter_day(2019, 1:4, \"last\", start = june)  # Compare the year-month-day values that result from having different # fiscal year start months as_year_month_day(x) #> <year_month_day<day>[4]> #> [1] \"2019-03-31\" \"2019-06-30\" \"2019-09-30\" \"2019-12-31\" as_year_month_day(y) #> <year_month_day<day>[4]> #> [1] \"2018-08-31\" \"2018-11-30\" \"2019-02-28\" \"2019-05-31\""},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar: year-week-day — year_week_day","title":"Calendar: year-week-day — year_week_day","text":"year_week_day() constructs calendar year, week number, week day, start week. Using start = clock_weekdays$monday represents ISO week calendar equivalent using iso_year_week_day(). Using start = clock_weekdays$sunday Epidemiologists encode week-based data.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar: year-week-day — year_week_day","text":"","code":"year_week_day(   year,   week = NULL,   day = NULL,   hour = NULL,   minute = NULL,   second = NULL,   subsecond = NULL,   ...,   start = NULL,   subsecond_precision = NULL )"},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar: year-week-day — year_week_day","text":"year [integer] year. Values [-32767, 32767] generally allowed. week [integer / \"last\" / NULL] week. Values [1, 53] allowed. \"last\", last week year returned. day [integer / NULL] day week. Values [1, 7] allowed, 1 = start week 7 = end week, accordance start. hour [integer / NULL] hour. Values [0, 23] allowed. minute [integer / NULL] minute. Values [0, 59] allowed. second [integer / NULL] second. Values [0, 59] allowed. subsecond [integer / NULL] subsecond. specified, subsecond_precision must also specified determine interpret subsecond. using milliseconds, values [0, 999] allowed. using microseconds, values [0, 999999] allowed. using nanoseconds, values [0, 999999999] allowed. ... dots future extensions must empty. start [integer(1) / NULL] day consider start week. 1 = Sunday 7 = Saturday. Use clock_weekdays readable way specify start. NULL, start Sunday used. subsecond_precision [character(1) / NULL] precision interpret subsecond . One : \"millisecond\", \"microsecond\", \"nanosecond\".","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar: year-week-day — year_week_day","text":"year-week-day calendar vector.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar: year-week-day — year_week_day","text":"Fields recycled using tidyverse recycling rules. Fields collected order first NULL field located. fields first NULL field used.","code":""},{"path":"https://clock.r-lib.org/dev/reference/year_week_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar: year-week-day — year_week_day","text":"","code":"# Year-week x <- year_week_day(2019:2025, \"last\") x #> <year_week_day<Sunday><week>[7]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\" \"2024-W52\" #> [7] \"2025-W53\"  # Start the week on Monday y <- year_week_day(2019:2025, \"last\", start = clock_weekdays$monday) y #> <year_week_day<Monday><week>[7]> #> [1] \"2019-W52\" \"2020-W53\" \"2021-W52\" \"2022-W52\" \"2023-W52\" \"2024-W52\" #> [7] \"2025-W52\"  # Last days of the year as_year_month_day(set_day(x, 7)) #> <year_month_day<day>[7]> #> [1] \"2019-12-28\" \"2021-01-02\" \"2022-01-01\" \"2022-12-31\" \"2023-12-30\" #> [6] \"2024-12-28\" \"2026-01-03\" as_year_month_day(set_day(y, 7)) #> <year_month_day<day>[7]> #> [1] \"2019-12-29\" \"2021-01-03\" \"2022-01-02\" \"2023-01-01\" \"2023-12-31\" #> [6] \"2024-12-29\" \"2025-12-28\""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing: zoned-time — zoned-parsing","title":"Parsing: zoned-time — zoned-parsing","text":"two parsers zoned-time, zoned_time_parse_complete() zoned_time_parse_abbrev().","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"zoned-time-parse-complete-","dir":"Reference","previous_headings":"","what":"zoned_time_parse_complete()","title":"Parsing: zoned-time — zoned-parsing","text":"zoned_time_parse_complete() parser complete date-time strings, like \"2019-01-01T00:00:00-05:00[America/New_York]\". complete date-time string time zone offset full time zone name string, way string contain information required construct zoned-time. , zoned_time_parse_complete() requires %z %Z commands supplied format string. default options assume x parsed second precision, using format string \"%Y-%m-%dT%H:%M:%S%Ez[%Z]\". matches default result calling format() zoned-time. Additionally, format matches de-facto standard extension RFC 3339 creating completely unambiguous date-times.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"zoned-time-parse-abbrev-","dir":"Reference","previous_headings":"","what":"zoned_time_parse_abbrev()","title":"Parsing: zoned-time — zoned-parsing","text":"zoned_time_parse_abbrev() parser date-time strings containing time zone abbreviation, like \"2019-01-01 00:00:00 EST\". time zone abbreviation enough identify full time zone name date-time belongs , full time zone name must supplied zone argument. However, time zone abbreviation can help resolving ambiguity around daylight saving time fallbacks. zoned_time_parse_abbrev(), %Z must supplied interpreted time zone abbreviation rather full time zone name. used, %z command must parse correctly, value completely ignored. default options assume x parsed second precision, using format string \"%Y-%m-%d %H:%M:%S %Z\". matches default result calling print() format(usetz = TRUE) POSIXct date-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing: zoned-time — zoned-parsing","text":"","code":"zoned_time_parse_complete(   x,   ...,   format = NULL,   precision = \"second\",   locale = clock_locale() )  zoned_time_parse_abbrev(   x,   zone,   ...,   format = NULL,   precision = \"second\",   locale = clock_locale() )"},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing: zoned-time — zoned-parsing","text":"x [character] character vector parse. ... dots future extensions must empty. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. precision [character(1)] precision resulting zoned-time. One : \"second\" \"millisecond\" \"microsecond\" \"nanosecond\" Setting precision determines much information %S attempts parse. locale [clock_locale] locale object created clock_locale(). zone [character(1)] full time zone name.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing: zoned-time — zoned-parsing","text":"zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing: zoned-time — zoned-parsing","text":"zoned_time_parse_complete() given input length zero, NAs, completely fails parse, time zone able determined. case, result use \"UTC\". date-time strings contain time zone offsets (like -04:00), full time zone name, might need sys_time_parse(). date-time strings contain time zone offsets full time zone name, might need use naive_time_parse(). , know time zone date-times supposed , can convert zoned-time as_zoned_time().","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"full-precision-parsing","dir":"Reference","previous_headings":"","what":"Full Precision Parsing","title":"Parsing: zoned-time — zoned-parsing","text":"highly recommended parse information date-time string type least precise string. example, string fractional seconds, require seconds, specify sub-second precision, round seconds manually using whatever convention appropriate use case. Parsing string directly second precision result ambiguous undefined, unlikely work might expect.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-parsing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing: zoned-time — zoned-parsing","text":"","code":"library(magrittr)  zoned_time_parse_complete(\"2019-01-01T01:02:03-05:00[America/New_York]\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T01:02:03-05:00\"  zoned_time_parse_complete(   \"January 21, 2019 -0500 America/New_York\",   format = \"%B %d, %Y %z %Z\" ) #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-21T00:00:00-05:00\"  # Nanosecond precision x <- \"2019/12/31 01:05:05.123456700-05:00[America/New_York]\" zoned_time_parse_complete(   x,   format = \"%Y/%m/%d %H:%M:%S%Ez[%Z]\",   precision = \"nanosecond\" ) #> <zoned_time<nanosecond><America/New_York>[1]> #> [1] \"2019-12-31T01:05:05.123456700-05:00\"  # The `%z` offset must correspond to the true offset that would be used # if the input was parsed as a naive-time and then converted to a zoned-time # with `as_zoned_time()`. For example, the time that was parsed above used an # offset of `-05:00`. We can confirm that this is correct with: year_month_day(2019, 1, 1, 1, 2, 3) %>%   as_naive_time() %>%   as_zoned_time(\"America/New_York\") #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T01:02:03-05:00\"  # So the following would not parse correctly zoned_time_parse_complete(\"2019-01-01T01:02:03-04:00[America/New_York]\") #> Warning: Failed to parse 1 string at location 1. Returning `NA` at that location. #> <zoned_time<second><America/New_York>[1]> #> [1] NA  # `%z` is useful for breaking ties in otherwise ambiguous times. For example, # these two times are on either side of a daylight saving time fallback. # Without the `%z` offset, you wouldn't be able to tell them apart! x <- c(   \"1970-10-25T01:30:00-04:00[America/New_York]\",   \"1970-10-25T01:30:00-05:00[America/New_York]\" )  zoned_time_parse_complete(x) #> <zoned_time<second><America/New_York>[2]> #> [1] \"1970-10-25T01:30:00-04:00\" \"1970-10-25T01:30:00-05:00\"  # If you have date-time strings with time zone abbreviations, # `zoned_time_parse_abbrev()` should be able to help. The `zone` must be # provided, because multiple countries may use the same time zone # abbreviation. For example: x <- \"1970-01-01 02:30:30 IST\"  # IST = India Standard Time zoned_time_parse_abbrev(x, \"Asia/Kolkata\") #> <zoned_time<second><Asia/Kolkata>[1]> #> [1] \"1970-01-01T02:30:30+05:30\"  # IST = Israel Standard Time zoned_time_parse_abbrev(x, \"Asia/Jerusalem\") #> <zoned_time<second><Asia/Jerusalem>[1]> #> [1] \"1970-01-01T02:30:30+02:00\"  # The time zone abbreviation is mainly useful for resolving ambiguity # around daylight saving time fallbacks. Without the abbreviation, these # date-times would be ambiguous. x <- c(   \"1970-10-25 01:30:00 EDT\",   \"1970-10-25 01:30:00 EST\" ) zoned_time_parse_abbrev(x, \"America/New_York\") #> <zoned_time<second><America/New_York>[2]> #> [1] \"1970-10-25T01:30:00-04:00\" \"1970-10-25T01:30:00-05:00\""},{"path":"https://clock.r-lib.org/dev/reference/zoned-zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the time zone — zoned-zone","title":"Get or set the time zone — zoned-zone","text":"zoned_time_zone() gets time zone. zoned_time_set_zone() sets time zone without changing underlying instant. means result represent equivalent time new time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the time zone — zoned-zone","text":"","code":"zoned_time_zone(x)  zoned_time_set_zone(x, zone)"},{"path":"https://clock.r-lib.org/dev/reference/zoned-zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the time zone — zoned-zone","text":"x [zoned_time] zoned time get set time zone . zone [character(1)] valid time zone switch .","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the time zone — zoned-zone","text":"zoned_time_zone() returns string containing time zone. zoned_time_set_zone() returns x altered time zone attribute. underlying instant changed.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned-zone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the time zone — zoned-zone","text":"","code":"x <- year_month_day(2019, 1, 1) x <- as_zoned_time(as_naive_time(x), \"America/New_York\") x #> <zoned_time<second><America/New_York>[1]> #> [1] \"2019-01-01T00:00:00-05:00\"  zoned_time_zone(x) #> [1] \"America/New_York\"  # Equivalent UTC time zoned_time_set_zone(x, \"UTC\") #> <zoned_time<second><UTC>[1]> #> [1] \"2019-01-01T05:00:00+00:00\"  # To force a new time zone with the same printed time, # convert to a naive time that has no implied time zone, # then convert back to a zoned time in the new time zone. nt <- as_naive_time(x) nt #> <naive_time<second>[1]> #> [1] \"2019-01-01T00:00:00\" as_zoned_time(nt, \"UTC\") #> <zoned_time<second><UTC>[1]> #> [1] \"2019-01-01T00:00:00+00:00\""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Info: zoned-time — zoned_time_info","title":"Info: zoned-time — zoned_time_info","text":"zoned_time_info() retrieves set low-level information generally required date-time manipulations. returns data frame columns sys_time_info(), begin end columns zoned-times time zone x.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info: zoned-time — zoned_time_info","text":"","code":"zoned_time_info(x)"},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info: zoned-time — zoned_time_info","text":"x [clock_zoned_time] zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info: zoned-time — zoned_time_info","text":"data frame low level information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Info: zoned-time — zoned_time_info","text":"","code":"x <- year_month_day(2021, 03, 14, c(01, 03), c(59, 00), c(59, 00)) x <- as_naive_time(x) x <- as_zoned_time(x, \"America/New_York\")  # x[1] is in EST, x[2] is in EDT x #> <zoned_time<second><America/New_York>[2]> #> [1] \"2021-03-14T01:59:59-05:00\" \"2021-03-14T03:00:00-04:00\"  info <- zoned_time_info(x) info #>                                         begin #> 1 2020-11-01T01:00:00-05:00[America/New_York] #> 2 2021-03-14T03:00:00-04:00[America/New_York] #>                                           end offset   dst #> 1 2021-03-14T03:00:00-04:00[America/New_York] -18000 FALSE #> 2 2021-11-07T01:00:00-05:00[America/New_York] -14400  TRUE #>   abbreviation #> 1          EST #> 2          EDT  # `end` can be used to iterate through daylight saving time transitions zoned_time_info(info$end) #>                                         begin #> 1 2021-03-14T03:00:00-04:00[America/New_York] #> 2 2021-11-07T01:00:00-05:00[America/New_York] #>                                           end offset   dst #> 1 2021-11-07T01:00:00-05:00[America/New_York] -14400  TRUE #> 2 2022-03-13T03:00:00-04:00[America/New_York] -18000 FALSE #>   abbreviation #> 1          EDT #> 2          EST"},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":null,"dir":"Reference","previous_headings":"","what":"What is the current zoned-time? — zoned_time_now","title":"What is the current zoned-time? — zoned_time_now","text":"zoned_time_now() returns current time corresponding zone. wrapper around sys_time_now() attaches time zone.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What is the current zoned-time? — zoned_time_now","text":"","code":"zoned_time_now(zone)"},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What is the current zoned-time? — zoned_time_now","text":"zone [character(1)] time zone get current time .","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What is the current zoned-time? — zoned_time_now","text":"zoned-time current time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"What is the current zoned-time? — zoned_time_now","text":"time returned nanosecond precision, actual amount data returned OS dependent. Usually, information least microsecond level returned, platforms returning nanosecond information.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_now.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What is the current zoned-time? — zoned_time_now","text":"","code":"x <- zoned_time_now(\"America/New_York\")"},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision: zoned-time — zoned_time_precision","title":"Precision: zoned-time — zoned_time_precision","text":"zoned_time_precision() extracts precision zoned-time. returns precision single string.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision: zoned-time — zoned_time_precision","text":"","code":"zoned_time_precision(x)"},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision: zoned-time — zoned_time_precision","text":"x [clock_zoned_time] zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision: zoned-time — zoned_time_precision","text":"single string holding precision zoned-time.","code":""},{"path":"https://clock.r-lib.org/dev/reference/zoned_time_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision: zoned-time — zoned_time_precision","text":"","code":"zoned_time_precision(zoned_time_now(\"America/New_York\")) #> [1] \"nanosecond\""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-development-version","dir":"Changelog","previous_headings":"","what":"clock (development version)","title":"clock (development version)","text":"%Y, %F, %G, %c now parse 4 characters default, rather 4 digits. line C++20 specification change made upstream <date.h> parser. Practically, means negative years -1000-01-01 longer parse %Y-%m-%d, instead requires %5Y-%m-%d capture leading - (#387). tzdb >=0.5.0 required. Note older versions clock compatible tzdb 0.5.0 , issues (particularly parsing) please make sure clock tzdb fully updated (#387). Fixed -Wdeprecated-literal-operator reported clang (#386, @MichaelChirico). R >=4.0.0 now required. consistent standards tidyverse.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-072","dir":"Changelog","previous_headings":"","what":"clock 0.7.2","title":"clock 0.7.2","text":"CRAN release: 2025-01-21 Added diff() method time points calendars ensure durations always returned, even empty result case (#364). Fixed issue clock compile Centos 7 using gcc-5.4.0 due constexpr issue (#357). Fixed test failed due seq.Date() now returning integer storage cases development version R.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-071","dir":"Changelog","previous_headings":"","what":"clock 0.7.1","title":"clock 0.7.1","text":"CRAN release: 2024-07-18 Removed usage non-API STRING_PTR() favor STRING_PTR_RO(). Fixed gcc warning reported CRAN related templated C++ constructors (#371).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-070","dir":"Changelog","previous_headings":"","what":"clock 0.7.0","title":"clock 0.7.0","text":"CRAN release: 2023-05-15","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"clock 0.7.0","text":"New year_week_day() calendar specifying date using year, week number, day week, alongside start value representing day week considered start week. Using start = clock_weekdays$monday identical iso_year_week_day() calendar, using start = clock_weekdays$sunday useful representing Epidemiological calendar used US CDC guidelines (similar supported lubridate::epiweek() lubridate::epiyear()) (#110). New date_spanning_seq() generating regular sequence along full span date date-time vector (.e. along [min(x), max(x)]). similar tidyr::full_seq(), bit simpler currently better handling edge cases. Additionally included low-level API calendar_spanning_seq(), time_point_spanning_seq(), duration_spanning_seq() (#279). New date_time_info() zoned_time_info() low-level helpers accessing previous/next transition times, offset UTC, current time zone abbreviation (#295). calendar_leap_year() now supports year-quarter-day iso-year-week-day calendars (#332, #333).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"clock 0.7.0","text":"storage mechanism duration, sys-time, naive-time, zoned-time types altered correctly represent full range values allowed underlying C++ types. means serialized value one types old version clock, longer unserialize correctly going forward. Technically, rather storing variable number integer vectors representing ticks, ticks day, ticks second, now always store values types within two double vectors, regardless precision. simplifies implementation allows us represent full range possible int64_t values (#331).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"lifecycle-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Lifecycle changes","title":"clock 0.7.0","text":"date_zone() date_set_zone() soft-deprecated favor date_time_zone() date_time_set_zone() (#326).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"minor-changes-and-bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes and bug fixes","title":"clock 0.7.0","text":"clock now compiles significantly faster (2018 Intel Mac, used take ~70 seconds full compilation, now takes ~25 seconds) (#322). %% %/% operators now return missing value right-hand side 0. %/%, consistent 2L %/% 0L, returns missing value, rather 2 %/% 0, returns Inf, since infinite durations supported (#349). seq() methods durations time points handle empty sequence cases > && > 0 < && < 0 better far apart (.e. otherwise result overflow subtracted). zoned_time_zone() zoned_time_set_zone() longer generic, now work zoned-times. Documented clock’s current stance leap seconds FAQ vignette (clock ignores like POSIXct) (#309). Duration vectors now work ..arguments slider::slide_index() friends (#306). as_*() generics exported clock now include ... signature help extensibility converting clock types. clock generics currently “blessed” fully extensible (#348). .character() implemented durations. Fixed vec_ptype_full() vec_ptype_abbr() methods sys-time naive-time objects (#302). Many errors improved (#219, #286, #595). Renamed locale.h fill.h avoid clock’s locale.h chosen system header name CentOS machines (#310). Skipped test 32-bit architectures work around bug base R (#312). R >=3.5.0 now required, line tidyverse standards. vctrs >=0.6.1 rlang >=1.1.0 now required.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-061","dir":"Changelog","previous_headings":"","what":"clock 0.6.1","title":"clock 0.6.1","text":"CRAN release: 2022-07-18 date_seq() seq() methods calendar, time point, duration types now allow > > 0. now results size zero result rather error, line rlang::seq2() generally useful programmatic properties (#282). sys-time method .POSIXct() now correctly promotes precision least seconds attempting conversion. matches behavior naive-time method (#278). Removed dependency ellipsis favor equivalent functions rlang (#288). Updated tests related writing UTF-8 Windows testthat 3.1.2 (#287). Updated snapshot tests use rlang 1.0.0 (#285). tzdb >=0.3.0 now required get access latest time zone database information (2022a). vctrs >=0.4.1 rlang >=1.0.4 now required (#297). cpp11 >=0.4.2 now required ensure fix related unwind protection included. R >=3.4.0 now required. consistent standards tidyverse.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-060","dir":"Changelog","previous_headings":"","what":"clock 0.6.0","title":"clock 0.6.0","text":"CRAN release: 2021-12-02 New date_count_between(), calendar_count_between(), time_point_count_between() computing number units time two dates (.e. number years, months, days, seconds). number uses, like computing age individual years, determining number weeks passed since start year (#266). Modulus now defined duration vector integer vector <duration> %% <integer>. returns duration vector containing remainder division (#273). Integer division now defined two duration objects <duration> %/% <duration>. always returns integer vector, aware using precise duration objects (like nanoseconds) can easily generate division result outside range integer. case, NA returned warning.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-050","dir":"Changelog","previous_headings":"","what":"clock 0.5.0","title":"clock 0.5.0","text":"CRAN release: 2021-10-29 New date_time_parse_RFC_3339() sys_time_parse_RFC_3339() parsing date-time strings RFC 3339 format. format subset ISO 8601 representing common date-time formats seen internet protocols, particularly useful parsing date-time strings returned API. default format parses strings like \"2019-01-01T01:02:03Z\" can adjusted parse numeric offset UTC offset argument, can parse strings like \"2019-01-01T01:02:03-04:30\" (#254). align RFC 3339 ISO 8601 standards, default formats used many date formatting parsing functions slightly altered. following changes made: Date-times (POSIXct): date_format() now prints T date time. date_time_parse_complete() now expects T date time default. Sys-times: format() .character() now print T date time. sys_time_parse() now expects T date time default. Naive-times: format() .character() now print T date time. naive_time_parse() now expects T date time default. Zoned-times: format() .character() now print T date time. zoned_time_parse_complete() now expects T date time default. Calendars: format() .character() now print T date time. year_month_day_parse() now expects T date time default. improved documentation undefined behavior resulting attempting parse sub-daily components string intended parsed Date (#258). Bumped required minimum version tzdb 0.2.0 get access latest time zone database information (2021e) fix Unicode bug Windows.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-041","dir":"Changelog","previous_headings":"","what":"clock 0.4.1","title":"clock 0.4.1","text":"CRAN release: 2021-09-21 Updated test related upcoming changes testthat.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-040","dir":"Changelog","previous_headings":"","what":"clock 0.4.0","title":"clock 0.4.0","text":"CRAN release: 2021-07-22 New date_start() date_end() computing date start end particular precision, “end month” “start year”. powered calendar_start() calendar_end(), allow even flexible calendar-specific boundary generation, “last moment fiscal quarter” (#232). New invalid_remove() removing invalid dates. just wrapper around x[!invalid_detect(x)], works nicely pipe (#229). clock types now support .nan(), .finite(), .infinite(). Additionally, duration types now support abs() sign() (#235). tzdb 0.1.2 now required, fixes compilation issues RHEL7/Centos (#234).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-031","dir":"Changelog","previous_headings":"","what":"clock 0.3.1","title":"clock 0.3.1","text":"CRAN release: 2021-06-28 Parsing date-time type coarser original string now considered ambiguous undefined behavior. example, parsing string fractional seconds using date_time_parse(x) naive_time_parse(x, precision = \"second\") longer considered correct. Instead, require second precision string, parse full string, fractional seconds, clock type can handle , round seconds using whatever rounding convention required use case, time_point_floor() (#230). example: Preemptively updated tests related upcoming changes testthat (#236).","code":"x <- c(\"2019-01-01 00:00:59.123\", \"2019-01-01 00:00:59.556\")  x <- naive_time_parse(x, precision = \"millisecond\") x #> <time_point<naive><millisecond>[2]> #> [1] \"2019-01-01 00:00:59.123\" \"2019-01-01 00:00:59.556\"  x <- time_point_round(x, \"second\") x #> <time_point<naive><second>[2]> #> [1] \"2019-01-01 00:00:59\" \"2019-01-01 00:01:00\"  as_date_time(x, \"America/New_York\") #> [1] \"2019-01-01 00:00:59 EST\" \"2019-01-01 00:01:00 EST\""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-030","dir":"Changelog","previous_headings":"","what":"clock 0.3.0","title":"clock 0.3.0","text":"CRAN release: 2021-04-22 New date_seq() generating date date-time sequences (#218). clock now uses tzdb package access date library’s API. means experimental API used vroom removed favor using one exposed tzdb. zone_database_names() zone_database_version() removed favor re-exporting tzdb_names() tzdb_version() tzdb package.","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-020","dir":"Changelog","previous_headings":"","what":"clock 0.2.0","title":"clock 0.2.0","text":"CRAN release: 2021-04-12 clock now interprets R’s Date class naive-time rather sys-time. means longer assumes Date implied time zone UTC (#203). generally aligns better users think Date work. resulted following changes: date_zone() now errors Date input, naive-times specified time zone. date_parse() now parses naive-time, rather sys-time, converting Date. means %z %Z now completely ignored. Date method date_format() now uses naive-time format() method rather zoned-time one. means %z %Z longer valid format commands. zoned-time method .Date() now converts Date intermediate naive-time, rather sys-time. means printed date always retained, generally expected. Date method as_zoned_time() now converts zoned-time intermediate naive-time, rather sys-time. means printed date always attempt retained, possible, generally expected. rare case daylight saving time makes direct conversion impossible, nonexistent ambiguous can used resolve issues. New as_date() as_date_time() converting Date POSIXct respectively. Unlike .Date() .POSIXct(), functions always treat Date naive-time type, results consistent intuitive conversions. Note as_date() conflict lubridate::as_date(), lubridate version handles Dates differently (#209). Added two new convenient helpers (#197): date_today() getting current date (Date) date_now() getting current date-time (POSIXct) Fixed bug converting time point Date POSIXct round incorrectly (#205). Errors resulting invalid dates nonexistent/ambiguous times now little nicer read usage info bullet (#200). Formatting naive-time %Z %z now warns format failures (#204). Fixed Solaris ambiguous behavior issue calling pow(int, int). Linking cpp11 0.2.7 now required fix rare memory leak issue. Exposed extremely experimental limited C++ API vroom (#322).","code":""},{"path":"https://clock.r-lib.org/dev/news/index.html","id":"clock-010","dir":"Changelog","previous_headings":"","what":"clock 0.1.0","title":"clock 0.1.0","text":"CRAN release: 2021-03-31 Added NEWS.md file track changes package.","code":""}]
