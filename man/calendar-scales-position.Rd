% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale-calendar.R,
%   R/scale-gregorian-year-month-day.R, R/scale-quarterly-year-quarter-day.R,
%   R/scale-week-year-week-day.R
\name{calendar-scales-position}
\alias{calendar-scales-position}
\alias{scale_x_year_month_day}
\alias{scale_y_year_month_day}
\alias{scale_x_year_quarter_day}
\alias{scale_y_year_quarter_day}
\alias{scale_x_year_week_day}
\alias{scale_y_year_week_day}
\title{Position scales: calendar}
\usage{
scale_x_year_month_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  date_labels = ggplot2::waiver(),
  date_locale = clock_locale(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "bottom"
)

scale_y_year_month_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  date_labels = ggplot2::waiver(),
  date_locale = clock_locale(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "left"
)

scale_x_year_quarter_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "bottom"
)

scale_y_year_quarter_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "left"
)

scale_x_year_week_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "bottom"
)

scale_y_year_week_day(
  ...,
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  date_breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  date_minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  oob = scales::censor,
  expand = ggplot2::waiver(),
  guide = ggplot2::waiver(),
  position = "left"
)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{name}{The name of the scale. Used as the axis or legend title. If
\code{waiver()}, the default, the name of the scale is taken from the first
mapping used for that aesthetic. If \code{NULL}, the legend title will be
omitted.}

\item{breaks}{One of:
\itemize{
\item \code{NULL} for no breaks.
\item \code{ggplot2::waiver()} for default breaks, or to use breaks specified by
\code{date_breaks}.
\item A calendar type of the same type as the input giving positions of breaks.
\item A function that takes the limits as input and returns breaks as output.
}}

\item{date_breaks}{A single duration object giving the distance between the
breaks, like \code{duration_months(1)} or \code{duration_weeks(2)}. If both \code{breaks}
and \code{date_breaks} are specified, \code{date_breaks} wins.}

\item{minor_breaks}{Same as \code{breaks}, but applied to minor breaks.}

\item{date_minor_breaks}{Same as \code{date_breaks}, but applied to minor breaks.}

\item{n.breaks}{An integer guiding the number of major breaks. The algorithm
may choose a slightly different number to ensure nice break labels. Will
only have an effect if \code{breaks = waiver()}. Use \code{NULL} to use the default
number of breaks given by the transformation.}

\item{labels}{One of:
\itemize{
\item \code{NULL} for no labels
\item \code{waiver()} for the default labels computed by the
transformation object
\item A character vector giving labels (must be same length as \code{breaks})
\item An expression vector (must be the same length as breaks). See ?plotmath for details.
\item A function that takes the breaks as input and returns labels
as output. Also accepts rlang \link[rlang:as_function]{lambda} function
notation.
}}

\item{date_labels}{For year-month-day only, a string giving the formatting
specification for the labels, such as \code{"\%B \%Y"}. The full list of format
tokens is available at \code{\link[=format.clock_zoned_time]{format.clock_zoned_time()}}. Note that you should
only use month and year specific codes.}

\item{date_locale}{For year-month-day only, the locale used when
\code{date_labels} is also specified.}

\item{limits}{One of:
\itemize{
\item \code{NULL} to use the default scale range
\item A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum
\item A function that accepts the existing (automatic) limits and returns
new limits. Also accepts rlang \link[rlang:as_function]{lambda} function
notation.
Note that setting limits on positional scales will \strong{remove} data outside of the limits.
If the purpose is to zoom, use the limit argument in the coordinate system
(see \code{\link[ggplot2:coord_cartesian]{coord_cartesian()}}).
}}

\item{oob}{One of:
\itemize{
\item Function that handles limits outside of the scale limits
(out of bounds). Also accepts rlang \link[rlang:as_function]{lambda}
function notation.
\item The default (\code{\link[scales:oob]{scales::censor()}}) replaces out of
bounds values with \code{NA}.
\item \code{\link[scales:oob]{scales::squish()}} for squishing out of bounds values into range.
\item \code{\link[scales:oob]{scales::squish_infinite()}} for squishing infinite values into range.
}}

\item{expand}{For position scales, a vector of range expansion constants used to add some
padding around the data to ensure that they are placed some distance
away from the axes. Use the convenience function \code{\link[ggplot2:expansion]{expansion()}}
to generate the values for the \code{expand} argument. The defaults are to
expand the scale by 5\% on each side for continuous variables, and by
0.6 units on each side for discrete variables.}

\item{guide}{A function used to create a guide or its name. See
\code{\link[ggplot2:guides]{guides()}} for more information.}

\item{position}{For position scales, The position of the axis.
\code{left} or \code{right} for y axes, \code{top} or \code{bottom} for x axes.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Position scales for use with ggplot2.
\itemize{
\item \code{scale_x_year_month_day()} and \code{scale_y_year_month_day()} are only valid on
year and month precision inputs.
\item \code{scale_x_year_quarter_day()} and \code{scale_y_year_quarter_day()} are only
valid on year and quarter precision inputs.
\item \code{scale_x_year_week_day()} and \code{scale_y_year_week_day()} are only
valid on year and week precision inputs.
}

For day precision and finer, we currently still recommend using Date and
POSIXct with \code{\link[ggplot2:scale_date]{ggplot2::scale_x_date()}} and \code{\link[ggplot2:scale_date]{ggplot2::scale_x_datetime()}}.
}
\examples{
\dontshow{if (rlang::is_installed("ggplot2") && rlang::is_installed("scales")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(ggplot2)
library(vctrs)

# ---------------------------------------------------------------------------
# Monthly data

set.seed(1234)

from <- year_month_day(2019, 1)

df <- vec_rbind(
  data_frame(
    g = "stock 1",
    date = from + duration_months(cumsum(sample(1:2, size = 100, replace = TRUE))),
    price = cumsum(1 + rnorm(100))
  ),
  data_frame(
    g = "stock 2",
    date = from + duration_months(cumsum(sample(1:2, size = 100, replace = TRUE))),
    price = cumsum(1 + rnorm(100))
  )
)

# Defaults automatically know you have monthly data
ggplot(df, aes(date, price, group = g, color = g)) +
  geom_line()

# Fully customize as needed
ggplot(df, aes(date, price, group = g, color = g)) +
  geom_line() +
  scale_x_year_month_day(
    date_breaks = duration_months(24),
    date_minor_breaks = duration_months(6),
    date_labels = "\%Y"
  )

ggplot(df, aes(date, price, group = g, color = g)) +
  geom_line() +
  scale_x_year_month_day(
    date_labels = "\%B\n\%Y",
    date_locale = clock_locale("fr")
  )

# ---------------------------------------------------------------------------
# Quarterly data

set.seed(1234)

from1 <- year_quarter_day(2019, 1)
from2 <- year_quarter_day(2000, 2)

df <- vec_rbind(
  data_frame(
    g = "stock 1",
    date = from1 + duration_quarters(cumsum(sample(1:5, size = 50, replace = TRUE))),
    price = cumsum(1 + rnorm(50))
  ),
  data_frame(
    g = "stock 2",
    date = from2 + duration_quarters(cumsum(sample(1:5, size = 50, replace = TRUE))),
    price = cumsum(1 + rnorm(50))
  )
)

ggplot(df, aes(date, price, group = g, color = g)) +
  geom_line()

# Zooming with `coord_cartesian()`
ggplot(df, aes(date, price, group = g, color = g)) +
  geom_line() +
  coord_cartesian(xlim = year_quarter_day(c(2020, 2040), 1))

# ---------------------------------------------------------------------------
# Weekly data

set.seed(123)

# A monday
x <- naive_time_parse("2018-12-31", precision = "day")
x <- x + duration_weeks(sort(sample(100, size = 50)))

# ISO calendar
x <- as_year_week_day(x, start = clock_weekdays$monday)
x <- calendar_narrow(x, "week")

df <- data_frame(
  date = x,
  value = cumsum(rnorm(50, mean = .2))
)

ggplot(df, aes(date, value)) +
  geom_line() +
  scale_x_year_week_day()

ggplot(df, aes(date, value)) +
  geom_line() +
  scale_x_year_week_day(
    date_breaks = duration_weeks(16),
    date_minor_breaks = duration_weeks(2)
  )
\dontshow{\}) # examplesIf}
}
